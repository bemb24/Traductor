/* The following code was generated by JFlex 1.4.3 on 30/05/20 11:02 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/05/20 11:02 PM from the specification file
 * <tt>C:/Users/bonni/Documents/NetBeansProjects/CompiF/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\33\2\0\1\1\22\0\1\1\13\0\1\1\3\0"+
    "\12\0\7\0\10\0\1\13\21\0\4\0\1\0\1\0\1\24\1\11"+
    "\1\25\1\10\1\3\1\26\1\7\1\2\1\6\1\32\1\23\1\4"+
    "\1\30\1\22\1\5\1\21\1\0\1\20\1\15\1\16\1\14\1\27"+
    "\1\17\1\0\1\12\1\0\71\0\1\31\uff4b\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\1\1\3\7\1\1\4\4\1"+
    "\1\5\1\0\1\6\15\0\1\7\1\10\1\11\1\7"+
    "\2\0\1\12\11\0\1\13\25\0\1\14\4\0\1\15"+
    "\25\0\1\16\1\0\1\17\1\0\1\20\15\0\1\21"+
    "\4\0\1\22\1\23\2\0\1\24\11\0\1\25\1\26"+
    "\2\0\1\27\1\30\3\0\1\31\5\0\1\32\2\0"+
    "\1\33\4\0\1\34\7\0\1\35\6\0\1\36\10\0"+
    "\1\37\3\0\1\40\1\0\1\41\1\42\1\43\4\0"+
    "\1\44\4\0\1\45\1\46\1\47\1\50\2\0\1\51"+
    "\12\0\1\52\1\0\1\53\20\0\1\54\2\0\1\55"+
    "\4\0\1\56\4\0\1\57\1\0\1\60\3\0\1\61"+
    "\12\0\1\62\1\0\1\63\1\64\11\0\1\65\3\0"+
    "\1\66\1\67\1\70\3\0\1\71\6\0\1\72\2\0"+
    "\1\73\2\0\1\74\3\0\1\75\1\76\3\0\1\77"+
    "\1\100\1\101\1\102\1\103\1\0\1\104\1\105\1\106"+
    "\2\0\1\107\1\110\10\0\1\111\1\112\1\113\1\114"+
    "\1\0\1\115\2\0\1\116\1\117\1\120\3\0\1\121"+
    "\2\0\1\122\4\0\1\123\1\124\1\0\1\125\1\126"+
    "\1\127\1\130\1\0\1\131\1\0\1\132\4\0\1\133"+
    "\2\0\1\134\2\0\1\135\1\0\1\136\1\137\2\0"+
    "\1\140\1\141\4\0\1\142\3\0\1\143\2\0\1\144"+
    "\1\145\1\146\1\147\5\0\1\150\4\0\1\151\1\152"+
    "\2\0\1\153\1\0\1\154\1\155\1\0\1\156\1\0"+
    "\1\157\4\0\1\160\1\0\1\161\1\162\3\0\1\163"+
    "\2\0\1\164\1\165\13\0\1\166\2\0\1\167\2\0"+
    "\1\170\1\171\1\0\1\172\4\0\1\173\1\174\1\0"+
    "\1\175\2\0\1\176\1\177\1\6\1\200\1\201\1\0"+
    "\1\202\1\0\1\203\1\204\1\205\1\206\1\0\1\207"+
    "\1\0\1\210\4\0\1\211\1\212\4\0\1\213\1\214"+
    "\1\215\3\0\1\216\3\0\1\217\1\220\2\0\1\221"+
    "\1\0\1\222\1\0\1\223\1\224\1\225\1\16\2\0"+
    "\1\226\1\0\1\227\1\230\1\231\1\232\1\233\2\0"+
    "\1\234\1\235\1\236\1\237\1\240\1\241\1\242\1\243"+
    "\1\0\1\244\3\0\1\245\1\0\1\246\1\0\1\247"+
    "\5\0\1\250\2\0\1\251\2\0\1\252\1\253\4\0"+
    "\1\254\2\0\1\255\2\0\1\256\6\0\1\257\2\0"+
    "\1\260\1\261\2\0\1\262\6\0\1\263\1\264\1\0"+
    "\1\265\1\266\1\267\1\0\1\270\1\271\1\0\1\272"+
    "\2\0\1\273\7\0\1\274\10\0\1\275\1\276\1\277"+
    "\1\300\1\301\1\0\1\302\1\303\1\304\1\0\1\305"+
    "\1\306\1\0\1\307\1\310\1\311\2\0\1\312\1\313"+
    "\1\0\1\314\1\0\1\315\1\316\1\317\3\0\1\320"+
    "\2\0\1\321\1\0\1\322\5\0\1\323\1\324\1\325"+
    "\5\0\1\326\1\327\1\330\1\331\3\0\1\332\1\333"+
    "\1\0\1\334\1\335\1\336\1\0\1\337";

  private static int [] zzUnpackAction() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\34\0\u0150\0\u016c\0\u0188"+
    "\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268"+
    "\0\u0284\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348"+
    "\0\u0364\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0428"+
    "\0\u0444\0\34\0\34\0\u02d8\0\u0460\0\u047c\0\u0498\0\u04b4"+
    "\0\u04d0\0\u04ec\0\u0508\0\u0524\0\u0540\0\u055c\0\u0578\0\u0594"+
    "\0\u05b0\0\u05cc\0\u05e8\0\u0604\0\u0620\0\u063c\0\u0658\0\u0674"+
    "\0\u0690\0\u06ac\0\u06c8\0\u06e4\0\u0700\0\u071c\0\u0738\0\u0754"+
    "\0\u0770\0\u078c\0\u07a8\0\u07c4\0\u07e0\0\u07fc\0\u0818\0\u0834"+
    "\0\u0850\0\u086c\0\u0888\0\u08a4\0\u08c0\0\u08dc\0\u08f8\0\u0914"+
    "\0\u0930\0\u094c\0\u0968\0\u0984\0\u09a0\0\u09bc\0\u09d8\0\u09f4"+
    "\0\u0a10\0\u0a2c\0\u0a48\0\u0a64\0\u0a80\0\u0a9c\0\u0ab8\0\u0ad4"+
    "\0\u0af0\0\u0b0c\0\u0b28\0\u0b44\0\u0b60\0\u0b7c\0\34\0\u0b98"+
    "\0\u0bb4\0\u0bd0\0\u0bec\0\u0c08\0\u0c24\0\u0c40\0\u0c5c\0\u0c78"+
    "\0\u0c94\0\u0cb0\0\u0ccc\0\u0ce8\0\34\0\u0d04\0\u0d20\0\u0d3c"+
    "\0\u0d58\0\34\0\34\0\u0d74\0\u0d90\0\u0dac\0\u0dc8\0\u0de4"+
    "\0\u0e00\0\u0e1c\0\u0e38\0\u0e54\0\u0e70\0\u0e8c\0\u0ea8\0\34"+
    "\0\34\0\u0ec4\0\u0ee0\0\34\0\34\0\u0efc\0\u0f18\0\u0f34"+
    "\0\34\0\u0f50\0\u0f6c\0\u0f88\0\u0fa4\0\u0fc0\0\34\0\u0fdc"+
    "\0\u0ff8\0\34\0\u1014\0\u1030\0\u104c\0\u1068\0\34\0\u1084"+
    "\0\u10a0\0\u10bc\0\u10d8\0\u10f4\0\u1110\0\u112c\0\34\0\u1148"+
    "\0\u1164\0\u1180\0\u119c\0\u11b8\0\u11d4\0\34\0\u11f0\0\u120c"+
    "\0\u1228\0\u1244\0\u1260\0\u127c\0\u1298\0\u12b4\0\u12d0\0\u12ec"+
    "\0\u1308\0\u1324\0\34\0\u1340\0\34\0\34\0\u135c\0\u1378"+
    "\0\u1394\0\u13b0\0\u13cc\0\34\0\u13e8\0\u1404\0\u1420\0\u143c"+
    "\0\34\0\34\0\u1458\0\u1474\0\u1490\0\u14ac\0\34\0\u14c8"+
    "\0\u14e4\0\u1500\0\u151c\0\u1538\0\u1554\0\u1570\0\u158c\0\u15a8"+
    "\0\u15c4\0\34\0\u15e0\0\u15fc\0\u1618\0\u1634\0\u1650\0\u166c"+
    "\0\u1688\0\u16a4\0\u16c0\0\u16dc\0\u16f8\0\u1714\0\u1730\0\u174c"+
    "\0\u1768\0\u1784\0\u17a0\0\u17bc\0\34\0\u17d8\0\u17f4\0\34"+
    "\0\u1810\0\u182c\0\u1848\0\u1864\0\34\0\u1880\0\u189c\0\u18b8"+
    "\0\u18d4\0\34\0\u18f0\0\34\0\u190c\0\u1928\0\u1944\0\34"+
    "\0\u1960\0\u197c\0\u1998\0\u19b4\0\u19d0\0\u19ec\0\u1a08\0\u1a24"+
    "\0\u1a40\0\u1a5c\0\34\0\u1a78\0\34\0\34\0\u1a94\0\u1ab0"+
    "\0\u1acc\0\u1ae8\0\u1b04\0\u1b20\0\u1b3c\0\u1b58\0\u1b74\0\34"+
    "\0\u1b90\0\u1bac\0\u1bc8\0\34\0\34\0\34\0\u1be4\0\u1c00"+
    "\0\u1c1c\0\34\0\u1c38\0\u1c54\0\u1c70\0\u1c8c\0\u1ca8\0\u1cc4"+
    "\0\34\0\u1ce0\0\u1cfc\0\34\0\u1d18\0\u1d34\0\34\0\u1d50"+
    "\0\u1d6c\0\u1d88\0\34\0\u1da4\0\u1dc0\0\u1ddc\0\u1df8\0\34"+
    "\0\u1e14\0\34\0\34\0\34\0\u1e30\0\34\0\34\0\34"+
    "\0\u1e4c\0\u1e68\0\34\0\34\0\u1e84\0\u1ea0\0\u1ebc\0\u1ed8"+
    "\0\u1ef4\0\u1f10\0\u1f2c\0\u1f48\0\34\0\u1f64\0\u1f80\0\34"+
    "\0\u1f9c\0\34\0\u1fb8\0\u1fd4\0\34\0\34\0\34\0\u1ff0"+
    "\0\u200c\0\u2028\0\34\0\u2044\0\u2060\0\34\0\u207c\0\u2098"+
    "\0\u20b4\0\u20d0\0\34\0\34\0\u20ec\0\u2108\0\34\0\34"+
    "\0\34\0\u2124\0\34\0\u2140\0\34\0\u215c\0\u2178\0\u2194"+
    "\0\u21b0\0\34\0\u21cc\0\u21e8\0\34\0\u2204\0\u2220\0\34"+
    "\0\u223c\0\34\0\34\0\u2258\0\u2274\0\34\0\34\0\u2290"+
    "\0\u22ac\0\u22c8\0\u22e4\0\34\0\u2300\0\u231c\0\u2338\0\34"+
    "\0\u2354\0\u2370\0\u238c\0\34\0\34\0\34\0\u23a8\0\u23c4"+
    "\0\u23e0\0\u23fc\0\u2418\0\34\0\u2434\0\u2450\0\u246c\0\u2488"+
    "\0\34\0\34\0\u24a4\0\u24c0\0\34\0\u24dc\0\34\0\34"+
    "\0\u24f8\0\34\0\u2514\0\34\0\u2530\0\u254c\0\u2568\0\u2584"+
    "\0\34\0\u25a0\0\34\0\34\0\u25bc\0\u25d8\0\u25f4\0\34"+
    "\0\u2610\0\u262c\0\34\0\34\0\u2648\0\u2664\0\u2680\0\u269c"+
    "\0\u26b8\0\u26d4\0\u26f0\0\u270c\0\u2728\0\u2744\0\u2760\0\34"+
    "\0\u277c\0\u2798\0\34\0\u27b4\0\u27d0\0\34\0\34\0\u27ec"+
    "\0\34\0\u2808\0\u2824\0\u2840\0\u285c\0\34\0\34\0\u2878"+
    "\0\34\0\u2894\0\u28b0\0\34\0\34\0\34\0\34\0\34"+
    "\0\u28cc\0\34\0\u28e8\0\34\0\34\0\34\0\34\0\u2904"+
    "\0\34\0\u2920\0\34\0\u293c\0\u2958\0\u2974\0\u2990\0\34"+
    "\0\34\0\u29ac\0\u29c8\0\u29e4\0\u2a00\0\34\0\34\0\34"+
    "\0\u2a1c\0\u2a38\0\u2a54\0\34\0\u2a70\0\u2a8c\0\u2aa8\0\34"+
    "\0\34\0\u2ac4\0\u2ae0\0\u2afc\0\u2b18\0\34\0\u2b34\0\34"+
    "\0\34\0\34\0\34\0\u2b50\0\u2b6c\0\34\0\u2b88\0\34"+
    "\0\34\0\34\0\u2ba4\0\34\0\u2bc0\0\u2bdc\0\34\0\34"+
    "\0\34\0\34\0\34\0\34\0\34\0\34\0\u2bf8\0\34"+
    "\0\u2c14\0\u2c30\0\u2c4c\0\34\0\u2c68\0\34\0\u2c84\0\34"+
    "\0\u2ca0\0\u2cbc\0\u2cd8\0\u2cf4\0\u2d10\0\34\0\u2d2c\0\u2d48"+
    "\0\34\0\u2d64\0\u2d80\0\34\0\34\0\u2d9c\0\u2db8\0\u2dd4"+
    "\0\u2df0\0\34\0\u2e0c\0\u2e28\0\34\0\u2e44\0\u2e60\0\34"+
    "\0\u2e7c\0\u2e98\0\u2eb4\0\u2ed0\0\u2eec\0\u2f08\0\34\0\u2f24"+
    "\0\u2f40\0\34\0\34\0\u2f5c\0\u2f78\0\34\0\u2f94\0\u2fb0"+
    "\0\u2fcc\0\u2fe8\0\u3004\0\u3020\0\34\0\34\0\u303c\0\34"+
    "\0\34\0\34\0\u3058\0\34\0\34\0\u3074\0\34\0\u3090"+
    "\0\u30ac\0\34\0\u30c8\0\u30e4\0\u3100\0\u311c\0\u3138\0\u3154"+
    "\0\u3170\0\34\0\u318c\0\u31a8\0\u31c4\0\u31e0\0\u31fc\0\u3218"+
    "\0\u3234\0\u3250\0\34\0\34\0\34\0\34\0\34\0\u326c"+
    "\0\34\0\34\0\34\0\u3288\0\34\0\34\0\u32a4\0\34"+
    "\0\34\0\34\0\u32c0\0\u32dc\0\34\0\34\0\u32f8\0\34"+
    "\0\u3314\0\34\0\34\0\34\0\u3330\0\u334c\0\u3368\0\34"+
    "\0\u3384\0\u33a0\0\34\0\u33bc\0\34\0\u33d8\0\u33f4\0\u3410"+
    "\0\u342c\0\u3448\0\34\0\34\0\34\0\u3464\0\u3480\0\u349c"+
    "\0\u34b8\0\u34d4\0\34\0\34\0\34\0\34\0\u34f0\0\u350c"+
    "\0\u3528\0\34\0\34\0\u3544\0\34\0\34\0\34\0\u3560"+
    "\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\1\2\1\31\36\0\1\3\35\0\1\32\1\0"+
    "\1\33\1\34\5\0\1\35\7\0\1\36\13\0\1\37"+
    "\5\0\1\40\11\0\1\41\2\0\1\42\7\0\1\43"+
    "\1\0\1\44\1\45\5\0\1\46\7\0\1\47\23\0"+
    "\1\50\3\0\1\51\1\0\1\52\26\0\1\53\1\54"+
    "\3\0\1\55\14\0\1\56\1\57\1\60\1\61\3\0"+
    "\1\62\5\0\1\63\3\0\1\64\12\0\1\65\1\0"+
    "\1\66\1\67\5\0\1\70\3\0\1\71\16\0\1\72"+
    "\1\73\1\74\1\75\3\0\1\76\1\0\1\77\3\0"+
    "\1\100\3\0\1\101\12\0\1\102\1\0\1\103\30\0"+
    "\1\104\1\105\1\106\1\107\1\110\7\0\1\111\1\112"+
    "\1\0\1\113\2\0\1\114\1\115\10\0\1\116\1\117"+
    "\1\0\1\120\6\0\1\121\3\0\1\122\3\0\1\123"+
    "\11\0\1\124\1\125\1\0\1\126\1\127\11\0\1\130"+
    "\3\0\1\131\12\0\1\132\1\0\1\133\1\134\5\0"+
    "\1\135\7\0\1\136\11\0\1\137\1\140\1\141\1\0"+
    "\1\142\5\0\1\143\7\0\1\144\14\0\1\145\6\0"+
    "\1\146\22\0\1\147\2\0\1\150\13\0\1\151\17\0"+
    "\1\152\6\0\1\153\2\0\1\154\1\0\1\155\2\0"+
    "\1\156\2\0\1\157\5\0\1\160\1\161\1\162\1\163"+
    "\16\0\1\164\12\0\1\165\1\166\1\167\1\170\11\0"+
    "\1\171\3\0\1\172\12\0\1\173\1\0\1\174\4\0"+
    "\1\175\1\0\1\176\7\0\1\177\14\0\1\200\32\0"+
    "\1\201\13\0\1\202\1\0\1\203\1\0\1\204\23\0"+
    "\1\205\2\0\1\206\1\207\30\0\1\202\36\0\1\210"+
    "\17\0\1\211\1\0\1\212\13\0\1\213\4\0\1\214"+
    "\15\0\1\215\25\0\1\216\45\0\1\217\1\220\1\0"+
    "\1\221\4\0\1\222\11\0\1\223\37\0\1\224\6\0"+
    "\1\225\5\0\1\226\1\0\1\227\22\0\1\230\21\0"+
    "\1\231\3\0\1\232\1\0\1\233\15\0\1\234\26\0"+
    "\1\235\25\0\1\236\37\0\1\237\37\0\1\240\24\0"+
    "\1\241\34\0\1\242\31\0\1\243\24\0\1\244\46\0"+
    "\1\245\6\0\1\246\34\0\1\247\6\0\1\250\20\0"+
    "\1\251\13\0\1\252\13\0\1\253\16\0\1\254\11\0"+
    "\1\255\23\0\1\256\1\0\1\257\12\0\1\260\2\0"+
    "\1\261\30\0\1\262\36\0\1\263\11\0\1\264\2\0"+
    "\1\265\3\0\1\266\11\0\1\267\16\0\1\270\1\271"+
    "\14\0\1\272\13\0\1\273\6\0\1\274\7\0\1\275"+
    "\14\0\1\276\4\0\1\277\11\0\1\300\25\0\1\301"+
    "\6\0\1\302\11\0\1\303\34\0\1\304\5\0\1\305"+
    "\2\0\1\306\1\307\1\0\1\310\21\0\1\311\15\0"+
    "\1\312\13\0\1\313\3\0\1\314\5\0\1\315\3\0"+
    "\1\316\1\317\14\0\1\320\10\0\1\321\1\322\31\0"+
    "\1\323\22\0\1\324\1\0\1\325\1\326\30\0\1\327"+
    "\1\330\32\0\1\331\44\0\1\332\13\0\1\333\25\0"+
    "\1\334\17\0\1\335\11\0\1\336\3\0\1\337\15\0"+
    "\1\340\30\0\1\341\42\0\1\342\23\0\1\343\34\0"+
    "\1\344\1\0\1\345\1\346\15\0\1\347\13\0\1\350"+
    "\17\0\1\351\14\0\1\352\14\0\1\353\31\0\1\354"+
    "\37\0\1\355\32\0\1\356\15\0\1\357\1\360\15\0"+
    "\1\361\24\0\1\362\46\0\1\363\21\0\1\364\3\0"+
    "\1\365\17\0\1\366\50\0\1\367\20\0\1\370\13\0"+
    "\1\371\14\0\1\372\35\0\1\373\5\0\1\374\40\0"+
    "\1\375\22\0\1\376\46\0\1\377\31\0\1\u0100\35\0"+
    "\1\u0101\16\0\1\u0102\12\0\1\u0103\27\0\1\u0104\1\0"+
    "\1\u0105\17\0\1\u0106\44\0\1\u0107\1\u0108\1\0\1\u0109"+
    "\1\0\1\u010a\31\0\1\u010b\16\0\1\u010c\40\0\1\u010d"+
    "\5\0\1\u010e\20\0\1\u010f\1\0\1\u0110\46\0\1\u0111"+
    "\31\0\1\u0112\20\0\1\u0113\21\0\1\u0114\2\0\1\u0115"+
    "\15\0\1\u0116\10\0\1\u0117\35\0\1\u0118\22\0\1\u0119"+
    "\7\0\1\u011a\15\0\1\u011b\11\0\1\u011c\16\0\1\u011d"+
    "\1\0\1\u011e\33\0\1\u011f\11\0\1\u0120\1\u0121\7\0"+
    "\1\u0122\20\0\1\u0123\1\u0124\1\0\1\u0125\1\0\1\u0126"+
    "\3\0\1\u0127\10\0\1\u0128\35\0\1\u0129\4\0\1\u012a"+
    "\26\0\1\u012b\6\0\1\u012c\3\0\1\u012d\22\0\1\u012e"+
    "\12\0\1\u012f\16\0\1\u0130\44\0\1\u0131\1\0\1\u0132"+
    "\4\0\1\u0133\30\0\1\u0134\25\0\1\u0135\34\0\1\u0136"+
    "\40\0\1\u0137\1\u0138\21\0\1\u0139\26\0\1\u013a\37\0"+
    "\1\u013b\7\0\1\u013c\30\0\1\u013d\21\0\1\u013e\45\0"+
    "\1\u013f\34\0\1\u0140\21\0\1\u0141\47\0\1\u0142\23\0"+
    "\1\u0143\26\0\1\u0144\35\0\1\u0145\43\0\1\u0146\34\0"+
    "\1\u0147\17\0\1\u0148\51\0\1\u0149\42\0\1\u014a\22\0"+
    "\1\u014b\20\0\1\u014c\32\0\1\u014d\51\0\1\u014e\16\0"+
    "\1\u014f\2\0\1\u0150\34\0\1\u0151\46\0\1\u0152\33\0"+
    "\1\u0153\27\0\1\u0154\20\0\1\u0155\40\0\1\u0156\27\0"+
    "\1\u0157\32\0\1\u0158\33\0\1\u0159\42\0\1\u015a\25\0"+
    "\1\u015b\37\0\1\u015c\43\0\1\u015d\36\0\1\u015e\30\0"+
    "\1\u015f\44\0\1\u0160\20\0\1\u0161\23\0\1\u0162\50\0"+
    "\1\u0163\34\0\1\u0164\36\0\1\u0165\23\0\1\u0166\22\0"+
    "\1\u0167\45\0\1\u0168\20\0\1\u0169\16\0\1\u016a\26\0"+
    "\1\u016b\17\0\1\u016c\55\0\1\u016d\31\0\1\u016e\25\0"+
    "\1\u016f\34\0\1\u0170\20\0\1\u0171\42\0\1\u0172\25\0"+
    "\1\u0173\54\0\1\u0174\30\0\1\u0175\33\0\1\u0176\17\0"+
    "\1\u0177\52\0\1\u0178\10\0\1\u0179\54\0\1\u017a\13\0"+
    "\1\u017b\34\0\1\u017c\47\0\1\u017d\16\0\1\u017e\44\0"+
    "\1\u017f\2\0\1\u0180\1\u0181\35\0\1\u0182\15\0\1\u0183"+
    "\32\0\1\u0184\46\0\1\u0185\20\0\1\u0186\37\0\1\u0187"+
    "\15\0\1\u0188\12\0\1\u0189\32\0\1\u018a\36\0\1\u018b"+
    "\55\0\1\u018c\27\0\1\u018d\14\0\1\u018e\34\0\1\u018f"+
    "\3\0\1\u0190\2\0\1\u0191\33\0\1\u0192\33\0\1\u0147"+
    "\4\0\1\u0193\27\0\1\u0194\3\0\1\u0195\15\0\1\u0196"+
    "\54\0\1\u0197\24\0\1\u0198\24\0\1\u0199\47\0\1\u019a"+
    "\16\0\1\u019b\30\0\1\u019c\45\0\1\u019d\34\0\1\u019e"+
    "\6\0\1\u019f\12\0\1\u01a0\11\0\1\u01a1\33\0\1\u01a2"+
    "\20\0\1\u01a3\20\0\1\u01a4\11\0\1\u01a5\47\0\1\u01a6"+
    "\20\0\1\u01a7\40\0\1\u01a8\40\0\1\u01a9\12\0\1\u01aa"+
    "\5\0\1\u01ab\34\0\1\u01ac\41\0\1\u01ad\42\0\1\u01ae"+
    "\22\0\1\u01af\46\0\1\u01b0\34\0\1\u01b1\31\0\1\u01b2"+
    "\42\0\1\u01b3\6\0\1\u01b4\46\0\1\u01b5\20\0\1\u01b6"+
    "\45\0\1\u01b7\37\0\1\u01b8\34\0\1\u01b9\36\0\1\u01ba"+
    "\11\0\1\u01bb\47\0\1\u01bc\35\0\1\u01bd\32\0\1\u01be"+
    "\15\0\1\u01bf\35\0\1\u01c0\34\0\1\u01c1\46\0\1\u01c2"+
    "\21\0\1\u01c3\31\0\1\u01c4\50\0\1\u01c5\36\0\1\u01c6"+
    "\26\0\1\u01c7\37\0\1\u01c8\30\0\1\u01c9\1\0\1\u01ca"+
    "\14\0\1\u01cb\15\0\1\u01cc\14\0\1\u01cd\34\0\1\u01ce"+
    "\46\0\1\u01cf\22\0\1\u01d0\44\0\1\u01d1\37\0\1\u01d2"+
    "\14\0\1\u01d3\32\0\1\u01d4\40\0\1\u01d5\33\0\1\u01d6"+
    "\20\0\1\u01d7\33\0\1\u01d8\6\0\1\u01d9\46\0\1\u01da"+
    "\20\0\1\u01db\33\0\1\u01dc\45\0\1\u01dd\23\0\1\u01de"+
    "\44\0\1\u01df\20\0\1\u01e0\57\0\1\u01e1\7\0\1\u01e2"+
    "\47\0\1\u01e3\33\0\1\u01e4\26\0\1\u01e5\24\0\1\u01e6"+
    "\46\0\1\u01e7\41\0\1\u01e8\27\0\1\u01e9\35\0\1\u01ea"+
    "\26\0\1\u01eb\26\0\1\u01ec\32\0\1\u01ed\27\0\1\u01ee"+
    "\41\0\1\u01ef\37\0\1\u01f0\40\0\1\u01f1\14\0\1\u01f2"+
    "\33\0\1\u01f3\46\0\1\u0108\22\0\1\u01f4\50\0\1\u01f5"+
    "\41\0\1\u01f6\6\0\1\u01f7\52\0\1\u01f8\16\0\1\u01f9"+
    "\56\0\1\u01fa\17\0\1\u01fb\42\0\1\u01fc\25\0\1\u01fd"+
    "\43\0\1\u01fe\10\0\1\u01ff\40\0\1\u0200\46\0\1\u0201"+
    "\16\0\1\u0202\46\0\1\u0203\33\0\1\u0204\20\0\1\u0205"+
    "\47\0\1\u0206\16\0\1\u0207\45\0\1\u0208\36\0\1\u0209"+
    "\14\0\1\u020a\34\0\1\u020b\34\0\1\322\32\0\1\u020c"+
    "\50\0\1\u020d\36\0\1\u020e\15\0\1\u020f\46\0\1\202"+
    "\16\0\1\u0210\33\0\1\u0211\53\0\1\u0212\12\0\1\u0213"+
    "\33\0\1\u0214\45\0\1\u0215\22\0\1\u0216\52\0\1\u0217"+
    "\14\0\1\u0218\33\0\1\u0219\32\0\1\u021a\34\0\1\u021b"+
    "\52\0\1\u021c\33\0\1\u021d\14\0\1\u021e\46\0\1\u021f"+
    "\33\0\1\u0220\23\0\1\u0221\55\0\1\u0222\17\0\1\u0223"+
    "\22\0\1\u0224\34\0\1\u0225\31\0\1\u0226\47\0\1\u0227"+
    "\20\0\1\u0228\33\0\1\u0229\32\0\1\u022a\36\0\1\u022b"+
    "\33\0\1\u022c\34\0\1\u022d\30\0\1\u022e\44\0\1\u022f"+
    "\44\0\1\u0230\26\0\1\u0231\21\0\1\u0232\30\0\1\u0233"+
    "\50\0\1\u0234\35\0\1\u0235\17\0\1\u0236\33\0\1\u0237"+
    "\41\0\1\u0238\25\0\1\u0239\45\0\1\u023a\31\0\1\u023b"+
    "\17\0\1\u023c\47\0\1\u023d\20\0\1\u023e\33\0\1\u023f"+
    "\32\0\1\u0240\45\0\1\u0241\22\0\1\u0242\54\0\1\u0243"+
    "\27\0\1\u0244\22\0\1\u0245\44\0\1\u0246\16\0\1\u0247"+
    "\54\0\1\u0248\21\0\1\76\41\0\1\u0249\35\0\1\u024a"+
    "\31\0\1\u024b\22\0\1\u024c\31\0\1\u024d\31\0\1\u024e"+
    "\45\0\1\u024f\34\0\1\u0250\21\0\1\u0251\32\0\1\u0252"+
    "\52\0\1\u0253\16\0\1\u0254\40\0\1\u0255\40\0\1\u0256"+
    "\24\0\1\u0257\41\0\1\u0258\32\0\1\u0259\22\0\1\u025a"+
    "\32\0\1\u025b\33\0\1\u025c\42\0\1\u025d\24\0\1\u025e"+
    "\46\0\1\u025f\41\0\1\u0260\15\0\1\u0261\30\0\1\u0262"+
    "\32\0\1\u0263\43\0\1\u0264\24\0\1\u0265\50\0\1\u0266"+
    "\35\0\1\u0267\27\0\1\u0268\37\0\1\u0269\13\0\1\u026a"+
    "\53\0\1\u026b\33\0\1\u026c\21\0\1\u026d\50\0\1\u026e"+
    "\24\0\1\u026f\20\0\1\u0270\54\0\1\u0271\12\0\1\u0272"+
    "\50\0\1\u0273\33\0\1\u0274\43\0\1\u0275\23\0\1\322"+
    "\25\0\1\u0276\33\0\1\u0277\41\0\1\u0278\25\0\1\u0279"+
    "\31\0\1\u027a\35\0\1\u027b\41\0\1\u027c\43\0\1\u027d"+
    "\6\0\1\u027e\35\0\1\u027f\31\0\1\u0280\50\0\1\u0281"+
    "\25\0\1\u0282\26\0\1\u0283\31\0\1\u0284\50\0\1\u0285"+
    "\33\0\1\u0286\40\0\1\u0287\30\0\1\u0288\14\0\1\u0289"+
    "\45\0\1\u028a\40\0\1\u028b\27\0\1\u028c\41\0\1\u028d"+
    "\12\0\1\u028e\46\0\1\u028f\24\0\1\u0290\42\0\1\u0291"+
    "\22\0\1\u0292\31\0\1\u0293\33\0\1\u0294\50\0\1\u0295"+
    "\21\0\1\u0296\51\0\1\u0297\14\0\1\u0298\33\0\1\u0299"+
    "\46\0\1\u029a\43\0\1\u029b\23\0\1\u029c\25\0\1\u029d"+
    "\25\0\1\u029e\43\0\1\u029f\44\0\1\u02a0\32\0\1\u02a1"+
    "\12\0\1\u02a2\50\0\1\u02a3\33\0\1\u02a4\35\0\1\u02a5"+
    "\21\0\1\u02a6\30\0\1\u02a7\33\0\1\u02a8\31\0\1\u0277"+
    "\33\0\1\u02a9\46\0\1\u02aa\33\0\1\u02ab\37\0\1\u02ac"+
    "\31\0\1\u02ad\43\0\1\u02ae\33\0\1\u02af\20\0\1\u02b0"+
    "\34\0\1\u02b1\32\0\1\322\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13692];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\15\1\1\0\1\1\15\0"+
    "\2\11\2\1\2\0\1\1\11\0\1\1\25\0\1\1"+
    "\4\0\1\1\25\0\1\1\1\0\1\1\1\0\1\11"+
    "\15\0\1\11\4\0\2\11\2\0\1\1\11\0\2\11"+
    "\2\0\2\11\3\0\1\11\5\0\1\11\2\0\1\11"+
    "\4\0\1\11\7\0\1\11\6\0\1\11\10\0\1\1"+
    "\3\0\1\11\1\0\2\11\1\1\4\0\1\11\4\0"+
    "\2\11\2\1\2\0\1\11\12\0\1\11\1\0\1\1"+
    "\20\0\1\11\2\0\1\11\4\0\1\11\4\0\1\11"+
    "\1\0\1\11\3\0\1\11\12\0\1\11\1\0\2\11"+
    "\11\0\1\11\3\0\3\11\3\0\1\11\6\0\1\11"+
    "\2\0\1\11\2\0\1\11\3\0\1\11\1\1\3\0"+
    "\1\11\1\1\3\11\1\0\3\11\2\0\2\11\10\0"+
    "\1\11\2\1\1\11\1\0\1\11\2\0\3\11\3\0"+
    "\1\11\2\0\1\11\4\0\2\11\1\0\1\1\3\11"+
    "\1\0\1\11\1\0\1\11\4\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\0\2\11\2\0\2\11\4\0\1\11"+
    "\3\0\1\11\2\0\1\1\3\11\5\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\0\2\11\3\0\1\11\2\0"+
    "\2\11\13\0\1\11\2\0\1\11\2\0\2\11\1\0"+
    "\1\11\4\0\2\11\1\0\1\11\2\0\5\11\1\0"+
    "\1\11\1\0\4\11\1\0\1\11\1\0\1\11\4\0"+
    "\2\11\4\0\3\11\3\0\1\11\3\0\2\11\2\0"+
    "\1\1\1\0\1\11\1\0\4\11\2\0\1\11\1\0"+
    "\3\11\1\1\1\11\2\0\10\11\1\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\5\0\1\11\2\0"+
    "\1\11\2\0\2\11\4\0\1\11\2\0\1\11\2\0"+
    "\1\11\6\0\1\11\2\0\2\11\2\0\1\11\6\0"+
    "\2\11\1\0\3\11\1\0\2\11\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\10\0\5\11\1\0\3\11\1\0"+
    "\2\11\1\0\3\11\2\0\2\11\1\0\1\11\1\0"+
    "\3\11\3\0\1\11\2\0\1\11\1\0\1\11\5\0"+
    "\3\11\5\0\4\11\3\0\2\11\1\0\3\11\1\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[689];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 76: 
          { lexeme=yytext(); return dar;
          }
        case 224: break;
        case 123: 
          { lexeme = yytext(); return rana;
          }
        case 225: break;
        case 95: 
          { lexeme=yytext(); return vender;
          }
        case 226: break;
        case 206: 
          { lexeme = yytext(); return cocina;
          }
        case 227: break;
        case 203: 
          { lexeme = yytext(); return gallo;
          }
        case 228: break;
        case 117: 
          { lexeme=yytext(); return saber;
          }
        case 229: break;
        case 5: 
          { lexeme=yytext(); return él;
          }
        case 230: break;
        case 31: 
          { lexeme = yytext(); return niño;
          }
        case 231: break;
        case 149: 
          { lexeme=yytext(); return sur;
          }
        case 232: break;
        case 128: 
          { lexeme = yytext(); return corazon;
          }
        case 233: break;
        case 71: 
          { lexeme=yytext(); return izquierda;
          }
        case 234: break;
        case 30: 
          { lexeme = yytext(); return seco;
          }
        case 235: break;
        case 6: 
          { lexeme=yytext(); return hola;
          }
        case 236: break;
        case 72: 
          { lexeme=yytext(); return perder;
          }
        case 237: break;
        case 202: 
          { lexeme = yytext(); return maestro;
          }
        case 238: break;
        case 57: 
          { lexeme=yytext(); return volar;
          }
        case 239: break;
        case 201: 
          { lexeme = yytext(); return balcon;
          }
        case 240: break;
        case 96: 
          { lexeme = yytext(); return algún;
          }
        case 241: break;
        case 14: 
          { lexeme=yytext(); return puesto_que;
          }
        case 242: break;
        case 111: 
          { lexeme=yytext(); return levantar;
          }
        case 243: break;
        case 7: 
          { lexeme=yytext(); return en;
          }
        case 244: break;
        case 188: 
          { lexeme=yytext(); return iglesia;
          }
        case 245: break;
        case 178: 
          { lexeme=yytext(); return convertirse;
          }
        case 246: break;
        case 184: 
          { lexeme = yytext(); return lengua;
          }
        case 247: break;
        case 13: 
          { lexeme=yytext(); return nosotros;
          }
        case 248: break;
        case 79: 
          { lexeme = yytext(); return escritorio;
          }
        case 249: break;
        case 139: 
          { lexeme=yytext(); return soñar;
          }
        case 250: break;
        case 39: 
          { lexeme=yytext(); return tú;
          }
        case 251: break;
        case 78: 
          { lexeme = yytext(); return venado;
          }
        case 252: break;
        case 9: 
          { lexeme=yytext(); return ello;
          }
        case 253: break;
        case 152: 
          { lexeme = yytext(); return aquellos;
          }
        case 254: break;
        case 159: 
          { lexeme = yytext(); return cuál;
          }
        case 255: break;
        case 194: 
          { lexeme=yytext(); return lavanderia;
          }
        case 256: break;
        case 62: 
          { lexeme=yytext(); return escuchar;
          }
        case 257: break;
        case 174: 
          { lexeme = yytext(); return boca;
          }
        case 258: break;
        case 136: 
          { lexeme = yytext(); return pulmones;
          }
        case 259: break;
        case 157: 
          { lexeme = yytext(); return de_quién;
          }
        case 260: break;
        case 133: 
          { lexeme=yytext(); return salir;
          }
        case 261: break;
        case 120: 
          { lexeme=yytext(); return cafe;
          }
        case 262: break;
        case 208: 
          { lexeme = yytext(); return tello;
          }
        case 263: break;
        case 75: 
          { lexeme = yytext(); return niña;
          }
        case 264: break;
        case 92: 
          { lexeme = yytext(); return tu;
          }
        case 265: break;
        case 69: 
          { lexeme = yytext(); return este;
          }
        case 266: break;
        case 127: 
          { lexeme = yytext(); return empleos;
          }
        case 267: break;
        case 20: 
          { lexeme = yytext(); return cuantos;
          }
        case 268: break;
        case 11: 
          { lexeme=yytext(); return ser;
          }
        case 269: break;
        case 125: 
          { lexeme = yytext(); return cara;
          }
        case 270: break;
        case 42: 
          { lexeme=yytext(); return decir;
          }
        case 271: break;
        case 60: 
          { lexeme = yytext(); return hombre;
          }
        case 272: break;
        case 98: 
          { lexeme=yytext(); return nadar;
          }
        case 273: break;
        case 93: 
          { lexeme=yytext(); return mostrar;
          }
        case 274: break;
        case 131: 
          { lexeme = yytext(); return codo;
          }
        case 275: break;
        case 164: 
          { lexeme=yytext(); return derecha;
          }
        case 276: break;
        case 47: 
          { lexeme = yytext(); return cerdo;
          }
        case 277: break;
        case 15: 
          { lexeme = yytext(); return un;
          }
        case 278: break;
        case 55: 
          { lexeme = yytext(); return carro;
          }
        case 279: break;
        case 207: 
          { lexeme=yytext(); return aeropuerto;
          }
        case 280: break;
        case 119: 
          { lexeme=yytext(); return venir;
          }
        case 281: break;
        case 1: 
          { return ERROR;
          }
        case 282: break;
        case 165: 
          { lexeme = yytext(); return avión;
          }
        case 283: break;
        case 116: 
          { lexeme = yytext(); return rodilla;
          }
        case 284: break;
        case 82: 
          { lexeme=yytext(); return dibujar;
          }
        case 285: break;
        case 40: 
          { lexeme=yytext(); return ella;
          }
        case 286: break;
        case 168: 
          { lexeme = yytext(); return tobillo;
          }
        case 287: break;
        case 147: 
          { lexeme = yytext(); return corto;
          }
        case 288: break;
        case 183: 
          { lexeme=yytext(); return escuela;
          }
        case 289: break;
        case 143: 
          { lexeme=yytext(); return traer;
          }
        case 290: break;
        case 66: 
          { lexeme = yytext(); return mano;
          }
        case 291: break;
        case 163: 
          { lexeme=yytext(); return escribir;
          }
        case 292: break;
        case 36: 
          { lexeme = yytext(); return malo;
          }
        case 293: break;
        case 200: 
          { lexeme=yytext(); return carnicero;
          }
        case 294: break;
        case 89: 
          { lexeme = yytext(); return toro;
          }
        case 295: break;
        case 99: 
          { lexeme=yytext(); return ellos;
          }
        case 296: break;
        case 196: 
          { lexeme = yytext(); return galeria;
          }
        case 297: break;
        case 218: 
          { lexeme=yytext(); return astronauta;
          }
        case 298: break;
        case 151: 
          { lexeme = yytext(); return estos;
          }
        case 299: break;
        case 124: 
          { lexeme=yytext(); return de;
          }
        case 300: break;
        case 167: 
          { lexeme = yytext(); return enfermera;
          }
        case 301: break;
        case 70: 
          { lexeme = yytext(); return cada;
          }
        case 302: break;
        case 21: 
          { lexeme=yytext(); return comer;
          }
        case 303: break;
        case 158: 
          { lexeme = yytext(); return blanco;
          }
        case 304: break;
        case 105: 
          { lexeme = yytext(); return qué;
          }
        case 305: break;
        case 170: 
          { lexeme=yytext(); return limpio;
          }
        case 306: break;
        case 223: 
          { lexeme=yytext(); return contador;
          }
        case 307: break;
        case 215: 
          { lexeme = yytext(); return computadora;
          }
        case 308: break;
        case 52: 
          { lexeme = yytext(); return cualquier;
          }
        case 309: break;
        case 118: 
          { lexeme = yytext(); return cocinero;
          }
        case 310: break;
        case 185: 
          { lexeme = yytext(); return pavo;
          }
        case 311: break;
        case 173: 
          { lexeme=yytext(); return luchar;
          }
        case 312: break;
        case 198: 
          { lexeme=yytext(); return porque;
          }
        case 313: break;
        case 179: 
          { lexeme=yytext(); return panaderia;
          }
        case 314: break;
        case 108: 
          { lexeme=yytext(); return despertar;
          }
        case 315: break;
        case 81: 
          { lexeme = yytext(); return pato;
          }
        case 316: break;
        case 210: 
          { lexeme=yytext(); return cajero;
          }
        case 317: break;
        case 180: 
          { lexeme = yytext(); return amarillo;
          }
        case 318: break;
        case 212: 
          { lexeme = yytext(); return hombro;
          }
        case 319: break;
        case 126: 
          { lexeme=yytext(); return hacer;
          }
        case 320: break;
        case 112: 
          { lexeme = yytext(); return rosado;
          }
        case 321: break;
        case 213: 
          { lexeme=yytext(); return farmacia;
          }
        case 322: break;
        case 176: 
          { lexeme = yytext(); return jardin;
          }
        case 323: break;
        case 140: 
          { lexeme=yytext(); return conducir;
          }
        case 324: break;
        case 144: 
          { lexeme = yytext(); return cerebro;
          }
        case 325: break;
        case 51: 
          { lexeme = yytext(); return brazo;
          }
        case 326: break;
        case 121: 
          { lexeme = yytext(); return pies;
          }
        case 327: break;
        case 132: 
          { lexeme = yytext(); return todo;
          }
        case 328: break;
        case 146: 
          { lexeme = yytext(); return obeja;
          }
        case 329: break;
        case 58: 
          { lexeme = yytext(); return gordo;
          }
        case 330: break;
        case 35: 
          { lexeme=yytext(); return pero;
          }
        case 331: break;
        case 135: 
          { lexeme = yytext(); return higado;
          }
        case 332: break;
        case 160: 
          { lexeme = yytext(); return ballena;
          }
        case 333: break;
        case 150: 
          { lexeme=yytext(); return hablar;
          }
        case 334: break;
        case 29: 
          { lexeme = yytext(); return perro;
          }
        case 335: break;
        case 153: 
          { lexeme=yytext(); return pensar;
          }
        case 336: break;
        case 53: 
          { lexeme = yytext(); return vaca;
          }
        case 337: break;
        case 50: 
          { lexeme = yytext(); return eres;
          }
        case 338: break;
        case 63: 
          { lexeme=yytext(); return herir;
          }
        case 339: break;
        case 91: 
          { lexeme=yytext(); return banco;
          }
        case 340: break;
        case 100: 
          { lexeme = yytext(); return delgado;
          }
        case 341: break;
        case 94: 
          { lexeme = yytext(); return espinilla;
          }
        case 342: break;
        case 12: 
          { lexeme=yytext(); return a;
          }
        case 343: break;
        case 171: 
          { lexeme=yytext(); return payaso;
          }
        case 344: break;
        case 145: 
          { lexeme=yytext(); return panadero;
          }
        case 345: break;
        case 177: 
          { lexeme = yytext(); return doctor;
          }
        case 346: break;
        case 38: 
          { lexeme=yytext(); return sin_embargo;
          }
        case 347: break;
        case 193: 
          { lexeme=yytext(); return libreria;
          }
        case 348: break;
        case 103: 
          { lexeme=yytext(); return contar;
          }
        case 349: break;
        case 65: 
          { lexeme = yytext(); return cabello;
          }
        case 350: break;
        case 222: 
          { lexeme = yytext(); return comedor;
          }
        case 351: break;
        case 115: 
          { lexeme=yytext(); return mantener;
          }
        case 352: break;
        case 86: 
          { lexeme = yytext(); return niños;
          }
        case 353: break;
        case 181: 
          { lexeme=yytext(); return calle;
          }
        case 354: break;
        case 205: 
          { lexeme = yytext(); return riñones;
          }
        case 355: break;
        case 74: 
          { lexeme = yytext(); return bueno;
          }
        case 356: break;
        case 142: 
          { lexeme = yytext(); return negro;
          }
        case 357: break;
        case 44: 
          { lexeme=yytext(); return ganar;
          }
        case 358: break;
        case 220: 
          { lexeme=yytext(); return carpintero;
          }
        case 359: break;
        case 23: 
          { lexeme = yytext(); return pierna;
          }
        case 360: break;
        case 154: 
          { lexeme=yytext(); return enseñar;
          }
        case 361: break;
        case 64: 
          { lexeme = yytext(); return salon;
          }
        case 362: break;
        case 87: 
          { lexeme = yytext(); return barco;
          }
        case 363: break;
        case 73: 
          { lexeme = yytext(); return pegamento;
          }
        case 364: break;
        case 219: 
          { lexeme=yytext(); return arquitecto;
          }
        case 365: break;
        case 172: 
          { lexeme = yytext(); return piso;
          }
        case 366: break;
        case 27: 
          { lexeme=yytext(); return obtener;
          }
        case 367: break;
        case 80: 
          { lexeme = yytext(); return puerta;
          }
        case 368: break;
        case 34: 
          { lexeme = yytext(); return bus;
          }
        case 369: break;
        case 156: 
          { lexeme = yytext(); return tren;
          }
        case 370: break;
        case 216: 
          { lexeme = yytext(); return fuente;
          }
        case 371: break;
        case 37: 
          { lexeme = yytext(); return si;
          }
        case 372: break;
        case 130: 
          { lexeme = yytext(); return caballo;
          }
        case 373: break;
        case 25: 
          { lexeme=yytext(); return mentir;
          }
        case 374: break;
        case 102: 
          { lexeme=yytext(); return que;
          }
        case 375: break;
        case 166: 
          { lexeme=yytext(); return norte;
          }
        case 376: break;
        case 137: 
          { lexeme = yytext(); return niñas;
          }
        case 377: break;
        case 211: 
          { lexeme = yytext(); return baño;
          }
        case 378: break;
        case 141: 
          { lexeme=yytext(); return comenzar;
          }
        case 379: break;
        case 18: 
          { lexeme = yytext(); return su;
          }
        case 380: break;
        case 175: 
          { lexeme = yytext(); return naranja;
          }
        case 381: break;
        case 129: 
          { lexeme = yytext(); return casa;
          }
        case 382: break;
        case 88: 
          { lexeme=yytext(); return morder;
          }
        case 383: break;
        case 61: 
          { lexeme = yytext(); return cabeza;
          }
        case 384: break;
        case 17: 
          { lexeme = yytext(); return mi;
          }
        case 385: break;
        case 10: 
          { lexeme=yytext(); return ir;
          }
        case 386: break;
        case 101: 
          { lexeme = yytext(); return aquel;
          }
        case 387: break;
        case 49: 
          { lexeme = yytext(); return no;
          }
        case 388: break;
        case 209: 
          { lexeme = yytext(); return cornisa;
          }
        case 389: break;
        case 161: 
          { lexeme = yytext(); return mujeres;
          }
        case 390: break;
        case 221: 
          { lexeme = yytext(); return sala;
          }
        case 391: break;
        case 56: 
          { lexeme=yytext(); return poder;
          }
        case 392: break;
        case 192: 
          { lexeme = yytext(); return pasillo;
          }
        case 393: break;
        case 84: 
          { lexeme = yytext(); return azul;
          }
        case 394: break;
        case 104: 
          { lexeme=yytext(); return tomar;
          }
        case 395: break;
        case 67: 
          { lexeme=yytext(); return tener;
          }
        case 396: break;
        case 199: 
          { lexeme = yytext(); return bicicleta;
          }
        case 397: break;
        case 191: 
          { lexeme=yytext(); return museo;
          }
        case 398: break;
        case 114: 
          { lexeme = yytext(); return nariz;
          }
        case 399: break;
        case 33: 
          { lexeme=yytext(); return comprar;
          }
        case 400: break;
        case 90: 
          { lexeme=yytext(); return quemar;
          }
        case 401: break;
        case 189: 
          { lexeme = yytext(); return dedo;
          }
        case 402: break;
        case 4: 
          { lexeme = yytext(); return una;
          }
        case 403: break;
        case 2: 
          { /*Ignore*/
          }
        case 404: break;
        case 187: 
          { lexeme = yytext(); return morado;
          }
        case 405: break;
        case 24: 
          { lexeme=yytext(); return dejar;
          }
        case 406: break;
        case 3: 
          { lexeme=yytext(); return yo;
          }
        case 407: break;
        case 162: 
          { lexeme = yytext(); return mujer;
          }
        case 408: break;
        case 148: 
          { lexeme=yytext(); return dormir;
          }
        case 409: break;
        case 68: 
          { lexeme = yytext(); return ojos;
          }
        case 410: break;
        case 110: 
          { lexeme = yytext(); return habitacion;
          }
        case 411: break;
        case 182: 
          { lexeme = yytext(); return escaleras;
          }
        case 412: break;
        case 85: 
          { lexeme = yytext(); return libro;
          }
        case 413: break;
        case 19: 
          { lexeme = yytext(); return gallina;
          }
        case 414: break;
        case 83: 
          { lexeme=yytext(); return soplar;
          }
        case 415: break;
        case 41: 
          { lexeme=yytext(); return ver;
          }
        case 416: break;
        case 204: 
          { lexeme = yytext(); return pingüino;
          }
        case 417: break;
        case 195: 
          { lexeme=yytext(); return en_su_lugar;
          }
        case 418: break;
        case 43: 
          { lexeme = yytext(); return la;
          }
        case 419: break;
        case 138: 
          { lexeme = yytext(); return verde;
          }
        case 420: break;
        case 214: 
          { lexeme = yytext(); return corredor;
          }
        case 421: break;
        case 32: 
          { lexeme=yytext(); return adios;
          }
        case 422: break;
        case 155: 
          { lexeme = yytext(); return dientes;
          }
        case 423: break;
        case 77: 
          { lexeme = yytext(); return gris;
          }
        case 424: break;
        case 217: 
          { lexeme = yytext(); return frente;
          }
        case 425: break;
        case 134: 
          { lexeme=yytext(); return luz;
          }
        case 426: break;
        case 16: 
          { lexeme = yytext(); return soy;
          }
        case 427: break;
        case 28: 
          { lexeme=yytext(); return gimnasio;
          }
        case 428: break;
        case 48: 
          { lexeme=yytext(); return poner;
          }
        case 429: break;
        case 169: 
          { lexeme = yytext(); return silla;
          }
        case 430: break;
        case 122: 
          { lexeme = yytext(); return pie;
          }
        case 431: break;
        case 54: 
          { lexeme = yytext(); return gato;
          }
        case 432: break;
        case 26: 
          { lexeme = yytext(); return nuestro;
          }
        case 433: break;
        case 97: 
          { lexeme=yytext(); return cantar;
          }
        case 434: break;
        case 22: 
          { lexeme = yytext(); return oreja;
          }
        case 435: break;
        case 46: 
          { lexeme=yytext(); return correr;
          }
        case 436: break;
        case 59: 
          { lexeme = yytext(); return hombres;
          }
        case 437: break;
        case 45: 
          { lexeme = yytext(); return rojo;
          }
        case 438: break;
        case 186: 
          { lexeme = yytext(); return conejo;
          }
        case 439: break;
        case 109: 
          { lexeme=yytext(); return leer;
          }
        case 440: break;
        case 190: 
          { lexeme = yytext(); return granjero;
          }
        case 441: break;
        case 107: 
          { lexeme=yytext(); return con;
          }
        case 442: break;
        case 106: 
          { lexeme=yytext(); return oeste;
          }
        case 443: break;
        case 197: 
          { lexeme = yytext(); return dormitorio;
          }
        case 444: break;
        case 113: 
          { lexeme = yytext(); return palma;
          }
        case 445: break;
        case 8: 
          { lexeme = yytext(); return es;
          }
        case 446: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
