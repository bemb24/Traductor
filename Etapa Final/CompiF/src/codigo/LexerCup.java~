/* The following code was generated by JFlex 1.4.3 on 30/05/20 11:02 PM */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/05/20 11:02 PM from the specification file
 * <tt>C:/Users/bonni/Documents/NetBeansProjects/CompiF/src/codigo/Lexercup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0, 25,  0,  0,  0,  0,  1,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0, 27,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 20,  9, 21,  8,  3, 22,  7,  2,  6, 26, 19,  4, 24, 18,  5, 
    17,  0, 16, 13, 14, 12, 23, 15,  0, 10,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\11\1\1\3\7\1\1\4\5\1"+
    "\1\5\1\0\1\6\15\0\1\7\1\10\1\11\1\7"+
    "\2\0\1\12\11\0\1\13\25\0\1\14\4\0\1\15"+
    "\25\0\1\16\1\0\1\4\1\0\1\17\15\0\1\20"+
    "\5\0\1\21\1\22\2\0\1\23\11\0\1\24\1\25"+
    "\2\0\1\26\1\27\3\0\1\30\5\0\1\31\2\0"+
    "\1\32\4\0\1\33\7\0\1\34\5\0\1\35\10\0"+
    "\1\36\3\0\1\37\1\0\1\40\1\41\1\42\4\0"+
    "\1\43\4\0\1\44\1\45\1\46\1\47\2\0\1\50"+
    "\12\0\1\51\1\0\1\52\20\0\1\53\2\0\1\54"+
    "\4\0\1\55\4\0\1\56\1\0\1\57\2\0\1\60"+
    "\12\0\1\61\1\0\1\62\1\63\11\0\1\64\3\0"+
    "\1\65\1\66\1\67\2\0\1\70\5\0\1\71\2\0"+
    "\1\72\2\0\1\73\4\0\1\74\1\75\3\0\1\76"+
    "\1\77\1\100\1\101\1\102\1\0\1\103\1\104\1\105"+
    "\2\0\1\106\1\107\10\0\1\110\1\111\1\112\1\113"+
    "\1\0\1\114\2\0\1\115\1\116\1\117\3\0\1\120"+
    "\1\0\1\121\1\122\3\0\1\123\1\124\1\0\1\125"+
    "\1\126\1\127\1\130\1\0\1\131\1\0\1\132\4\0"+
    "\1\133\2\0\1\134\2\0\1\135\1\0\1\136\1\137"+
    "\2\0\1\140\1\141\4\0\1\142\3\0\1\143\2\0"+
    "\1\144\1\145\1\146\1\147\5\0\1\150\4\0\1\151"+
    "\1\152\2\0\1\153\1\0\1\154\1\155\1\0\1\156"+
    "\1\0\1\157\4\0\1\160\1\0\1\161\3\0\1\162"+
    "\2\0\1\163\1\164\13\0\1\165\2\0\1\166\2\0"+
    "\1\167\1\170\1\171\3\0\1\172\1\173\1\0\1\174"+
    "\2\0\1\175\1\176\1\177\1\6\1\200\1\201\1\0"+
    "\1\202\1\0\1\203\1\204\1\205\1\206\1\0\1\207"+
    "\1\0\1\210\4\0\1\211\1\212\4\0\1\213\1\214"+
    "\2\0\1\215\3\0\1\216\1\217\2\0\1\220\1\0"+
    "\1\221\1\0\1\222\1\223\1\224\1\16\2\0\1\225"+
    "\1\0\1\226\1\227\1\230\1\231\1\232\2\0\1\233"+
    "\1\234\1\235\1\236\1\237\1\240\1\241\1\242\1\0"+
    "\1\243\3\0\1\244\1\0\1\245\1\0\1\246\5\0"+
    "\1\247\2\0\1\250\2\0\1\251\1\252\5\0\1\253"+
    "\2\0\1\254\6\0\1\255\2\0\1\256\1\257\10\0"+
    "\1\260\1\261\1\0\1\262\1\263\1\264\1\0\1\265"+
    "\1\266\1\0\1\267\2\0\1\270\7\0\1\271\7\0"+
    "\1\272\1\273\1\274\1\275\1\276\1\0\1\277\1\300"+
    "\1\301\1\0\1\302\1\303\1\0\1\304\1\305\1\306"+
    "\2\0\1\307\1\310\1\0\1\311\1\0\1\312\1\313"+
    "\1\314\3\0\1\315\2\0\1\316\1\0\1\317\4\0"+
    "\1\320\1\321\1\322\5\0\1\323\1\324\1\325\3\0"+
    "\1\326\1\327\1\0\1\330\1\331\1\332\1\0\1\333";

  private static int [] zzUnpackAction() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\214\0\250\0\304"+
    "\0\340\0\374\0\u0118\0\u0134\0\34\0\u0150\0\u016c\0\u0188"+
    "\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\u0214\0\u0230\0\u024c\0\u0268"+
    "\0\u0284\0\u02a0\0\u02bc\0\u02d8\0\u02f4\0\u0310\0\u032c\0\u0348"+
    "\0\u0364\0\u0380\0\u039c\0\u03b8\0\u03d4\0\u03f0\0\u040c\0\u0428"+
    "\0\u0444\0\u0460\0\34\0\34\0\u02f4\0\u047c\0\u0498\0\u04b4"+
    "\0\u04d0\0\u04ec\0\u0508\0\u0524\0\u0540\0\u055c\0\u0578\0\u0594"+
    "\0\u05b0\0\u05cc\0\u05e8\0\u0604\0\u0620\0\u063c\0\u0658\0\u0674"+
    "\0\u0690\0\u06ac\0\u06c8\0\u06e4\0\u0700\0\u071c\0\u0738\0\u0754"+
    "\0\u0770\0\u078c\0\u07a8\0\u07c4\0\u07e0\0\u07fc\0\u0818\0\u0834"+
    "\0\u0850\0\u086c\0\u0888\0\u08a4\0\u08c0\0\u08dc\0\u08f8\0\u0914"+
    "\0\u0930\0\u094c\0\u0968\0\u0984\0\u09a0\0\u09bc\0\u09d8\0\u09f4"+
    "\0\u0a10\0\u0a2c\0\u0a48\0\u0a64\0\u0a80\0\u0a9c\0\u0ab8\0\u0ad4"+
    "\0\u0af0\0\u0b0c\0\u0b28\0\u0b44\0\u0b60\0\u0b7c\0\u0b98\0\34"+
    "\0\u0bb4\0\u0bd0\0\u0bec\0\u0c08\0\u0c24\0\u0c40\0\u0c5c\0\u0c78"+
    "\0\u0c94\0\u0cb0\0\u0ccc\0\u0ce8\0\u0d04\0\34\0\u0d20\0\u0d3c"+
    "\0\u0d58\0\u0d74\0\u0d90\0\34\0\34\0\u0dac\0\u0dc8\0\u0de4"+
    "\0\u0e00\0\u0e1c\0\u0e38\0\u0e54\0\u0e70\0\u0e8c\0\u0ea8\0\u0ec4"+
    "\0\u0ee0\0\34\0\34\0\u0efc\0\u0f18\0\34\0\34\0\u0f34"+
    "\0\u0f50\0\u0f6c\0\34\0\u0f88\0\u0fa4\0\u0fc0\0\u0fdc\0\u0ff8"+
    "\0\34\0\u1014\0\u1030\0\34\0\u104c\0\u1068\0\u1084\0\u10a0"+
    "\0\34\0\u10bc\0\u10d8\0\u10f4\0\u1110\0\u112c\0\u1148\0\u1164"+
    "\0\34\0\u1180\0\u119c\0\u11b8\0\u11d4\0\u11f0\0\34\0\u120c"+
    "\0\u1228\0\u1244\0\u1260\0\u127c\0\u1298\0\u12b4\0\u12d0\0\u12ec"+
    "\0\u1308\0\u1324\0\u1340\0\34\0\u135c\0\34\0\34\0\u1378"+
    "\0\u1394\0\u13b0\0\u13cc\0\u13e8\0\34\0\u1404\0\u1420\0\u143c"+
    "\0\u1458\0\34\0\34\0\u1474\0\u1490\0\u14ac\0\u14c8\0\34"+
    "\0\u14e4\0\u1500\0\u151c\0\u1538\0\u1554\0\u1570\0\u158c\0\u15a8"+
    "\0\u15c4\0\u15e0\0\34\0\u15fc\0\u1618\0\u1634\0\u1650\0\u166c"+
    "\0\u1688\0\u16a4\0\u16c0\0\u16dc\0\u16f8\0\u1714\0\u1730\0\u174c"+
    "\0\u1768\0\u1784\0\u17a0\0\u17bc\0\u17d8\0\34\0\u17f4\0\u1810"+
    "\0\34\0\u182c\0\u1848\0\u1864\0\u1880\0\34\0\u189c\0\u18b8"+
    "\0\u18d4\0\u18f0\0\34\0\u190c\0\34\0\u1928\0\u1944\0\34"+
    "\0\u1960\0\u197c\0\u1998\0\u19b4\0\u19d0\0\u19ec\0\u1a08\0\u1a24"+
    "\0\u1a40\0\u1a5c\0\34\0\u1a78\0\34\0\34\0\u1a94\0\u1ab0"+
    "\0\u1acc\0\u1ae8\0\u1b04\0\u1b20\0\u1b3c\0\u1b58\0\u1b74\0\34"+
    "\0\u1b90\0\u1bac\0\u1bc8\0\34\0\34\0\34\0\u1be4\0\u1c00"+
    "\0\34\0\u1c1c\0\u1c38\0\u1c54\0\u1c70\0\u1c8c\0\34\0\u1ca8"+
    "\0\u1cc4\0\34\0\u1ce0\0\u1cfc\0\34\0\u1d18\0\u1d34\0\u1d50"+
    "\0\u1d6c\0\34\0\u1d88\0\u1da4\0\u1dc0\0\u1ddc\0\34\0\u1df8"+
    "\0\34\0\34\0\34\0\u1e14\0\34\0\34\0\34\0\u1e30"+
    "\0\u1e4c\0\34\0\34\0\u1e68\0\u1e84\0\u1ea0\0\u1ebc\0\u1ed8"+
    "\0\u1ef4\0\u1f10\0\u1f2c\0\34\0\u1f48\0\u1f64\0\34\0\u1f80"+
    "\0\34\0\u1f9c\0\u1fb8\0\34\0\34\0\34\0\u1fd4\0\u1ff0"+
    "\0\u200c\0\34\0\u2028\0\34\0\34\0\u2044\0\u2060\0\u207c"+
    "\0\34\0\34\0\u2098\0\u20b4\0\34\0\34\0\34\0\u20d0"+
    "\0\34\0\u20ec\0\34\0\u2108\0\u2124\0\u2140\0\u215c\0\34"+
    "\0\u2178\0\u2194\0\34\0\u21b0\0\u21cc\0\34\0\u21e8\0\34"+
    "\0\34\0\u2204\0\u2220\0\34\0\34\0\u223c\0\u2258\0\u2274"+
    "\0\u2290\0\34\0\u22ac\0\u22c8\0\u22e4\0\34\0\u2300\0\u231c"+
    "\0\u2338\0\34\0\34\0\34\0\u2354\0\u2370\0\u238c\0\u23a8"+
    "\0\u23c4\0\34\0\u23e0\0\u23fc\0\u2418\0\u2434\0\34\0\34"+
    "\0\u2450\0\u246c\0\34\0\u2488\0\34\0\34\0\u24a4\0\34"+
    "\0\u24c0\0\34\0\u24dc\0\u24f8\0\u2514\0\u2530\0\34\0\u254c"+
    "\0\34\0\u2568\0\u2584\0\u25a0\0\34\0\u25bc\0\u25d8\0\34"+
    "\0\34\0\u25f4\0\u2610\0\u262c\0\u2648\0\u2664\0\u2680\0\u269c"+
    "\0\u26b8\0\u26d4\0\u26f0\0\u270c\0\34\0\u2728\0\u2744\0\34"+
    "\0\u2760\0\u277c\0\34\0\34\0\34\0\u2798\0\u27b4\0\u27d0"+
    "\0\34\0\34\0\u27ec\0\34\0\u2808\0\u2824\0\34\0\34"+
    "\0\34\0\34\0\34\0\34\0\u2840\0\34\0\u285c\0\34"+
    "\0\34\0\34\0\34\0\u2878\0\34\0\u2894\0\34\0\u28b0"+
    "\0\u28cc\0\u28e8\0\u2904\0\34\0\34\0\u2920\0\u293c\0\u2958"+
    "\0\u2974\0\34\0\34\0\u2990\0\u29ac\0\34\0\u29c8\0\u29e4"+
    "\0\u2a00\0\34\0\34\0\u2a1c\0\u2a38\0\u2a54\0\u2a70\0\34"+
    "\0\u2a8c\0\34\0\34\0\34\0\34\0\u2aa8\0\u2ac4\0\34"+
    "\0\u2ae0\0\34\0\34\0\34\0\u2afc\0\34\0\u2b18\0\u2b34"+
    "\0\34\0\34\0\34\0\34\0\34\0\34\0\34\0\34"+
    "\0\u2b50\0\34\0\u2b6c\0\u2b88\0\u2ba4\0\34\0\u2bc0\0\34"+
    "\0\u2bdc\0\34\0\u2bf8\0\u2c14\0\u2c30\0\u2c4c\0\u2c68\0\34"+
    "\0\u2c84\0\u2ca0\0\34\0\u2cbc\0\u2cd8\0\34\0\34\0\u2cf4"+
    "\0\u2d10\0\u2d2c\0\u2d48\0\u2d64\0\34\0\u2d80\0\u2d9c\0\34"+
    "\0\u2db8\0\u2dd4\0\u2df0\0\u2e0c\0\u2e28\0\u2e44\0\34\0\u2e60"+
    "\0\u2e7c\0\34\0\34\0\u2e98\0\u2eb4\0\u2ed0\0\u2eec\0\u2f08"+
    "\0\u2f24\0\u2f40\0\u2f5c\0\34\0\34\0\u2f78\0\34\0\34"+
    "\0\34\0\u2f94\0\34\0\34\0\u2fb0\0\34\0\u2fcc\0\u2fe8"+
    "\0\34\0\u3004\0\u3020\0\u303c\0\u3058\0\u3074\0\u3090\0\u30ac"+
    "\0\34\0\u30c8\0\u30e4\0\u3100\0\u311c\0\u3138\0\u3154\0\u3170"+
    "\0\34\0\34\0\34\0\34\0\34\0\u318c\0\34\0\34"+
    "\0\34\0\u31a8\0\34\0\34\0\u31c4\0\34\0\34\0\34"+
    "\0\u31e0\0\u31fc\0\34\0\34\0\u3218\0\34\0\u3234\0\34"+
    "\0\34\0\34\0\u3250\0\u326c\0\u3288\0\34\0\u32a4\0\u32c0"+
    "\0\34\0\u32dc\0\34\0\u32f8\0\u3314\0\u3330\0\u334c\0\34"+
    "\0\34\0\34\0\u3368\0\u3384\0\u33a0\0\u33bc\0\u33d8\0\34"+
    "\0\34\0\34\0\u33f4\0\u3410\0\u342c\0\34\0\34\0\u3448"+
    "\0\34\0\34\0\34\0\u3464\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\2\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\1\2\1\31\1\32\35\0\1\3\35\0\1\33"+
    "\1\0\1\34\1\35\5\0\1\36\7\0\1\37\13\0"+
    "\1\40\5\0\1\41\11\0\1\42\2\0\1\43\7\0"+
    "\1\44\1\0\1\45\1\46\5\0\1\47\7\0\1\50"+
    "\23\0\1\51\3\0\1\52\1\0\1\53\26\0\1\54"+
    "\1\55\3\0\1\56\14\0\1\57\1\60\1\61\1\62"+
    "\3\0\1\63\5\0\1\64\3\0\1\65\12\0\1\66"+
    "\1\0\1\67\1\70\5\0\1\71\3\0\1\72\16\0"+
    "\1\73\1\74\1\75\1\76\3\0\1\77\1\0\1\100"+
    "\3\0\1\101\3\0\1\102\12\0\1\103\1\0\1\104"+
    "\30\0\1\105\1\106\1\107\1\110\1\111\7\0\1\112"+
    "\1\113\1\0\1\114\2\0\1\115\1\116\10\0\1\117"+
    "\1\120\1\0\1\121\6\0\1\122\3\0\1\123\3\0"+
    "\1\124\11\0\1\125\1\126\1\0\1\127\1\130\11\0"+
    "\1\131\3\0\1\132\12\0\1\133\1\0\1\134\1\135"+
    "\5\0\1\136\7\0\1\137\11\0\1\140\1\141\1\142"+
    "\1\0\1\143\5\0\1\144\7\0\1\145\14\0\1\146"+
    "\6\0\1\147\22\0\1\150\2\0\1\151\13\0\1\152"+
    "\17\0\1\153\6\0\1\154\2\0\1\155\1\0\1\156"+
    "\2\0\1\157\2\0\1\160\5\0\1\161\1\162\1\163"+
    "\1\164\16\0\1\165\12\0\1\166\1\167\1\170\1\171"+
    "\11\0\1\172\3\0\1\173\12\0\1\174\1\0\1\175"+
    "\4\0\1\176\1\0\1\177\7\0\1\200\14\0\1\201"+
    "\33\0\1\202\32\0\1\203\13\0\1\204\1\0\1\205"+
    "\1\0\1\206\23\0\1\207\2\0\1\210\1\211\30\0"+
    "\1\204\36\0\1\212\17\0\1\213\1\0\1\214\13\0"+
    "\1\215\4\0\1\216\15\0\1\217\25\0\1\220\45\0"+
    "\1\221\1\222\1\0\1\223\4\0\1\224\11\0\1\225"+
    "\37\0\1\226\6\0\1\227\5\0\1\230\1\0\1\231"+
    "\22\0\1\232\21\0\1\233\3\0\1\234\1\0\1\235"+
    "\15\0\1\236\26\0\1\237\25\0\1\240\37\0\1\241"+
    "\37\0\1\242\24\0\1\243\34\0\1\244\31\0\1\245"+
    "\24\0\1\246\46\0\1\247\6\0\1\250\34\0\1\251"+
    "\6\0\1\252\20\0\1\253\13\0\1\254\13\0\1\255"+
    "\16\0\1\256\11\0\1\257\23\0\1\260\1\0\1\261"+
    "\12\0\1\262\2\0\1\263\30\0\1\264\36\0\1\265"+
    "\14\0\1\266\3\0\1\267\11\0\1\270\16\0\1\271"+
    "\1\272\14\0\1\273\13\0\1\274\6\0\1\275\7\0"+
    "\1\276\14\0\1\277\4\0\1\300\11\0\1\301\25\0"+
    "\1\302\6\0\1\303\11\0\1\304\34\0\1\305\5\0"+
    "\1\306\2\0\1\307\1\310\1\0\1\311\21\0\1\312"+
    "\15\0\1\313\13\0\1\314\3\0\1\315\5\0\1\316"+
    "\3\0\1\317\1\320\14\0\1\321\10\0\1\322\1\323"+
    "\31\0\1\324\22\0\1\325\1\0\1\326\1\327\30\0"+
    "\1\330\1\331\32\0\1\332\44\0\1\333\13\0\1\334"+
    "\25\0\1\335\17\0\1\336\11\0\1\337\3\0\1\340"+
    "\15\0\1\341\30\0\1\342\42\0\1\343\23\0\1\344"+
    "\34\0\1\345\1\0\1\346\1\347\15\0\1\350\13\0"+
    "\1\351\17\0\1\352\14\0\1\353\14\0\1\354\31\0"+
    "\1\355\37\0\1\356\32\0\1\357\15\0\1\360\1\361"+
    "\15\0\1\362\24\0\1\363\46\0\1\364\21\0\1\365"+
    "\3\0\1\366\17\0\1\367\50\0\1\370\20\0\1\371"+
    "\13\0\1\372\14\0\1\373\35\0\1\374\5\0\1\375"+
    "\40\0\1\376\22\0\1\377\46\0\1\u0100\31\0\1\u0101"+
    "\35\0\1\u0102\16\0\1\u0103\12\0\1\u0104\27\0\1\u0105"+
    "\1\0\1\u0106\17\0\1\u0107\45\0\1\u0108\1\0\1\u0109"+
    "\1\0\1\u010a\31\0\1\u010b\16\0\1\u010c\40\0\1\u010d"+
    "\5\0\1\u010e\20\0\1\u010f\1\0\1\u0110\46\0\1\u0111"+
    "\31\0\1\u0112\20\0\1\u0113\21\0\1\u0114\2\0\1\u0115"+
    "\15\0\1\u0116\10\0\1\u0117\35\0\1\u0118\22\0\1\u0119"+
    "\7\0\1\u011a\15\0\1\u011b\11\0\1\u011c\16\0\1\u011d"+
    "\1\0\1\u011e\33\0\1\u011f\11\0\1\u0120\1\u0121\7\0"+
    "\1\u0122\20\0\1\u0123\1\u0124\1\0\1\u0125\1\0\1\u0126"+
    "\3\0\1\u0127\10\0\1\u0128\42\0\1\u0129\26\0\1\u012a"+
    "\12\0\1\u012b\22\0\1\u012c\12\0\1\u012d\16\0\1\u012e"+
    "\44\0\1\u012f\1\0\1\u0130\4\0\1\u0131\30\0\1\u0132"+
    "\25\0\1\u0133\34\0\1\u0134\40\0\1\u0135\1\u0136\21\0"+
    "\1\u0137\37\0\1\u0138\22\0\1\u0139\37\0\1\u013a\7\0"+
    "\1\u013b\30\0\1\u013c\21\0\1\u013d\45\0\1\u013e\34\0"+
    "\1\u013f\21\0\1\u0140\47\0\1\u0141\23\0\1\u0142\26\0"+
    "\1\u0143\35\0\1\u0144\43\0\1\u0145\34\0\1\u0146\17\0"+
    "\1\u0147\51\0\1\u0148\42\0\1\u0149\22\0\1\u014a\20\0"+
    "\1\u014b\32\0\1\u014c\51\0\1\u014d\16\0\1\u014e\2\0"+
    "\1\u014f\34\0\1\u0150\46\0\1\u0151\33\0\1\u0152\27\0"+
    "\1\u0153\20\0\1\u0154\40\0\1\u0155\27\0\1\u0156\32\0"+
    "\1\u0157\33\0\1\u0158\42\0\1\u0159\25\0\1\u015a\37\0"+
    "\1\u015b\43\0\1\u015c\36\0\1\u015d\30\0\1\u015e\44\0"+
    "\1\u015f\20\0\1\u0160\23\0\1\u0161\50\0\1\u0162\37\0"+
    "\1\u0163\23\0\1\u0164\10\0\1\u0165\11\0\1\u0166\45\0"+
    "\1\u0167\37\0\1\u0168\26\0\1\u0169\17\0\1\u016a\55\0"+
    "\1\u016b\31\0\1\u016c\25\0\1\u016d\34\0\1\u016e\20\0"+
    "\1\u016f\42\0\1\u0170\25\0\1\u0171\54\0\1\u0172\30\0"+
    "\1\u0173\33\0\1\u0174\17\0\1\u0175\52\0\1\u0176\10\0"+
    "\1\u0177\54\0\1\u0178\13\0\1\u0179\34\0\1\u017a\47\0"+
    "\1\u017b\16\0\1\u017c\44\0\1\u017d\2\0\1\u017e\1\u017f"+
    "\35\0\1\u0180\15\0\1\u0181\32\0\1\u0182\46\0\1\u0183"+
    "\20\0\1\u0184\37\0\1\u0185\15\0\1\u0186\12\0\1\u0187"+
    "\32\0\1\u0188\36\0\1\u0189\55\0\1\u018a\27\0\1\u018b"+
    "\14\0\1\u018c\34\0\1\u018d\3\0\1\u018e\2\0\1\u018f"+
    "\33\0\1\u0190\33\0\1\u0146\4\0\1\u0191\27\0\1\u0192"+
    "\3\0\1\u0193\15\0\1\u0194\54\0\1\u0195\24\0\1\u0196"+
    "\24\0\1\u0197\47\0\1\u0198\16\0\1\u0199\30\0\1\u019a"+
    "\45\0\1\u019b\34\0\1\u019c\6\0\1\u019d\12\0\1\u019e"+
    "\11\0\1\u019f\33\0\1\u01a0\20\0\1\u01a1\20\0\1\u01a2"+
    "\11\0\1\u01a3\47\0\1\u01a4\20\0\1\u01a5\40\0\1\u01a6"+
    "\40\0\1\u01a7\12\0\1\u01a8\5\0\1\u01a9\34\0\1\u01aa"+
    "\41\0\1\u01ab\42\0\1\u01ac\22\0\1\u01ad\46\0\1\u01ae"+
    "\34\0\1\u01af\31\0\1\u01b0\42\0\1\u01b1\21\0\1\u01b2"+
    "\20\0\1\u01b3\45\0\1\u01b4\37\0\1\u01b5\34\0\1\u01b6"+
    "\36\0\1\u01b7\11\0\1\u01b8\47\0\1\u01b9\35\0\1\u01ba"+
    "\32\0\1\u01bb\15\0\1\u01bc\35\0\1\u01bd\34\0\1\u01be"+
    "\46\0\1\u01bf\21\0\1\u01c0\31\0\1\u01c1\50\0\1\u01c2"+
    "\36\0\1\u01c3\26\0\1\u01c4\37\0\1\u01c5\30\0\1\u01c6"+
    "\1\0\1\u01c7\14\0\1\u01c8\15\0\1\u01c9\14\0\1\u01ca"+
    "\34\0\1\u01cb\46\0\1\u01cc\33\0\1\u01cd\20\0\1\u01ce"+
    "\32\0\1\u01cf\40\0\1\u01d0\33\0\1\u01d1\20\0\1\u01d2"+
    "\33\0\1\u01d3\6\0\1\u01d4\46\0\1\u01d5\20\0\1\u01d6"+
    "\33\0\1\u01d7\45\0\1\u01d8\21\0\1\u01d9\35\0\1\u01da"+
    "\44\0\1\u01db\20\0\1\u01dc\57\0\1\u01dd\7\0\1\u01de"+
    "\47\0\1\u01df\33\0\1\u01e0\26\0\1\u01e1\24\0\1\u01e2"+
    "\46\0\1\u01e3\41\0\1\u01e4\27\0\1\u01e5\35\0\1\u01e6"+
    "\26\0\1\u01e7\26\0\1\u01e8\32\0\1\u01e9\27\0\1\u01ea"+
    "\41\0\1\u01eb\37\0\1\u01ec\40\0\1\u01ed\14\0\1\u01ee"+
    "\33\0\1\u01ef\46\0\1\u0108\22\0\1\u01f0\50\0\1\u01f1"+
    "\14\0\1\u01f2\52\0\1\u01f3\16\0\1\u01f4\42\0\1\u01f5"+
    "\42\0\1\u01f6\25\0\1\u01f7\43\0\1\u01f8\10\0\1\u01f9"+
    "\40\0\1\u01fa\46\0\1\u01fb\16\0\1\u01fc\46\0\1\u01fd"+
    "\33\0\1\u01fe\20\0\1\u01ff\47\0\1\u0200\16\0\1\u0201"+
    "\45\0\1\u0202\36\0\1\u0203\14\0\1\u0204\34\0\1\u0205"+
    "\34\0\1\323\32\0\1\u0206\50\0\1\u0207\36\0\1\u0208"+
    "\15\0\1\u0209\46\0\1\204\16\0\1\u020a\33\0\1\u020b"+
    "\53\0\1\u020c\12\0\1\u020d\33\0\1\u020e\45\0\1\u020f"+
    "\22\0\1\u0210\52\0\1\u0211\14\0\1\u0212\33\0\1\u0213"+
    "\32\0\1\u0214\34\0\1\u0215\52\0\1\u0216\33\0\1\u0217"+
    "\14\0\1\u0218\46\0\1\u0219\33\0\1\u021a\23\0\1\u021b"+
    "\55\0\1\u021c\17\0\1\u021d\22\0\1\u021e\34\0\1\u021f"+
    "\31\0\1\u0220\47\0\1\u0221\20\0\1\u0222\33\0\1\u0223"+
    "\32\0\1\u0224\36\0\1\u0225\33\0\1\u0226\34\0\1\u0227"+
    "\30\0\1\u0228\44\0\1\u0229\44\0\1\u022a\26\0\1\u022b"+
    "\21\0\1\u022c\30\0\1\u022d\50\0\1\u022e\35\0\1\u022f"+
    "\17\0\1\u0230\33\0\1\u0231\41\0\1\u0232\25\0\1\u0233"+
    "\27\0\1\u0234\47\0\1\u0235\20\0\1\u0236\33\0\1\u0237"+
    "\32\0\1\u0238\45\0\1\u0239\22\0\1\u023a\54\0\1\u023b"+
    "\27\0\1\u023c\22\0\1\u023d\44\0\1\u023e\16\0\1\u023f"+
    "\54\0\1\u0240\21\0\1\77\41\0\1\u0241\35\0\1\u0242"+
    "\31\0\1\u0243\22\0\1\u0244\31\0\1\u0245\43\0\1\u0246"+
    "\34\0\1\u0247\21\0\1\u0248\32\0\1\u0249\52\0\1\u024a"+
    "\16\0\1\u024b\40\0\1\u024c\40\0\1\u024d\24\0\1\u024e"+
    "\41\0\1\u024f\32\0\1\u0250\22\0\1\u0251\32\0\1\u0252"+
    "\33\0\1\u0253\42\0\1\u0254\24\0\1\u0255\46\0\1\u0256"+
    "\41\0\1\u0257\15\0\1\u0258\30\0\1\u0259\32\0\1\u025a"+
    "\43\0\1\u025b\24\0\1\u025c\50\0\1\u025d\35\0\1\u025e"+
    "\27\0\1\u025f\37\0\1\u0260\13\0\1\u0261\53\0\1\u0262"+
    "\33\0\1\u0263\21\0\1\u0264\50\0\1\u0265\24\0\1\u0266"+
    "\20\0\1\u0267\33\0\1\u0268\50\0\1\u0269\33\0\1\u026a"+
    "\43\0\1\u026b\23\0\1\323\25\0\1\u026c\33\0\1\u026d"+
    "\41\0\1\u026e\25\0\1\u026f\31\0\1\u0270\35\0\1\u0271"+
    "\41\0\1\u0272\43\0\1\u0273\6\0\1\u0274\35\0\1\u0275"+
    "\31\0\1\u0276\50\0\1\u0277\25\0\1\u0278\26\0\1\u0279"+
    "\31\0\1\u027a\50\0\1\u027b\33\0\1\u027c\40\0\1\u027d"+
    "\30\0\1\u027e\14\0\1\u027f\45\0\1\u0280\40\0\1\u0281"+
    "\27\0\1\u0282\41\0\1\u0283\12\0\1\u0284\46\0\1\u0285"+
    "\24\0\1\u0286\42\0\1\u0287\22\0\1\u0288\31\0\1\u0289"+
    "\33\0\1\u028a\50\0\1\u028b\37\0\1\u028c\14\0\1\u028d"+
    "\33\0\1\u028e\46\0\1\u028f\43\0\1\u0290\23\0\1\u0291"+
    "\25\0\1\u0292\25\0\1\u0293\43\0\1\u0294\44\0\1\u0295"+
    "\32\0\1\u0296\12\0\1\u0297\50\0\1\u0298\33\0\1\u0299"+
    "\23\0\1\u029a\30\0\1\u029b\33\0\1\u029c\31\0\1\u026d"+
    "\33\0\1\u029d\46\0\1\u029e\33\0\1\u029f\37\0\1\u02a0"+
    "\31\0\1\u02a1\43\0\1\u02a2\33\0\1\u02a3\20\0\1\u02a4"+
    "\34\0\1\u02a5\32\0\1\323\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13440];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\16\1\1\0\1\1\15\0"+
    "\2\11\2\1\2\0\1\1\11\0\1\1\25\0\1\1"+
    "\4\0\1\1\25\0\1\1\1\0\1\1\1\0\1\11"+
    "\15\0\1\11\5\0\2\11\2\0\1\1\11\0\2\11"+
    "\2\0\2\11\3\0\1\11\5\0\1\11\2\0\1\11"+
    "\4\0\1\11\7\0\1\11\5\0\1\11\10\0\1\1"+
    "\3\0\1\11\1\0\2\11\1\1\4\0\1\11\4\0"+
    "\2\11\2\1\2\0\1\11\12\0\1\11\1\0\1\1"+
    "\20\0\1\11\2\0\1\11\4\0\1\11\4\0\1\11"+
    "\1\0\1\11\2\0\1\11\12\0\1\11\1\0\2\11"+
    "\11\0\1\11\3\0\3\11\2\0\1\11\5\0\1\11"+
    "\2\0\1\11\2\0\1\11\4\0\1\11\1\1\3\0"+
    "\1\11\1\1\3\11\1\0\3\11\2\0\2\11\10\0"+
    "\1\11\2\1\1\11\1\0\1\11\2\0\3\11\3\0"+
    "\1\11\1\0\2\11\3\0\2\11\1\0\1\1\3\11"+
    "\1\0\1\11\1\0\1\11\4\0\1\11\2\0\1\11"+
    "\2\0\1\11\1\0\2\11\2\0\2\11\4\0\1\11"+
    "\3\0\1\11\2\0\1\1\3\11\5\0\1\11\4\0"+
    "\2\11\2\0\1\11\1\0\2\11\1\0\1\11\1\0"+
    "\1\11\4\0\1\11\1\0\1\11\3\0\1\11\2\0"+
    "\2\11\13\0\1\11\2\0\1\11\2\0\3\11\3\0"+
    "\2\11\1\0\1\11\2\0\6\11\1\0\1\11\1\0"+
    "\4\11\1\0\1\11\1\0\1\11\4\0\2\11\4\0"+
    "\2\11\2\0\1\11\3\0\2\11\2\0\1\1\1\0"+
    "\1\11\1\0\4\11\2\0\1\11\1\0\3\11\1\1"+
    "\1\11\2\0\10\11\1\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\5\0\1\11\2\0\1\11\2\0"+
    "\2\11\5\0\1\11\2\0\1\11\6\0\1\11\2\0"+
    "\2\11\10\0\2\11\1\0\3\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\7\0\1\11\7\0\5\11\1\0"+
    "\3\11\1\0\2\11\1\0\3\11\2\0\2\11\1\0"+
    "\1\11\1\0\3\11\3\0\1\11\2\0\1\11\1\0"+
    "\1\11\4\0\3\11\5\0\3\11\3\0\2\11\1\0"+
    "\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol (int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol (int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 125: 
          { return new Symbol(sym.hacer, yychar, yyline, yytext());
          }
        case 220: break;
        case 158: 
          { return new Symbol(sym.cuál, yychar, yyline,yytext());
          }
        case 221: break;
        case 30: 
          { return new Symbol(sym.niño, yychar, yyline,yytext());
          }
        case 222: break;
        case 47: 
          { return new Symbol(sym.poner, yychar, yyline, yytext());
          }
        case 223: break;
        case 152: 
          { return new Symbol(sym.pensar, yychar, yyline, yytext());
          }
        case 224: break;
        case 130: 
          { return new Symbol(sym.caballo, yychar, yyline,yytext());
          }
        case 225: break;
        case 49: 
          { return new Symbol(sym.eres, yychar, yyline,yytext());
          }
        case 226: break;
        case 22: 
          { return new Symbol(sym.pierna, yychar, yyline,yytext());
          }
        case 227: break;
        case 73: 
          { return new Symbol(sym.bueno, yychar, yyline,yytext());
          }
        case 228: break;
        case 27: 
          { return new Symbol(sym.gimnasio, yychar, yyline,yytext());
          }
        case 229: break;
        case 95: 
          { return new Symbol(sym.vender, yychar, yyline, yytext());
          }
        case 230: break;
        case 91: 
          { return new Symbol(sym.banco, yychar, yyline,yytext());
          }
        case 231: break;
        case 82: 
          { return new Symbol(sym.soñar, yychar, yyline, yytext());
          }
        case 232: break;
        case 212: 
          { return new Symbol(sym.computadora, yychar, yyline,yytext());
          }
        case 233: break;
        case 197: 
          { return new Symbol(sym.carnicero, yychar, yyline,yytext());
          }
        case 234: break;
        case 150: 
          { return new Symbol(sym.estos, yychar, yyline,yytext());
          }
        case 235: break;
        case 9: 
          { return new Symbol(sym.ello, yychar, yyline,yytext());
          }
        case 236: break;
        case 206: 
          { return new Symbol(sym.cornisa, yychar, yyline,yytext());
          }
        case 237: break;
        case 29: 
          { return new Symbol(sym.seco, yychar, yyline,yytext());
          }
        case 238: break;
        case 5: 
          { return new Symbol(sym.él, yychar, yyline,yytext());
          }
        case 239: break;
        case 61: 
          { return new Symbol(sym.escuchar, yychar, yyline, yytext());
          }
        case 240: break;
        case 7: 
          { return new Symbol(sym.en, yychar, yyline, yytext());
          }
        case 241: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline,yytext());
          }
        case 242: break;
        case 56: 
          { return new Symbol(sym.volar, yychar, yyline, yytext());
          }
        case 243: break;
        case 64: 
          { return new Symbol(sym.cabello, yychar, yyline,yytext());
          }
        case 244: break;
        case 208: 
          { return new Symbol(sym.baño, yychar, yyline,yytext());
          }
        case 245: break;
        case 196: 
          { return new Symbol(sym.bicicleta, yychar, yyline,yytext());
          }
        case 246: break;
        case 132: 
          { return new Symbol(sym.todo, yychar, yyline,yytext());
          }
        case 247: break;
        case 108: 
          { return new Symbol(sym.despertar, yychar, yyline, yytext());
          }
        case 248: break;
        case 203: 
          { return new Symbol(sym.cocina, yychar, yyline,yytext());
          }
        case 249: break;
        case 144: 
          { return new Symbol(sym.panadero, yychar, yyline,yytext());
          }
        case 250: break;
        case 136: 
          { return new Symbol(sym.pulmones, yychar, yyline,yytext());
          }
        case 251: break;
        case 33: 
          { return new Symbol(sym.bus, yychar, yyline,yytext());
          }
        case 252: break;
        case 120: 
          { return new Symbol(sym.pies, yychar, yyline,yytext());
          }
        case 253: break;
        case 211: 
          { return new Symbol(sym.corredor, yychar, yyline,yytext());
          }
        case 254: break;
        case 41: 
          { return new Symbol(sym.decir, yychar, yyline, yytext());
          }
        case 255: break;
        case 107: 
          { return new Symbol(sym.con, yychar, yyline, yytext());
          }
        case 256: break;
        case 23: 
          { return new Symbol(sym.dejar, yychar, yyline, yytext());
          }
        case 257: break;
        case 217: 
          { return new Symbol(sym.sala, yychar, yyline,yytext());
          }
        case 258: break;
        case 34: 
          { return new Symbol(sym.pero, yychar, yyline, yytext());
          }
        case 259: break;
        case 148: 
          { return new Symbol(sym.sur, yychar, yyline,yytext());
          }
        case 260: break;
        case 119: 
          { return new Symbol(sym.cafe, yychar, yyline,yytext());
          }
        case 261: break;
        case 3: 
          { return new Symbol(sym.yo, yychar, yyline,yytext());
          }
        case 262: break;
        case 40: 
          { return new Symbol(sym.ver, yychar, yyline, yytext());
          }
        case 263: break;
        case 52: 
          { return new Symbol(sym.vaca, yychar, yyline,yytext());
          }
        case 264: break;
        case 26: 
          { return new Symbol(sym.obtener, yychar, yyline, yytext());
          }
        case 265: break;
        case 92: 
          { return new Symbol(sym.tu, yychar, yyline,yytext());
          }
        case 266: break;
        case 163: 
          { return new Symbol(sym.derecha, yychar, yyline,yytext());
          }
        case 267: break;
        case 20: 
          { return new Symbol(sym.comer, yychar, yyline, yytext());
          }
        case 268: break;
        case 28: 
          { return new Symbol(sym.perro, yychar, yyline,yytext());
          }
        case 269: break;
        case 204: 
          { return new Symbol(sym.aeropuerto, yychar, yyline,yytext());
          }
        case 270: break;
        case 157: 
          { return new Symbol(sym.blanco, yychar, yyline,yytext());
          }
        case 271: break;
        case 145: 
          { return new Symbol(sym.obeja, yychar, yyline,yytext());
          }
        case 272: break;
        case 39: 
          { return new Symbol(sym.ella, yychar, yyline,yytext());
          }
        case 273: break;
        case 13: 
          { return new Symbol(sym.nosotros, yychar, yyline,yytext());
          }
        case 274: break;
        case 151: 
          { return new Symbol(sym.aquellos, yychar, yyline,yytext());
          }
        case 275: break;
        case 114: 
          { return new Symbol(sym.mantener, yychar, yyline, yytext());
          }
        case 276: break;
        case 69: 
          { return new Symbol(sym.cada, yychar, yyline,yytext());
          }
        case 277: break;
        case 86: 
          { return new Symbol(sym.niños, yychar, yyline,yytext());
          }
        case 278: break;
        case 218: 
          { return new Symbol(sym.comedor, yychar, yyline,yytext());
          }
        case 279: break;
        case 111: 
          { return new Symbol(sym.levantar, yychar, yyline, yytext());
          }
        case 280: break;
        case 74: 
          { return new Symbol(sym.niña, yychar, yyline,yytext());
          }
        case 281: break;
        case 142: 
          { return new Symbol(sym.traer, yychar, yyline, yytext());
          }
        case 282: break;
        case 65: 
          { return new Symbol(sym.mano, yychar, yyline,yytext());
          }
        case 283: break;
        case 17: 
          { return new Symbol(sym.su, yychar, yyline,yytext());
          }
        case 284: break;
        case 51: 
          { return new Symbol(sym.cualquier, yychar, yyline,yytext());
          }
        case 285: break;
        case 35: 
          { return new Symbol(sym.malo, yychar, yyline,yytext());
          }
        case 286: break;
        case 106: 
          { return new Symbol(sym.oeste, yychar, yyline,yytext());
          }
        case 287: break;
        case 177: 
          { return new Symbol(sym.amarillo, yychar, yyline,yytext());
          }
        case 288: break;
        case 164: 
          { return new Symbol(sym.avión, yychar, yyline,yytext());
          }
        case 289: break;
        case 219: 
          { return new Symbol(sym.contador, yychar, yyline,yytext());
          }
        case 290: break;
        case 44: 
          { return new Symbol(sym.rojo, yychar, yyline,yytext());
          }
        case 291: break;
        case 169: 
          { return new Symbol(sym.limpio, yychar, yyline,yytext());
          }
        case 292: break;
        case 140: 
          { return new Symbol(sym.convertirse, yychar, yyline, yytext());
          }
        case 293: break;
        case 11: 
          { return new Symbol(sym.ser, yychar, yyline, yytext());
          }
        case 294: break;
        case 170: 
          { return new Symbol(sym.payaso, yychar, yyline,yytext());
          }
        case 295: break;
        case 55: 
          { return new Symbol(sym.poder, yychar, yyline, yytext());
          }
        case 296: break;
        case 201: 
          { return new Symbol(sym.pingüino, yychar, yyline,yytext());
          }
        case 297: break;
        case 121: 
          { return new Symbol(sym.pie, yychar, yyline,yytext());
          }
        case 298: break;
        case 109: 
          { return new Symbol(sym.leer, yychar, yyline, yytext());
          }
        case 299: break;
        case 57: 
          { return new Symbol(sym.gordo, yychar, yyline,yytext());
          }
        case 300: break;
        case 123: 
          { return new Symbol(sym.de, yychar, yyline, yytext());
          }
        case 301: break;
        case 25: 
          { return new Symbol(sym.nuestro, yychar, yyline,yytext());
          }
        case 302: break;
        case 156: 
          { return new Symbol(sym.de_quién, yychar, yyline,yytext());
          }
        case 303: break;
        case 54: 
          { return new Symbol(sym.carro, yychar, yyline,yytext());
          }
        case 304: break;
        case 214: 
          { return new Symbol(sym.astronauta, yychar, yyline,yytext());
          }
        case 305: break;
        case 99: 
          { return new Symbol(sym.ellos, yychar, yyline,yytext());
          }
        case 306: break;
        case 67: 
          { return new Symbol(sym.ojos, yychar, yyline,yytext());
          }
        case 307: break;
        case 21: 
          { return new Symbol(sym.oreja, yychar, yyline,yytext());
          }
        case 308: break;
        case 38: 
          { return new Symbol(sym.tú, yychar, yyline,yytext());
          }
        case 309: break;
        case 76: 
          { return new Symbol(sym.gris, yychar, yyline,yytext());
          }
        case 310: break;
        case 213: 
          { return new Symbol(sym.frente, yychar, yyline,yytext());
          }
        case 311: break;
        case 94: 
          { return new Symbol(sym.espinilla, yychar, yyline,yytext());
          }
        case 312: break;
        case 116: 
          { return new Symbol(sym.saber, yychar, yyline, yytext());
          }
        case 313: break;
        case 36: 
          { return new Symbol(sym.si, yychar, yyline,yytext());
          }
        case 314: break;
        case 155: 
          { return new Symbol(sym.tren, yychar, yyline,yytext());
          }
        case 315: break;
        case 77: 
          { return new Symbol(sym.venado, yychar, yyline,yytext());
          }
        case 316: break;
        case 31: 
          { return new Symbol(sym.adios, yychar, yyline,yytext());
          }
        case 317: break;
        case 43: 
          { return new Symbol(sym.ganar, yychar, yyline, yytext());
          }
        case 318: break;
        case 175: 
          { return new Symbol(sym.doctor, yychar, yyline,yytext());
          }
        case 319: break;
        case 161: 
          { return new Symbol(sym.mujer, yychar, yyline,yytext());
          }
        case 320: break;
        case 72: 
          { return new Symbol(sym.pegamento, yychar, yyline,yytext());
          }
        case 321: break;
        case 185: 
          { return new Symbol(sym.iglesia, yychar, yyline,yytext());
          }
        case 322: break;
        case 149: 
          { return new Symbol(sym.hablar, yychar, yyline, yytext());
          }
        case 323: break;
        case 104: 
          { return new Symbol(sym.tomar, yychar, yyline, yytext());
          }
        case 324: break;
        case 143: 
          { return new Symbol(sym.cerebro, yychar, yyline,yytext());
          }
        case 325: break;
        case 19: 
          { return new Symbol(sym.cuantos, yychar, yyline,yytext());
          }
        case 326: break;
        case 97: 
          { return new Symbol(sym.cantar, yychar, yyline, yytext());
          }
        case 327: break;
        case 184: 
          { return new Symbol(sym.morado, yychar, yyline,yytext());
          }
        case 328: break;
        case 103: 
          { return new Symbol(sym.contar, yychar, yyline, yytext());
          }
        case 329: break;
        case 110: 
          { return new Symbol(sym.habitacion, yychar, yyline,yytext());
          }
        case 330: break;
        case 14: 
          { return new Symbol(sym.puesto_que, yychar, yyline, yytext());
          }
        case 331: break;
        case 191: 
          { return new Symbol(sym.lavanderia, yychar, yyline,yytext());
          }
        case 332: break;
        case 141: 
          { return new Symbol(sym.negro, yychar, yyline,yytext());
          }
        case 333: break;
        case 205: 
          { return new Symbol(sym.tello, yychar, yyline,yytext());
          }
        case 334: break;
        case 101: 
          { return new Symbol(sym.aquel, yychar, yyline,yytext());
          }
        case 335: break;
        case 180: 
          { return new Symbol(sym.escuela, yychar, yyline,yytext());
          }
        case 336: break;
        case 53: 
          { return new Symbol(sym.gato, yychar, yyline,yytext());
          }
        case 337: break;
        case 171: 
          { return new Symbol(sym.luchar, yychar, yyline, yytext());
          }
        case 338: break;
        case 115: 
          { return new Symbol(sym.rodilla, yychar, yyline,yytext());
          }
        case 339: break;
        case 118: 
          { return new Symbol(sym.venir, yychar, yyline, yytext());
          }
        case 340: break;
        case 48: 
          { return new Symbol(sym.no, yychar, yyline,yytext());
          }
        case 341: break;
        case 18: 
          { return new Symbol(sym.gallina, yychar, yyline,yytext());
          }
        case 342: break;
        case 147: 
          { return new Symbol(sym.dormir, yychar, yyline, yytext());
          }
        case 343: break;
        case 89: 
          { return new Symbol(sym.toro, yychar, yyline,yytext());
          }
        case 344: break;
        case 37: 
          { return new Symbol(sym.sin_embargo, yychar, yyline, yytext());
          }
        case 345: break;
        case 209: 
          { return new Symbol(sym.hombro, yychar, yyline,yytext());
          }
        case 346: break;
        case 210: 
          { return new Symbol(sym.farmacia, yychar, yyline,yytext());
          }
        case 347: break;
        case 96: 
          { return new Symbol(sym.algún, yychar, yyline,yytext());
          }
        case 348: break;
        case 90: 
          { return new Symbol(sym.quemar, yychar, yyline, yytext());
          }
        case 349: break;
        case 70: 
          { return new Symbol(sym.izquierda, yychar, yyline,yytext());
          }
        case 350: break;
        case 75: 
          { return new Symbol(sym.dar, yychar, yyline, yytext());
          }
        case 351: break;
        case 117: 
          { return new Symbol(sym.cocinero, yychar, yyline,yytext());
          }
        case 352: break;
        case 131: 
          { return new Symbol(sym.codo, yychar, yyline,yytext());
          }
        case 353: break;
        case 79: 
          { return new Symbol(sym.puerta, yychar, yyline,yytext());
          }
        case 354: break;
        case 16: 
          { return new Symbol(sym.mi, yychar, yyline,yytext());
          }
        case 355: break;
        case 24: 
          { return new Symbol(sym.mentir, yychar, yyline, yytext());
          }
        case 356: break;
        case 195: 
          { return new Symbol(sym.porque, yychar, yyline, yytext());
          }
        case 357: break;
        case 193: 
          { return new Symbol(sym.galeria, yychar, yyline,yytext());
          }
        case 358: break;
        case 135: 
          { return new Symbol(sym.higado, yychar, yyline,yytext());
          }
        case 359: break;
        case 198: 
          { return new Symbol(sym.balcon, yychar, yyline,yytext());
          }
        case 360: break;
        case 187: 
          { return new Symbol(sym.granjero, yychar, yyline,yytext());
          }
        case 361: break;
        case 32: 
          { return new Symbol(sym.comprar, yychar, yyline, yytext());
          }
        case 362: break;
        case 172: 
          { return new Symbol(sym.boca, yychar, yyline,yytext());
          }
        case 363: break;
        case 167: 
          { return new Symbol(sym.tobillo, yychar, yyline,yytext());
          }
        case 364: break;
        case 216: 
          { return new Symbol(sym.carpintero, yychar, yyline,yytext());
          }
        case 365: break;
        case 200: 
          { return new Symbol(sym.gallo, yychar, yyline,yytext());
          }
        case 366: break;
        case 88: 
          { return new Symbol(sym.morder , yychar, yyline, yytext());
          }
        case 367: break;
        case 113: 
          { return new Symbol(sym.palma, yychar, yyline,yytext());
          }
        case 368: break;
        case 215: 
          { return new Symbol(sym.arquitecto, yychar, yyline,yytext());
          }
        case 369: break;
        case 173: 
          { return new Symbol(sym.naranja, yychar, yyline,yytext());
          }
        case 370: break;
        case 153: 
          { return new Symbol(sym.enseñar, yychar, yyline, yytext());
          }
        case 371: break;
        case 128: 
          { return new Symbol(sym.corazon, yychar, yyline,yytext());
          }
        case 372: break;
        case 166: 
          { return new Symbol(sym.enfermera, yychar, yyline,yytext());
          }
        case 373: break;
        case 176: 
          { return new Symbol(sym.panaderia, yychar, yyline,yytext());
          }
        case 374: break;
        case 105: 
          { return new Symbol(sym.qué, yychar, yyline,yytext());
          }
        case 375: break;
        case 62: 
          { return new Symbol(sym.herir, yychar, yyline, yytext());
          }
        case 376: break;
        case 192: 
          { return new Symbol(sym.en_su_lugar, yychar, yyline, yytext());
          }
        case 377: break;
        case 199: 
          { return new Symbol(sym.maestro, yychar, yyline,yytext());
          }
        case 378: break;
        case 15: 
          { return new Symbol(sym.soy, yychar, yyline,yytext());
          }
        case 379: break;
        case 85: 
          { return new Symbol(sym.libro, yychar, yyline,yytext());
          }
        case 380: break;
        case 168: 
          { return new Symbol(sym.silla, yychar, yyline,yytext());
          }
        case 381: break;
        case 129: 
          { return new Symbol(sym.casa, yychar, yyline,yytext());
          }
        case 382: break;
        case 194: 
          { return new Symbol(sym.dormitorio, yychar, yyline,yytext());
          }
        case 383: break;
        case 8: 
          { return new Symbol(sym.es, yychar, yyline,yytext());
          }
        case 384: break;
        case 138: 
          { return new Symbol(sym.verde, yychar, yyline,yytext());
          }
        case 385: break;
        case 68: 
          { return new Symbol(sym.este, yychar, yyline,yytext());
          }
        case 386: break;
        case 124: 
          { return new Symbol(sym.cara, yychar, yyline,yytext());
          }
        case 387: break;
        case 100: 
          { return new Symbol(sym.delgado, yychar, yyline,yytext());
          }
        case 388: break;
        case 181: 
          { return new Symbol(sym.lengua, yychar, yyline,yytext());
          }
        case 389: break;
        case 174: 
          { return new Symbol(sym.jardin, yychar, yyline,yytext());
          }
        case 390: break;
        case 122: 
          { return new Symbol(sym.rana, yychar, yyline,yytext());
          }
        case 391: break;
        case 2: 
          { /*Ignore*/
          }
        case 392: break;
        case 137: 
          { return new Symbol(sym.niñas, yychar, yyline,yytext());
          }
        case 393: break;
        case 60: 
          { return new Symbol(sym.cabeza, yychar, yyline,yytext());
          }
        case 394: break;
        case 12: 
          { return new Symbol(sym.a, yychar, yyline, yytext());
          }
        case 395: break;
        case 59: 
          { return new Symbol(sym.hombre, yychar, yyline,yytext());
          }
        case 396: break;
        case 202: 
          { return new Symbol(sym.riñones, yychar, yyline,yytext());
          }
        case 397: break;
        case 81: 
          { return new Symbol(sym.dibujar, yychar, yyline, yytext());
          }
        case 398: break;
        case 4: 
          { return new Symbol(sym.un, yychar, yyline,yytext());
          }
        case 399: break;
        case 186: 
          { return new Symbol(sym.dedos, yychar, yyline,yytext());
          }
        case 400: break;
        case 182: 
          { return new Symbol(sym.pavo, yychar, yyline,yytext());
          }
        case 401: break;
        case 154: 
          { return new Symbol(sym.dientes, yychar, yyline,yytext());
          }
        case 402: break;
        case 66: 
          { return new Symbol(sym.tener, yychar, yyline, yytext());
          }
        case 403: break;
        case 80: 
          { return new Symbol(sym.pato, yychar, yyline,yytext());
          }
        case 404: break;
        case 78: 
          { return new Symbol(sym.escritorio, yychar, yyline,yytext());
          }
        case 405: break;
        case 58: 
          { return new Symbol(sym.hombres, yychar, yyline,yytext());
          }
        case 406: break;
        case 45: 
          { return new Symbol(sym.correr, yychar, yyline, yytext());
          }
        case 407: break;
        case 189: 
          { return new Symbol(sym.pasillo, yychar, yyline,yytext());
          }
        case 408: break;
        case 188: 
          { return new Symbol(sym.museo, yychar, yyline,yytext());
          }
        case 409: break;
        case 159: 
          { return new Symbol(sym.ballena, yychar, yyline,yytext());
          }
        case 410: break;
        case 127: 
          { return new Symbol(sym.nariz, yychar, yyline,yytext());
          }
        case 411: break;
        case 207: 
          { return new Symbol(sym.cajero, yychar, yyline,yytext());
          }
        case 412: break;
        case 10: 
          { return new Symbol(sym.ir, yychar, yyline, yytext());
          }
        case 413: break;
        case 179: 
          { return new Symbol(sym.escaleras, yychar, yyline,yytext());
          }
        case 414: break;
        case 42: 
          { return new Symbol(sym.la, yychar, yyline,yytext());
          }
        case 415: break;
        case 98: 
          { return new Symbol(sym.nadar, yychar, yyline, yytext());
          }
        case 416: break;
        case 63: 
          { return new Symbol(sym.salon, yychar, yyline,yytext());
          }
        case 417: break;
        case 133: 
          { return new Symbol(sym.salir, yychar, yyline, yytext());
          }
        case 418: break;
        case 83: 
          { return new Symbol(sym.soplar, yychar, yyline, yytext());
          }
        case 419: break;
        case 162: 
          { return new Symbol(sym.escribir, yychar, yyline, yytext());
          }
        case 420: break;
        case 165: 
          { return new Symbol(sym.norte, yychar, yyline,yytext());
          }
        case 421: break;
        case 183: 
          { return new Symbol(sym.conejo, yychar, yyline,yytext());
          }
        case 422: break;
        case 112: 
          { return new Symbol(sym.rosado, yychar, yyline,yytext());
          }
        case 423: break;
        case 84: 
          { return new Symbol(sym.azul, yychar, yyline,yytext());
          }
        case 424: break;
        case 46: 
          { return new Symbol(sym.cerdo, yychar, yyline,yytext());
          }
        case 425: break;
        case 6: 
          { return new Symbol(sym.hola, yychar, yyline,yytext());
          }
        case 426: break;
        case 190: 
          { return new Symbol(sym.libreria, yychar, yyline,yytext());
          }
        case 427: break;
        case 93: 
          { return new Symbol(sym.mostrar, yychar, yyline, yytext());
          }
        case 428: break;
        case 102: 
          { return new Symbol(sym.que, yychar, yyline, yytext());
          }
        case 429: break;
        case 87: 
          { return new Symbol(sym.barco, yychar, yyline,yytext());
          }
        case 430: break;
        case 178: 
          { return new Symbol(sym.calle, yychar, yyline,yytext());
          }
        case 431: break;
        case 146: 
          { return new Symbol(sym.corto, yychar, yyline,yytext());
          }
        case 432: break;
        case 139: 
          { return new Symbol(sym.conducir, yychar, yyline, yytext());
          }
        case 433: break;
        case 134: 
          { return new Symbol(sym.luz, yychar, yyline, yytext());
          }
        case 434: break;
        case 160: 
          { return new Symbol(sym.mujeres, yychar, yyline,yytext());
          }
        case 435: break;
        case 71: 
          { return new Symbol(sym.perder, yychar, yyline, yytext());
          }
        case 436: break;
        case 50: 
          { return new Symbol(sym.brazo, yychar, yyline,yytext());
          }
        case 437: break;
        case 126: 
          { return new Symbol(sym.empleos, yychar, yyline,yytext());
          }
        case 438: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
