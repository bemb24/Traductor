
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 30 23:07:48 GMT-06:00 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 30 23:07:48 GMT-06:00 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\356\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\004" +
    "\000\002\002\004\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\003\006\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\116\004\032\005\051\042\040\043\053\044" +
    "\007\045\006\046\014\047\030\050\043\051\020\052\016" +
    "\053\050\054\013\055\023\056\041\057\012\060\011\061" +
    "\005\062\017\063\052\211\031\212\035\213\046\214\037" +
    "\215\033\216\004\217\034\335\047\336\042\337\024\340" +
    "\045\341\015\342\025\343\036\344\054\345\027\346\044" +
    "\347\010\001\002\000\352\007\uff44\010\uff44\011\uff44\012" +
    "\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44\020\uff44" +
    "\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026\uff44\027" +
    "\uff44\064\uff44\065\uff44\066\uff44\067\uff44\070\uff44\071\uff44" +
    "\072\uff44\073\uff44\074\uff44\075\uff44\076\uff44\077\uff44\100" +
    "\uff44\101\uff44\102\uff44\103\uff44\122\uff44\123\uff44\124\uff44" +
    "\125\uff44\126\uff44\127\uff44\130\uff44\131\uff44\132\uff44\133" +
    "\uff44\134\uff44\135\uff44\136\uff44\137\uff44\140\uff44\141\uff44" +
    "\142\uff44\143\uff44\144\uff44\145\uff44\146\uff44\147\uff44\150" +
    "\uff44\151\uff44\152\uff44\153\uff44\154\uff44\155\uff44\156\uff44" +
    "\157\uff44\160\uff44\161\uff44\162\uff44\163\uff44\164\uff44\165" +
    "\uff44\166\uff44\167\uff44\170\uff44\171\uff44\172\uff44\173\uff44" +
    "\174\uff44\175\uff44\176\uff44\177\uff44\200\uff44\201\uff44\202" +
    "\uff44\203\uff44\204\uff44\205\uff44\206\uff44\207\uff44\210\uff44" +
    "\220\uff44\221\uff44\222\uff44\223\uff44\224\uff44\225\uff44\226" +
    "\uff44\227\uff44\230\uff44\231\uff44\232\uff44\233\uff44\234\uff44" +
    "\235\uff44\236\uff44\237\uff44\240\uff44\241\uff44\242\uff44\243" +
    "\uff44\244\uff44\245\uff44\246\uff44\247\uff44\250\uff44\251\uff44" +
    "\252\uff44\253\uff44\001\002\000\352\007\uff33\010\uff33\011" +
    "\uff33\012\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33" +
    "\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025\uff33\026" +
    "\uff33\027\uff33\064\uff33\065\uff33\066\uff33\067\uff33\070\uff33" +
    "\071\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076\uff33\077" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\122\uff33\123\uff33" +
    "\124\uff33\125\uff33\126\uff33\127\uff33\130\uff33\131\uff33\132" +
    "\uff33\133\uff33\134\uff33\135\uff33\136\uff33\137\uff33\140\uff33" +
    "\141\uff33\142\uff33\143\uff33\144\uff33\145\uff33\146\uff33\147" +
    "\uff33\150\uff33\151\uff33\152\uff33\153\uff33\154\uff33\155\uff33" +
    "\156\uff33\157\uff33\160\uff33\161\uff33\162\uff33\163\uff33\164" +
    "\uff33\165\uff33\166\uff33\167\uff33\170\uff33\171\uff33\172\uff33" +
    "\173\uff33\174\uff33\175\uff33\176\uff33\177\uff33\200\uff33\201" +
    "\uff33\202\uff33\203\uff33\204\uff33\205\uff33\206\uff33\207\uff33" +
    "\210\uff33\220\uff33\221\uff33\222\uff33\223\uff33\224\uff33\225" +
    "\uff33\226\uff33\227\uff33\230\uff33\231\uff33\232\uff33\233\uff33" +
    "\234\uff33\235\uff33\236\uff33\237\uff33\240\uff33\241\uff33\242" +
    "\uff33\243\uff33\244\uff33\245\uff33\246\uff33\247\uff33\250\uff33" +
    "\251\uff33\252\uff33\253\uff33\001\002\000\352\007\uff3f\010" +
    "\uff3f\011\uff3f\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f" +
    "\017\uff3f\020\uff3f\021\uff3f\022\uff3f\023\uff3f\024\uff3f\025" +
    "\uff3f\026\uff3f\027\uff3f\064\uff3f\065\uff3f\066\uff3f\067\uff3f" +
    "\070\uff3f\071\uff3f\072\uff3f\073\uff3f\074\uff3f\075\uff3f\076" +
    "\uff3f\077\uff3f\100\uff3f\101\uff3f\102\uff3f\103\uff3f\122\uff3f" +
    "\123\uff3f\124\uff3f\125\uff3f\126\uff3f\127\uff3f\130\uff3f\131" +
    "\uff3f\132\uff3f\133\uff3f\134\uff3f\135\uff3f\136\uff3f\137\uff3f" +
    "\140\uff3f\141\uff3f\142\uff3f\143\uff3f\144\uff3f\145\uff3f\146" +
    "\uff3f\147\uff3f\150\uff3f\151\uff3f\152\uff3f\153\uff3f\154\uff3f" +
    "\155\uff3f\156\uff3f\157\uff3f\160\uff3f\161\uff3f\162\uff3f\163" +
    "\uff3f\164\uff3f\165\uff3f\166\uff3f\167\uff3f\170\uff3f\171\uff3f" +
    "\172\uff3f\173\uff3f\174\uff3f\175\uff3f\176\uff3f\177\uff3f\200" +
    "\uff3f\201\uff3f\202\uff3f\203\uff3f\204\uff3f\205\uff3f\206\uff3f" +
    "\207\uff3f\210\uff3f\220\uff3f\221\uff3f\222\uff3f\223\uff3f\224" +
    "\uff3f\225\uff3f\226\uff3f\227\uff3f\230\uff3f\231\uff3f\232\uff3f" +
    "\233\uff3f\234\uff3f\235\uff3f\236\uff3f\237\uff3f\240\uff3f\241" +
    "\uff3f\242\uff3f\243\uff3f\244\uff3f\245\uff3f\246\uff3f\247\uff3f" +
    "\250\uff3f\251\uff3f\252\uff3f\253\uff3f\001\002\000\352\007" +
    "\uff40\010\uff40\011\uff40\012\uff40\013\uff40\014\uff40\015\uff40" +
    "\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\023\uff40\024" +
    "\uff40\025\uff40\026\uff40\027\uff40\064\uff40\065\uff40\066\uff40" +
    "\067\uff40\070\uff40\071\uff40\072\uff40\073\uff40\074\uff40\075" +
    "\uff40\076\uff40\077\uff40\100\uff40\101\uff40\102\uff40\103\uff40" +
    "\122\uff40\123\uff40\124\uff40\125\uff40\126\uff40\127\uff40\130" +
    "\uff40\131\uff40\132\uff40\133\uff40\134\uff40\135\uff40\136\uff40" +
    "\137\uff40\140\uff40\141\uff40\142\uff40\143\uff40\144\uff40\145" +
    "\uff40\146\uff40\147\uff40\150\uff40\151\uff40\152\uff40\153\uff40" +
    "\154\uff40\155\uff40\156\uff40\157\uff40\160\uff40\161\uff40\162" +
    "\uff40\163\uff40\164\uff40\165\uff40\166\uff40\167\uff40\170\uff40" +
    "\171\uff40\172\uff40\173\uff40\174\uff40\175\uff40\176\uff40\177" +
    "\uff40\200\uff40\201\uff40\202\uff40\203\uff40\204\uff40\205\uff40" +
    "\206\uff40\207\uff40\210\uff40\220\uff40\221\uff40\222\uff40\223" +
    "\uff40\224\uff40\225\uff40\226\uff40\227\uff40\230\uff40\231\uff40" +
    "\232\uff40\233\uff40\234\uff40\235\uff40\236\uff40\237\uff40\240" +
    "\uff40\241\uff40\242\uff40\243\uff40\244\uff40\245\uff40\246\uff40" +
    "\247\uff40\250\uff40\251\uff40\252\uff40\253\uff40\001\002\000" +
    "\352\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a" +
    "\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a\022\uff4a\023" +
    "\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\064\uff4a\065\uff4a" +
    "\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a\073\uff4a\074" +
    "\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101\uff4a\102\uff4a" +
    "\103\uff4a\122\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a\127" +
    "\uff4a\130\uff4a\131\uff4a\132\uff4a\133\uff4a\134\uff4a\135\uff4a" +
    "\136\uff4a\137\uff4a\140\uff4a\141\uff4a\142\uff4a\143\uff4a\144" +
    "\uff4a\145\uff4a\146\uff4a\147\uff4a\150\uff4a\151\uff4a\152\uff4a" +
    "\153\uff4a\154\uff4a\155\uff4a\156\uff4a\157\uff4a\160\uff4a\161" +
    "\uff4a\162\uff4a\163\uff4a\164\uff4a\165\uff4a\166\uff4a\167\uff4a" +
    "\170\uff4a\171\uff4a\172\uff4a\173\uff4a\174\uff4a\175\uff4a\176" +
    "\uff4a\177\uff4a\200\uff4a\201\uff4a\202\uff4a\203\uff4a\204\uff4a" +
    "\205\uff4a\206\uff4a\207\uff4a\210\uff4a\220\uff4a\221\uff4a\222" +
    "\uff4a\223\uff4a\224\uff4a\225\uff4a\226\uff4a\227\uff4a\230\uff4a" +
    "\231\uff4a\232\uff4a\233\uff4a\234\uff4a\235\uff4a\236\uff4a\237" +
    "\uff4a\240\uff4a\241\uff4a\242\uff4a\243\uff4a\244\uff4a\245\uff4a" +
    "\246\uff4a\247\uff4a\250\uff4a\251\uff4a\252\uff4a\253\uff4a\001" +
    "\002\000\352\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34" +
    "\014\uff34\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022" +
    "\uff34\023\uff34\024\uff34\025\uff34\026\uff34\027\uff34\064\uff34" +
    "\065\uff34\066\uff34\067\uff34\070\uff34\071\uff34\072\uff34\073" +
    "\uff34\074\uff34\075\uff34\076\uff34\077\uff34\100\uff34\101\uff34" +
    "\102\uff34\103\uff34\122\uff34\123\uff34\124\uff34\125\uff34\126" +
    "\uff34\127\uff34\130\uff34\131\uff34\132\uff34\133\uff34\134\uff34" +
    "\135\uff34\136\uff34\137\uff34\140\uff34\141\uff34\142\uff34\143" +
    "\uff34\144\uff34\145\uff34\146\uff34\147\uff34\150\uff34\151\uff34" +
    "\152\uff34\153\uff34\154\uff34\155\uff34\156\uff34\157\uff34\160" +
    "\uff34\161\uff34\162\uff34\163\uff34\164\uff34\165\uff34\166\uff34" +
    "\167\uff34\170\uff34\171\uff34\172\uff34\173\uff34\174\uff34\175" +
    "\uff34\176\uff34\177\uff34\200\uff34\201\uff34\202\uff34\203\uff34" +
    "\204\uff34\205\uff34\206\uff34\207\uff34\210\uff34\220\uff34\221" +
    "\uff34\222\uff34\223\uff34\224\uff34\225\uff34\226\uff34\227\uff34" +
    "\230\uff34\231\uff34\232\uff34\233\uff34\234\uff34\235\uff34\236" +
    "\uff34\237\uff34\240\uff34\241\uff34\242\uff34\243\uff34\244\uff34" +
    "\245\uff34\246\uff34\247\uff34\250\uff34\251\uff34\252\uff34\253" +
    "\uff34\001\002\000\352\007\uff35\010\uff35\011\uff35\012\uff35" +
    "\013\uff35\014\uff35\015\uff35\016\uff35\017\uff35\020\uff35\021" +
    "\uff35\022\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35" +
    "\064\uff35\065\uff35\066\uff35\067\uff35\070\uff35\071\uff35\072" +
    "\uff35\073\uff35\074\uff35\075\uff35\076\uff35\077\uff35\100\uff35" +
    "\101\uff35\102\uff35\103\uff35\122\uff35\123\uff35\124\uff35\125" +
    "\uff35\126\uff35\127\uff35\130\uff35\131\uff35\132\uff35\133\uff35" +
    "\134\uff35\135\uff35\136\uff35\137\uff35\140\uff35\141\uff35\142" +
    "\uff35\143\uff35\144\uff35\145\uff35\146\uff35\147\uff35\150\uff35" +
    "\151\uff35\152\uff35\153\uff35\154\uff35\155\uff35\156\uff35\157" +
    "\uff35\160\uff35\161\uff35\162\uff35\163\uff35\164\uff35\165\uff35" +
    "\166\uff35\167\uff35\170\uff35\171\uff35\172\uff35\173\uff35\174" +
    "\uff35\175\uff35\176\uff35\177\uff35\200\uff35\201\uff35\202\uff35" +
    "\203\uff35\204\uff35\205\uff35\206\uff35\207\uff35\210\uff35\220" +
    "\uff35\221\uff35\222\uff35\223\uff35\224\uff35\225\uff35\226\uff35" +
    "\227\uff35\230\uff35\231\uff35\232\uff35\233\uff35\234\uff35\235" +
    "\uff35\236\uff35\237\uff35\240\uff35\241\uff35\242\uff35\243\uff35" +
    "\244\uff35\245\uff35\246\uff35\247\uff35\250\uff35\251\uff35\252" +
    "\uff35\253\uff35\001\002\000\352\007\uff38\010\uff38\011\uff38" +
    "\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017\uff38\020" +
    "\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38\026\uff38" +
    "\027\uff38\064\uff38\065\uff38\066\uff38\067\uff38\070\uff38\071" +
    "\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076\uff38\077\uff38" +
    "\100\uff38\101\uff38\102\uff38\103\uff38\122\uff38\123\uff38\124" +
    "\uff38\125\uff38\126\uff38\127\uff38\130\uff38\131\uff38\132\uff38" +
    "\133\uff38\134\uff38\135\uff38\136\uff38\137\uff38\140\uff38\141" +
    "\uff38\142\uff38\143\uff38\144\uff38\145\uff38\146\uff38\147\uff38" +
    "\150\uff38\151\uff38\152\uff38\153\uff38\154\uff38\155\uff38\156" +
    "\uff38\157\uff38\160\uff38\161\uff38\162\uff38\163\uff38\164\uff38" +
    "\165\uff38\166\uff38\167\uff38\170\uff38\171\uff38\172\uff38\173" +
    "\uff38\174\uff38\175\uff38\176\uff38\177\uff38\200\uff38\201\uff38" +
    "\202\uff38\203\uff38\204\uff38\205\uff38\206\uff38\207\uff38\210" +
    "\uff38\220\uff38\221\uff38\222\uff38\223\uff38\224\uff38\225\uff38" +
    "\226\uff38\227\uff38\230\uff38\231\uff38\232\uff38\233\uff38\234" +
    "\uff38\235\uff38\236\uff38\237\uff38\240\uff38\241\uff38\242\uff38" +
    "\243\uff38\244\uff38\245\uff38\246\uff38\247\uff38\250\uff38\251" +
    "\uff38\252\uff38\253\uff38\001\002\000\352\007\uff3e\010\uff3e" +
    "\011\uff3e\012\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\017" +
    "\uff3e\020\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e" +
    "\026\uff3e\027\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\070" +
    "\uff3e\071\uff3e\072\uff3e\073\uff3e\074\uff3e\075\uff3e\076\uff3e" +
    "\077\uff3e\100\uff3e\101\uff3e\102\uff3e\103\uff3e\122\uff3e\123" +
    "\uff3e\124\uff3e\125\uff3e\126\uff3e\127\uff3e\130\uff3e\131\uff3e" +
    "\132\uff3e\133\uff3e\134\uff3e\135\uff3e\136\uff3e\137\uff3e\140" +
    "\uff3e\141\uff3e\142\uff3e\143\uff3e\144\uff3e\145\uff3e\146\uff3e" +
    "\147\uff3e\150\uff3e\151\uff3e\152\uff3e\153\uff3e\154\uff3e\155" +
    "\uff3e\156\uff3e\157\uff3e\160\uff3e\161\uff3e\162\uff3e\163\uff3e" +
    "\164\uff3e\165\uff3e\166\uff3e\167\uff3e\170\uff3e\171\uff3e\172" +
    "\uff3e\173\uff3e\174\uff3e\175\uff3e\176\uff3e\177\uff3e\200\uff3e" +
    "\201\uff3e\202\uff3e\203\uff3e\204\uff3e\205\uff3e\206\uff3e\207" +
    "\uff3e\210\uff3e\220\uff3e\221\uff3e\222\uff3e\223\uff3e\224\uff3e" +
    "\225\uff3e\226\uff3e\227\uff3e\230\uff3e\231\uff3e\232\uff3e\233" +
    "\uff3e\234\uff3e\235\uff3e\236\uff3e\237\uff3e\240\uff3e\241\uff3e" +
    "\242\uff3e\243\uff3e\244\uff3e\245\uff3e\246\uff3e\247\uff3e\250" +
    "\uff3e\251\uff3e\252\uff3e\253\uff3e\001\002\000\352\007\uff50" +
    "\010\uff50\011\uff50\012\uff50\013\uff50\014\uff50\015\uff50\016" +
    "\uff50\017\uff50\020\uff50\021\uff50\022\uff50\023\uff50\024\uff50" +
    "\025\uff50\026\uff50\027\uff50\064\uff50\065\uff50\066\uff50\067" +
    "\uff50\070\uff50\071\uff50\072\uff50\073\uff50\074\uff50\075\uff50" +
    "\076\uff50\077\uff50\100\uff50\101\uff50\102\uff50\103\uff50\122" +
    "\uff50\123\uff50\124\uff50\125\uff50\126\uff50\127\uff50\130\uff50" +
    "\131\uff50\132\uff50\133\uff50\134\uff50\135\uff50\136\uff50\137" +
    "\uff50\140\uff50\141\uff50\142\uff50\143\uff50\144\uff50\145\uff50" +
    "\146\uff50\147\uff50\150\uff50\151\uff50\152\uff50\153\uff50\154" +
    "\uff50\155\uff50\156\uff50\157\uff50\160\uff50\161\uff50\162\uff50" +
    "\163\uff50\164\uff50\165\uff50\166\uff50\167\uff50\170\uff50\171" +
    "\uff50\172\uff50\173\uff50\174\uff50\175\uff50\176\uff50\177\uff50" +
    "\200\uff50\201\uff50\202\uff50\203\uff50\204\uff50\205\uff50\206" +
    "\uff50\207\uff50\210\uff50\220\uff50\221\uff50\222\uff50\223\uff50" +
    "\224\uff50\225\uff50\226\uff50\227\uff50\230\uff50\231\uff50\232" +
    "\uff50\233\uff50\234\uff50\235\uff50\236\uff50\237\uff50\240\uff50" +
    "\241\uff50\242\uff50\243\uff50\244\uff50\245\uff50\246\uff50\247" +
    "\uff50\250\uff50\251\uff50\252\uff50\253\uff50\001\002\000\352" +
    "\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013\uff3a\014\uff3a\015" +
    "\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a\022\uff3a\023\uff3a" +
    "\024\uff3a\025\uff3a\026\uff3a\027\uff3a\064\uff3a\065\uff3a\066" +
    "\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a" +
    "\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101\uff3a\102\uff3a\103" +
    "\uff3a\122\uff3a\123\uff3a\124\uff3a\125\uff3a\126\uff3a\127\uff3a" +
    "\130\uff3a\131\uff3a\132\uff3a\133\uff3a\134\uff3a\135\uff3a\136" +
    "\uff3a\137\uff3a\140\uff3a\141\uff3a\142\uff3a\143\uff3a\144\uff3a" +
    "\145\uff3a\146\uff3a\147\uff3a\150\uff3a\151\uff3a\152\uff3a\153" +
    "\uff3a\154\uff3a\155\uff3a\156\uff3a\157\uff3a\160\uff3a\161\uff3a" +
    "\162\uff3a\163\uff3a\164\uff3a\165\uff3a\166\uff3a\167\uff3a\170" +
    "\uff3a\171\uff3a\172\uff3a\173\uff3a\174\uff3a\175\uff3a\176\uff3a" +
    "\177\uff3a\200\uff3a\201\uff3a\202\uff3a\203\uff3a\204\uff3a\205" +
    "\uff3a\206\uff3a\207\uff3a\210\uff3a\220\uff3a\221\uff3a\222\uff3a" +
    "\223\uff3a\224\uff3a\225\uff3a\226\uff3a\227\uff3a\230\uff3a\231" +
    "\uff3a\232\uff3a\233\uff3a\234\uff3a\235\uff3a\236\uff3a\237\uff3a" +
    "\240\uff3a\241\uff3a\242\uff3a\243\uff3a\244\uff3a\245\uff3a\246" +
    "\uff3a\247\uff3a\250\uff3a\251\uff3a\252\uff3a\253\uff3a\001\002" +
    "\000\352\007\uff32\010\uff32\011\uff32\012\uff32\013\uff32\014" +
    "\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32\022\uff32" +
    "\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32\064\uff32\065" +
    "\uff32\066\uff32\067\uff32\070\uff32\071\uff32\072\uff32\073\uff32" +
    "\074\uff32\075\uff32\076\uff32\077\uff32\100\uff32\101\uff32\102" +
    "\uff32\103\uff32\122\uff32\123\uff32\124\uff32\125\uff32\126\uff32" +
    "\127\uff32\130\uff32\131\uff32\132\uff32\133\uff32\134\uff32\135" +
    "\uff32\136\uff32\137\uff32\140\uff32\141\uff32\142\uff32\143\uff32" +
    "\144\uff32\145\uff32\146\uff32\147\uff32\150\uff32\151\uff32\152" +
    "\uff32\153\uff32\154\uff32\155\uff32\156\uff32\157\uff32\160\uff32" +
    "\161\uff32\162\uff32\163\uff32\164\uff32\165\uff32\166\uff32\167" +
    "\uff32\170\uff32\171\uff32\172\uff32\173\uff32\174\uff32\175\uff32" +
    "\176\uff32\177\uff32\200\uff32\201\uff32\202\uff32\203\uff32\204" +
    "\uff32\205\uff32\206\uff32\207\uff32\210\uff32\220\uff32\221\uff32" +
    "\222\uff32\223\uff32\224\uff32\225\uff32\226\uff32\227\uff32\230" +
    "\uff32\231\uff32\232\uff32\233\uff32\234\uff32\235\uff32\236\uff32" +
    "\237\uff32\240\uff32\241\uff32\242\uff32\243\uff32\244\uff32\245" +
    "\uff32\246\uff32\247\uff32\250\uff32\251\uff32\252\uff32\253\uff32" +
    "\001\002\000\352\007\uff3b\010\uff3b\011\uff3b\012\uff3b\013" +
    "\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021\uff3b" +
    "\022\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b\064" +
    "\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b\071\uff3b\072\uff3b" +
    "\073\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b\100\uff3b\101" +
    "\uff3b\102\uff3b\103\uff3b\122\uff3b\123\uff3b\124\uff3b\125\uff3b" +
    "\126\uff3b\127\uff3b\130\uff3b\131\uff3b\132\uff3b\133\uff3b\134" +
    "\uff3b\135\uff3b\136\uff3b\137\uff3b\140\uff3b\141\uff3b\142\uff3b" +
    "\143\uff3b\144\uff3b\145\uff3b\146\uff3b\147\uff3b\150\uff3b\151" +
    "\uff3b\152\uff3b\153\uff3b\154\uff3b\155\uff3b\156\uff3b\157\uff3b" +
    "\160\uff3b\161\uff3b\162\uff3b\163\uff3b\164\uff3b\165\uff3b\166" +
    "\uff3b\167\uff3b\170\uff3b\171\uff3b\172\uff3b\173\uff3b\174\uff3b" +
    "\175\uff3b\176\uff3b\177\uff3b\200\uff3b\201\uff3b\202\uff3b\203" +
    "\uff3b\204\uff3b\205\uff3b\206\uff3b\207\uff3b\210\uff3b\220\uff3b" +
    "\221\uff3b\222\uff3b\223\uff3b\224\uff3b\225\uff3b\226\uff3b\227" +
    "\uff3b\230\uff3b\231\uff3b\232\uff3b\233\uff3b\234\uff3b\235\uff3b" +
    "\236\uff3b\237\uff3b\240\uff3b\241\uff3b\242\uff3b\243\uff3b\244" +
    "\uff3b\245\uff3b\246\uff3b\247\uff3b\250\uff3b\251\uff3b\252\uff3b" +
    "\253\uff3b\001\002\000\352\007\uff55\010\uff55\011\uff55\012" +
    "\uff55\013\uff55\014\uff55\015\uff55\016\uff55\017\uff55\020\uff55" +
    "\021\uff55\022\uff55\023\uff55\024\uff55\025\uff55\026\uff55\027" +
    "\uff55\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55" +
    "\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100" +
    "\uff55\101\uff55\102\uff55\103\uff55\122\uff55\123\uff55\124\uff55" +
    "\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55\132\uff55\133" +
    "\uff55\134\uff55\135\uff55\136\uff55\137\uff55\140\uff55\141\uff55" +
    "\142\uff55\143\uff55\144\uff55\145\uff55\146\uff55\147\uff55\150" +
    "\uff55\151\uff55\152\uff55\153\uff55\154\uff55\155\uff55\156\uff55" +
    "\157\uff55\160\uff55\161\uff55\162\uff55\163\uff55\164\uff55\165" +
    "\uff55\166\uff55\167\uff55\170\uff55\171\uff55\172\uff55\173\uff55" +
    "\174\uff55\175\uff55\176\uff55\177\uff55\200\uff55\201\uff55\202" +
    "\uff55\203\uff55\204\uff55\205\uff55\206\uff55\207\uff55\210\uff55" +
    "\220\uff55\221\uff55\222\uff55\223\uff55\224\uff55\225\uff55\226" +
    "\uff55\227\uff55\230\uff55\231\uff55\232\uff55\233\uff55\234\uff55" +
    "\235\uff55\236\uff55\237\uff55\240\uff55\241\uff55\242\uff55\243" +
    "\uff55\244\uff55\245\uff55\246\uff55\247\uff55\250\uff55\251\uff55" +
    "\252\uff55\253\uff55\001\002\000\352\007\214\010\226\011" +
    "\171\012\110\013\075\014\134\015\213\016\204\017\201" +
    "\020\060\021\107\022\076\023\135\024\065\025\124\026" +
    "\150\027\164\064\227\065\114\066\173\067\170\070\207" +
    "\071\152\072\101\073\140\074\163\075\145\076\102\077" +
    "\133\100\174\101\056\102\162\103\146\122\231\123\142" +
    "\124\057\125\236\126\203\127\165\130\155\131\116\132" +
    "\064\133\105\134\250\135\147\136\200\137\210\140\067" +
    "\141\073\142\113\143\104\144\243\145\160\146\154\147" +
    "\252\150\071\151\130\152\235\153\176\154\157\155\211" +
    "\156\245\157\115\160\117\161\070\162\066\163\120\164" +
    "\103\165\127\166\241\167\122\170\061\171\223\172\143" +
    "\173\126\174\111\175\137\176\177\177\100\200\175\201" +
    "\074\202\121\203\161\204\167\205\131\206\202\207\242" +
    "\210\205\220\063\221\233\222\246\223\144\224\153\225" +
    "\234\226\106\227\247\230\240\231\132\232\072\233\112" +
    "\234\216\235\206\236\136\237\217\240\166\241\244\242" +
    "\225\243\077\244\125\245\141\246\151\247\220\250\230" +
    "\251\232\252\237\253\251\001\002\000\352\007\uff37\010" +
    "\uff37\011\uff37\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37" +
    "\017\uff37\020\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025" +
    "\uff37\026\uff37\027\uff37\064\uff37\065\uff37\066\uff37\067\uff37" +
    "\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075\uff37\076" +
    "\uff37\077\uff37\100\uff37\101\uff37\102\uff37\103\uff37\122\uff37" +
    "\123\uff37\124\uff37\125\uff37\126\uff37\127\uff37\130\uff37\131" +
    "\uff37\132\uff37\133\uff37\134\uff37\135\uff37\136\uff37\137\uff37" +
    "\140\uff37\141\uff37\142\uff37\143\uff37\144\uff37\145\uff37\146" +
    "\uff37\147\uff37\150\uff37\151\uff37\152\uff37\153\uff37\154\uff37" +
    "\155\uff37\156\uff37\157\uff37\160\uff37\161\uff37\162\uff37\163" +
    "\uff37\164\uff37\165\uff37\166\uff37\167\uff37\170\uff37\171\uff37" +
    "\172\uff37\173\uff37\174\uff37\175\uff37\176\uff37\177\uff37\200" +
    "\uff37\201\uff37\202\uff37\203\uff37\204\uff37\205\uff37\206\uff37" +
    "\207\uff37\210\uff37\220\uff37\221\uff37\222\uff37\223\uff37\224" +
    "\uff37\225\uff37\226\uff37\227\uff37\230\uff37\231\uff37\232\uff37" +
    "\233\uff37\234\uff37\235\uff37\236\uff37\237\uff37\240\uff37\241" +
    "\uff37\242\uff37\243\uff37\244\uff37\245\uff37\246\uff37\247\uff37" +
    "\250\uff37\251\uff37\252\uff37\253\uff37\001\002\000\352\007" +
    "\uff52\010\uff52\011\uff52\012\uff52\013\uff52\014\uff52\015\uff52" +
    "\016\uff52\017\uff52\020\uff52\021\uff52\022\uff52\023\uff52\024" +
    "\uff52\025\uff52\026\uff52\027\uff52\064\uff52\065\uff52\066\uff52" +
    "\067\uff52\070\uff52\071\uff52\072\uff52\073\uff52\074\uff52\075" +
    "\uff52\076\uff52\077\uff52\100\uff52\101\uff52\102\uff52\103\uff52" +
    "\122\uff52\123\uff52\124\uff52\125\uff52\126\uff52\127\uff52\130" +
    "\uff52\131\uff52\132\uff52\133\uff52\134\uff52\135\uff52\136\uff52" +
    "\137\uff52\140\uff52\141\uff52\142\uff52\143\uff52\144\uff52\145" +
    "\uff52\146\uff52\147\uff52\150\uff52\151\uff52\152\uff52\153\uff52" +
    "\154\uff52\155\uff52\156\uff52\157\uff52\160\uff52\161\uff52\162" +
    "\uff52\163\uff52\164\uff52\165\uff52\166\uff52\167\uff52\170\uff52" +
    "\171\uff52\172\uff52\173\uff52\174\uff52\175\uff52\176\uff52\177" +
    "\uff52\200\uff52\201\uff52\202\uff52\203\uff52\204\uff52\205\uff52" +
    "\206\uff52\207\uff52\210\uff52\220\uff52\221\uff52\222\uff52\223" +
    "\uff52\224\uff52\225\uff52\226\uff52\227\uff52\230\uff52\231\uff52" +
    "\232\uff52\233\uff52\234\uff52\235\uff52\236\uff52\237\uff52\240" +
    "\uff52\241\uff52\242\uff52\243\uff52\244\uff52\245\uff52\246\uff52" +
    "\247\uff52\250\uff52\251\uff52\252\uff52\253\uff52\001\002\000" +
    "\352\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f\014\uff4f" +
    "\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023" +
    "\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\064\uff4f\065\uff4f" +
    "\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072\uff4f\073\uff4f\074" +
    "\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f\101\uff4f\102\uff4f" +
    "\103\uff4f\122\uff4f\123\uff4f\124\uff4f\125\uff4f\126\uff4f\127" +
    "\uff4f\130\uff4f\131\uff4f\132\uff4f\133\uff4f\134\uff4f\135\uff4f" +
    "\136\uff4f\137\uff4f\140\uff4f\141\uff4f\142\uff4f\143\uff4f\144" +
    "\uff4f\145\uff4f\146\uff4f\147\uff4f\150\uff4f\151\uff4f\152\uff4f" +
    "\153\uff4f\154\uff4f\155\uff4f\156\uff4f\157\uff4f\160\uff4f\161" +
    "\uff4f\162\uff4f\163\uff4f\164\uff4f\165\uff4f\166\uff4f\167\uff4f" +
    "\170\uff4f\171\uff4f\172\uff4f\173\uff4f\174\uff4f\175\uff4f\176" +
    "\uff4f\177\uff4f\200\uff4f\201\uff4f\202\uff4f\203\uff4f\204\uff4f" +
    "\205\uff4f\206\uff4f\207\uff4f\210\uff4f\220\uff4f\221\uff4f\222" +
    "\uff4f\223\uff4f\224\uff4f\225\uff4f\226\uff4f\227\uff4f\230\uff4f" +
    "\231\uff4f\232\uff4f\233\uff4f\234\uff4f\235\uff4f\236\uff4f\237" +
    "\uff4f\240\uff4f\241\uff4f\242\uff4f\243\uff4f\244\uff4f\245\uff4f" +
    "\246\uff4f\247\uff4f\250\uff4f\251\uff4f\252\uff4f\253\uff4f\001" +
    "\002\000\004\002\055\001\002\000\352\007\uff4c\010\uff4c" +
    "\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016\uff4c\017" +
    "\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c" +
    "\026\uff4c\027\uff4c\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070" +
    "\uff4c\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c" +
    "\077\uff4c\100\uff4c\101\uff4c\102\uff4c\103\uff4c\122\uff4c\123" +
    "\uff4c\124\uff4c\125\uff4c\126\uff4c\127\uff4c\130\uff4c\131\uff4c" +
    "\132\uff4c\133\uff4c\134\uff4c\135\uff4c\136\uff4c\137\uff4c\140" +
    "\uff4c\141\uff4c\142\uff4c\143\uff4c\144\uff4c\145\uff4c\146\uff4c" +
    "\147\uff4c\150\uff4c\151\uff4c\152\uff4c\153\uff4c\154\uff4c\155" +
    "\uff4c\156\uff4c\157\uff4c\160\uff4c\161\uff4c\162\uff4c\163\uff4c" +
    "\164\uff4c\165\uff4c\166\uff4c\167\uff4c\170\uff4c\171\uff4c\172" +
    "\uff4c\173\uff4c\174\uff4c\175\uff4c\176\uff4c\177\uff4c\200\uff4c" +
    "\201\uff4c\202\uff4c\203\uff4c\204\uff4c\205\uff4c\206\uff4c\207" +
    "\uff4c\210\uff4c\220\uff4c\221\uff4c\222\uff4c\223\uff4c\224\uff4c" +
    "\225\uff4c\226\uff4c\227\uff4c\230\uff4c\231\uff4c\232\uff4c\233" +
    "\uff4c\234\uff4c\235\uff4c\236\uff4c\237\uff4c\240\uff4c\241\uff4c" +
    "\242\uff4c\243\uff4c\244\uff4c\245\uff4c\246\uff4c\247\uff4c\250" +
    "\uff4c\251\uff4c\252\uff4c\253\uff4c\001\002\000\352\007\uff3d" +
    "\010\uff3d\011\uff3d\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016" +
    "\uff3d\017\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d" +
    "\025\uff3d\026\uff3d\027\uff3d\064\uff3d\065\uff3d\066\uff3d\067" +
    "\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074\uff3d\075\uff3d" +
    "\076\uff3d\077\uff3d\100\uff3d\101\uff3d\102\uff3d\103\uff3d\122" +
    "\uff3d\123\uff3d\124\uff3d\125\uff3d\126\uff3d\127\uff3d\130\uff3d" +
    "\131\uff3d\132\uff3d\133\uff3d\134\uff3d\135\uff3d\136\uff3d\137" +
    "\uff3d\140\uff3d\141\uff3d\142\uff3d\143\uff3d\144\uff3d\145\uff3d" +
    "\146\uff3d\147\uff3d\150\uff3d\151\uff3d\152\uff3d\153\uff3d\154" +
    "\uff3d\155\uff3d\156\uff3d\157\uff3d\160\uff3d\161\uff3d\162\uff3d" +
    "\163\uff3d\164\uff3d\165\uff3d\166\uff3d\167\uff3d\170\uff3d\171" +
    "\uff3d\172\uff3d\173\uff3d\174\uff3d\175\uff3d\176\uff3d\177\uff3d" +
    "\200\uff3d\201\uff3d\202\uff3d\203\uff3d\204\uff3d\205\uff3d\206" +
    "\uff3d\207\uff3d\210\uff3d\220\uff3d\221\uff3d\222\uff3d\223\uff3d" +
    "\224\uff3d\225\uff3d\226\uff3d\227\uff3d\230\uff3d\231\uff3d\232" +
    "\uff3d\233\uff3d\234\uff3d\235\uff3d\236\uff3d\237\uff3d\240\uff3d" +
    "\241\uff3d\242\uff3d\243\uff3d\244\uff3d\245\uff3d\246\uff3d\247" +
    "\uff3d\250\uff3d\251\uff3d\252\uff3d\253\uff3d\001\002\000\352" +
    "\007\uff49\010\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015" +
    "\uff49\016\uff49\017\uff49\020\uff49\021\uff49\022\uff49\023\uff49" +
    "\024\uff49\025\uff49\026\uff49\027\uff49\064\uff49\065\uff49\066" +
    "\uff49\067\uff49\070\uff49\071\uff49\072\uff49\073\uff49\074\uff49" +
    "\075\uff49\076\uff49\077\uff49\100\uff49\101\uff49\102\uff49\103" +
    "\uff49\122\uff49\123\uff49\124\uff49\125\uff49\126\uff49\127\uff49" +
    "\130\uff49\131\uff49\132\uff49\133\uff49\134\uff49\135\uff49\136" +
    "\uff49\137\uff49\140\uff49\141\uff49\142\uff49\143\uff49\144\uff49" +
    "\145\uff49\146\uff49\147\uff49\150\uff49\151\uff49\152\uff49\153" +
    "\uff49\154\uff49\155\uff49\156\uff49\157\uff49\160\uff49\161\uff49" +
    "\162\uff49\163\uff49\164\uff49\165\uff49\166\uff49\167\uff49\170" +
    "\uff49\171\uff49\172\uff49\173\uff49\174\uff49\175\uff49\176\uff49" +
    "\177\uff49\200\uff49\201\uff49\202\uff49\203\uff49\204\uff49\205" +
    "\uff49\206\uff49\207\uff49\210\uff49\220\uff49\221\uff49\222\uff49" +
    "\223\uff49\224\uff49\225\uff49\226\uff49\227\uff49\230\uff49\231" +
    "\uff49\232\uff49\233\uff49\234\uff49\235\uff49\236\uff49\237\uff49" +
    "\240\uff49\241\uff49\242\uff49\243\uff49\244\uff49\245\uff49\246" +
    "\uff49\247\uff49\250\uff49\251\uff49\252\uff49\253\uff49\001\002" +
    "\000\352\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102" +
    "\uffe5\103\uffe5\122\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5" +
    "\127\uffe5\130\uffe5\131\uffe5\132\uffe5\133\uffe5\134\uffe5\135" +
    "\uffe5\136\uffe5\137\uffe5\140\uffe5\141\uffe5\142\uffe5\143\uffe5" +
    "\144\uffe5\145\uffe5\146\uffe5\147\uffe5\150\uffe5\151\uffe5\152" +
    "\uffe5\153\uffe5\154\uffe5\155\uffe5\156\uffe5\157\uffe5\160\uffe5" +
    "\161\uffe5\162\uffe5\163\uffe5\164\uffe5\165\uffe5\166\uffe5\167" +
    "\uffe5\170\uffe5\171\uffe5\172\uffe5\173\uffe5\174\uffe5\175\uffe5" +
    "\176\uffe5\177\uffe5\200\uffe5\201\uffe5\202\uffe5\203\uffe5\204" +
    "\uffe5\205\uffe5\206\uffe5\207\uffe5\210\uffe5\220\uffe5\221\uffe5" +
    "\222\uffe5\223\uffe5\224\uffe5\225\uffe5\226\uffe5\227\uffe5\230" +
    "\uffe5\231\uffe5\232\uffe5\233\uffe5\234\uffe5\235\uffe5\236\uffe5" +
    "\237\uffe5\240\uffe5\241\uffe5\242\uffe5\243\uffe5\244\uffe5\245" +
    "\uffe5\246\uffe5\247\uffe5\250\uffe5\251\uffe5\252\uffe5\253\uffe5" +
    "\001\002\000\352\007\uff45\010\uff45\011\uff45\012\uff45\013" +
    "\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45" +
    "\022\uff45\023\uff45\024\uff45\025\uff45\026\uff45\027\uff45\064" +
    "\uff45\065\uff45\066\uff45\067\uff45\070\uff45\071\uff45\072\uff45" +
    "\073\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45\101" +
    "\uff45\102\uff45\103\uff45\122\uff45\123\uff45\124\uff45\125\uff45" +
    "\126\uff45\127\uff45\130\uff45\131\uff45\132\uff45\133\uff45\134" +
    "\uff45\135\uff45\136\uff45\137\uff45\140\uff45\141\uff45\142\uff45" +
    "\143\uff45\144\uff45\145\uff45\146\uff45\147\uff45\150\uff45\151" +
    "\uff45\152\uff45\153\uff45\154\uff45\155\uff45\156\uff45\157\uff45" +
    "\160\uff45\161\uff45\162\uff45\163\uff45\164\uff45\165\uff45\166" +
    "\uff45\167\uff45\170\uff45\171\uff45\172\uff45\173\uff45\174\uff45" +
    "\175\uff45\176\uff45\177\uff45\200\uff45\201\uff45\202\uff45\203" +
    "\uff45\204\uff45\205\uff45\206\uff45\207\uff45\210\uff45\220\uff45" +
    "\221\uff45\222\uff45\223\uff45\224\uff45\225\uff45\226\uff45\227" +
    "\uff45\230\uff45\231\uff45\232\uff45\233\uff45\234\uff45\235\uff45" +
    "\236\uff45\237\uff45\240\uff45\241\uff45\242\uff45\243\uff45\244" +
    "\uff45\245\uff45\246\uff45\247\uff45\250\uff45\251\uff45\252\uff45" +
    "\253\uff45\001\002\000\352\007\uff43\010\uff43\011\uff43\012" +
    "\uff43\013\uff43\014\uff43\015\uff43\016\uff43\017\uff43\020\uff43" +
    "\021\uff43\022\uff43\023\uff43\024\uff43\025\uff43\026\uff43\027" +
    "\uff43\064\uff43\065\uff43\066\uff43\067\uff43\070\uff43\071\uff43" +
    "\072\uff43\073\uff43\074\uff43\075\uff43\076\uff43\077\uff43\100" +
    "\uff43\101\uff43\102\uff43\103\uff43\122\uff43\123\uff43\124\uff43" +
    "\125\uff43\126\uff43\127\uff43\130\uff43\131\uff43\132\uff43\133" +
    "\uff43\134\uff43\135\uff43\136\uff43\137\uff43\140\uff43\141\uff43" +
    "\142\uff43\143\uff43\144\uff43\145\uff43\146\uff43\147\uff43\150" +
    "\uff43\151\uff43\152\uff43\153\uff43\154\uff43\155\uff43\156\uff43" +
    "\157\uff43\160\uff43\161\uff43\162\uff43\163\uff43\164\uff43\165" +
    "\uff43\166\uff43\167\uff43\170\uff43\171\uff43\172\uff43\173\uff43" +
    "\174\uff43\175\uff43\176\uff43\177\uff43\200\uff43\201\uff43\202" +
    "\uff43\203\uff43\204\uff43\205\uff43\206\uff43\207\uff43\210\uff43" +
    "\220\uff43\221\uff43\222\uff43\223\uff43\224\uff43\225\uff43\226" +
    "\uff43\227\uff43\230\uff43\231\uff43\232\uff43\233\uff43\234\uff43" +
    "\235\uff43\236\uff43\237\uff43\240\uff43\241\uff43\242\uff43\243" +
    "\uff43\244\uff43\245\uff43\246\uff43\247\uff43\250\uff43\251\uff43" +
    "\252\uff43\253\uff43\001\002\000\352\007\uff48\010\uff48\011" +
    "\uff48\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48" +
    "\020\uff48\021\uff48\022\uff48\023\uff48\024\uff48\025\uff48\026" +
    "\uff48\027\uff48\064\uff48\065\uff48\066\uff48\067\uff48\070\uff48" +
    "\071\uff48\072\uff48\073\uff48\074\uff48\075\uff48\076\uff48\077" +
    "\uff48\100\uff48\101\uff48\102\uff48\103\uff48\122\uff48\123\uff48" +
    "\124\uff48\125\uff48\126\uff48\127\uff48\130\uff48\131\uff48\132" +
    "\uff48\133\uff48\134\uff48\135\uff48\136\uff48\137\uff48\140\uff48" +
    "\141\uff48\142\uff48\143\uff48\144\uff48\145\uff48\146\uff48\147" +
    "\uff48\150\uff48\151\uff48\152\uff48\153\uff48\154\uff48\155\uff48" +
    "\156\uff48\157\uff48\160\uff48\161\uff48\162\uff48\163\uff48\164" +
    "\uff48\165\uff48\166\uff48\167\uff48\170\uff48\171\uff48\172\uff48" +
    "\173\uff48\174\uff48\175\uff48\176\uff48\177\uff48\200\uff48\201" +
    "\uff48\202\uff48\203\uff48\204\uff48\205\uff48\206\uff48\207\uff48" +
    "\210\uff48\220\uff48\221\uff48\222\uff48\223\uff48\224\uff48\225" +
    "\uff48\226\uff48\227\uff48\230\uff48\231\uff48\232\uff48\233\uff48" +
    "\234\uff48\235\uff48\236\uff48\237\uff48\240\uff48\241\uff48\242" +
    "\uff48\243\uff48\244\uff48\245\uff48\246\uff48\247\uff48\250\uff48" +
    "\251\uff48\252\uff48\253\uff48\001\002\000\352\007\uff4e\010" +
    "\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e\016\uff4e" +
    "\017\uff4e\020\uff4e\021\uff4e\022\uff4e\023\uff4e\024\uff4e\025" +
    "\uff4e\026\uff4e\027\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e" +
    "\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e\075\uff4e\076" +
    "\uff4e\077\uff4e\100\uff4e\101\uff4e\102\uff4e\103\uff4e\122\uff4e" +
    "\123\uff4e\124\uff4e\125\uff4e\126\uff4e\127\uff4e\130\uff4e\131" +
    "\uff4e\132\uff4e\133\uff4e\134\uff4e\135\uff4e\136\uff4e\137\uff4e" +
    "\140\uff4e\141\uff4e\142\uff4e\143\uff4e\144\uff4e\145\uff4e\146" +
    "\uff4e\147\uff4e\150\uff4e\151\uff4e\152\uff4e\153\uff4e\154\uff4e" +
    "\155\uff4e\156\uff4e\157\uff4e\160\uff4e\161\uff4e\162\uff4e\163" +
    "\uff4e\164\uff4e\165\uff4e\166\uff4e\167\uff4e\170\uff4e\171\uff4e" +
    "\172\uff4e\173\uff4e\174\uff4e\175\uff4e\176\uff4e\177\uff4e\200" +
    "\uff4e\201\uff4e\202\uff4e\203\uff4e\204\uff4e\205\uff4e\206\uff4e" +
    "\207\uff4e\210\uff4e\220\uff4e\221\uff4e\222\uff4e\223\uff4e\224" +
    "\uff4e\225\uff4e\226\uff4e\227\uff4e\230\uff4e\231\uff4e\232\uff4e" +
    "\233\uff4e\234\uff4e\235\uff4e\236\uff4e\237\uff4e\240\uff4e\241" +
    "\uff4e\242\uff4e\243\uff4e\244\uff4e\245\uff4e\246\uff4e\247\uff4e" +
    "\250\uff4e\251\uff4e\252\uff4e\253\uff4e\001\002\000\352\007" +
    "\uff46\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46" +
    "\016\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024" +
    "\uff46\025\uff46\026\uff46\027\uff46\064\uff46\065\uff46\066\uff46" +
    "\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075" +
    "\uff46\076\uff46\077\uff46\100\uff46\101\uff46\102\uff46\103\uff46" +
    "\122\uff46\123\uff46\124\uff46\125\uff46\126\uff46\127\uff46\130" +
    "\uff46\131\uff46\132\uff46\133\uff46\134\uff46\135\uff46\136\uff46" +
    "\137\uff46\140\uff46\141\uff46\142\uff46\143\uff46\144\uff46\145" +
    "\uff46\146\uff46\147\uff46\150\uff46\151\uff46\152\uff46\153\uff46" +
    "\154\uff46\155\uff46\156\uff46\157\uff46\160\uff46\161\uff46\162" +
    "\uff46\163\uff46\164\uff46\165\uff46\166\uff46\167\uff46\170\uff46" +
    "\171\uff46\172\uff46\173\uff46\174\uff46\175\uff46\176\uff46\177" +
    "\uff46\200\uff46\201\uff46\202\uff46\203\uff46\204\uff46\205\uff46" +
    "\206\uff46\207\uff46\210\uff46\220\uff46\221\uff46\222\uff46\223" +
    "\uff46\224\uff46\225\uff46\226\uff46\227\uff46\230\uff46\231\uff46" +
    "\232\uff46\233\uff46\234\uff46\235\uff46\236\uff46\237\uff46\240" +
    "\uff46\241\uff46\242\uff46\243\uff46\244\uff46\245\uff46\246\uff46" +
    "\247\uff46\250\uff46\251\uff46\252\uff46\253\uff46\001\002\000" +
    "\352\007\uff42\010\uff42\011\uff42\012\uff42\013\uff42\014\uff42" +
    "\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023" +
    "\uff42\024\uff42\025\uff42\026\uff42\027\uff42\064\uff42\065\uff42" +
    "\066\uff42\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074" +
    "\uff42\075\uff42\076\uff42\077\uff42\100\uff42\101\uff42\102\uff42" +
    "\103\uff42\122\uff42\123\uff42\124\uff42\125\uff42\126\uff42\127" +
    "\uff42\130\uff42\131\uff42\132\uff42\133\uff42\134\uff42\135\uff42" +
    "\136\uff42\137\uff42\140\uff42\141\uff42\142\uff42\143\uff42\144" +
    "\uff42\145\uff42\146\uff42\147\uff42\150\uff42\151\uff42\152\uff42" +
    "\153\uff42\154\uff42\155\uff42\156\uff42\157\uff42\160\uff42\161" +
    "\uff42\162\uff42\163\uff42\164\uff42\165\uff42\166\uff42\167\uff42" +
    "\170\uff42\171\uff42\172\uff42\173\uff42\174\uff42\175\uff42\176" +
    "\uff42\177\uff42\200\uff42\201\uff42\202\uff42\203\uff42\204\uff42" +
    "\205\uff42\206\uff42\207\uff42\210\uff42\220\uff42\221\uff42\222" +
    "\uff42\223\uff42\224\uff42\225\uff42\226\uff42\227\uff42\230\uff42" +
    "\231\uff42\232\uff42\233\uff42\234\uff42\235\uff42\236\uff42\237" +
    "\uff42\240\uff42\241\uff42\242\uff42\243\uff42\244\uff42\245\uff42" +
    "\246\uff42\247\uff42\250\uff42\251\uff42\252\uff42\253\uff42\001" +
    "\002\000\352\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36" +
    "\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022" +
    "\uff36\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\064\uff36" +
    "\065\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36\073" +
    "\uff36\074\uff36\075\uff36\076\uff36\077\uff36\100\uff36\101\uff36" +
    "\102\uff36\103\uff36\122\uff36\123\uff36\124\uff36\125\uff36\126" +
    "\uff36\127\uff36\130\uff36\131\uff36\132\uff36\133\uff36\134\uff36" +
    "\135\uff36\136\uff36\137\uff36\140\uff36\141\uff36\142\uff36\143" +
    "\uff36\144\uff36\145\uff36\146\uff36\147\uff36\150\uff36\151\uff36" +
    "\152\uff36\153\uff36\154\uff36\155\uff36\156\uff36\157\uff36\160" +
    "\uff36\161\uff36\162\uff36\163\uff36\164\uff36\165\uff36\166\uff36" +
    "\167\uff36\170\uff36\171\uff36\172\uff36\173\uff36\174\uff36\175" +
    "\uff36\176\uff36\177\uff36\200\uff36\201\uff36\202\uff36\203\uff36" +
    "\204\uff36\205\uff36\206\uff36\207\uff36\210\uff36\220\uff36\221" +
    "\uff36\222\uff36\223\uff36\224\uff36\225\uff36\226\uff36\227\uff36" +
    "\230\uff36\231\uff36\232\uff36\233\uff36\234\uff36\235\uff36\236" +
    "\uff36\237\uff36\240\uff36\241\uff36\242\uff36\243\uff36\244\uff36" +
    "\245\uff36\246\uff36\247\uff36\250\uff36\251\uff36\252\uff36\253" +
    "\uff36\001\002\000\352\007\uff53\010\uff53\011\uff53\012\uff53" +
    "\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021" +
    "\uff53\022\uff53\023\uff53\024\uff53\025\uff53\026\uff53\027\uff53" +
    "\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53\071\uff53\072" +
    "\uff53\073\uff53\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53" +
    "\101\uff53\102\uff53\103\uff53\122\uff53\123\uff53\124\uff53\125" +
    "\uff53\126\uff53\127\uff53\130\uff53\131\uff53\132\uff53\133\uff53" +
    "\134\uff53\135\uff53\136\uff53\137\uff53\140\uff53\141\uff53\142" +
    "\uff53\143\uff53\144\uff53\145\uff53\146\uff53\147\uff53\150\uff53" +
    "\151\uff53\152\uff53\153\uff53\154\uff53\155\uff53\156\uff53\157" +
    "\uff53\160\uff53\161\uff53\162\uff53\163\uff53\164\uff53\165\uff53" +
    "\166\uff53\167\uff53\170\uff53\171\uff53\172\uff53\173\uff53\174" +
    "\uff53\175\uff53\176\uff53\177\uff53\200\uff53\201\uff53\202\uff53" +
    "\203\uff53\204\uff53\205\uff53\206\uff53\207\uff53\210\uff53\220" +
    "\uff53\221\uff53\222\uff53\223\uff53\224\uff53\225\uff53\226\uff53" +
    "\227\uff53\230\uff53\231\uff53\232\uff53\233\uff53\234\uff53\235" +
    "\uff53\236\uff53\237\uff53\240\uff53\241\uff53\242\uff53\243\uff53" +
    "\244\uff53\245\uff53\246\uff53\247\uff53\250\uff53\251\uff53\252" +
    "\uff53\253\uff53\001\002\000\352\007\uff3c\010\uff3c\011\uff3c" +
    "\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c" +
    "\027\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071" +
    "\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\076\uff3c\077\uff3c" +
    "\100\uff3c\101\uff3c\102\uff3c\103\uff3c\122\uff3c\123\uff3c\124" +
    "\uff3c\125\uff3c\126\uff3c\127\uff3c\130\uff3c\131\uff3c\132\uff3c" +
    "\133\uff3c\134\uff3c\135\uff3c\136\uff3c\137\uff3c\140\uff3c\141" +
    "\uff3c\142\uff3c\143\uff3c\144\uff3c\145\uff3c\146\uff3c\147\uff3c" +
    "\150\uff3c\151\uff3c\152\uff3c\153\uff3c\154\uff3c\155\uff3c\156" +
    "\uff3c\157\uff3c\160\uff3c\161\uff3c\162\uff3c\163\uff3c\164\uff3c" +
    "\165\uff3c\166\uff3c\167\uff3c\170\uff3c\171\uff3c\172\uff3c\173" +
    "\uff3c\174\uff3c\175\uff3c\176\uff3c\177\uff3c\200\uff3c\201\uff3c" +
    "\202\uff3c\203\uff3c\204\uff3c\205\uff3c\206\uff3c\207\uff3c\210" +
    "\uff3c\220\uff3c\221\uff3c\222\uff3c\223\uff3c\224\uff3c\225\uff3c" +
    "\226\uff3c\227\uff3c\230\uff3c\231\uff3c\232\uff3c\233\uff3c\234" +
    "\uff3c\235\uff3c\236\uff3c\237\uff3c\240\uff3c\241\uff3c\242\uff3c" +
    "\243\uff3c\244\uff3c\245\uff3c\246\uff3c\247\uff3c\250\uff3c\251" +
    "\uff3c\252\uff3c\253\uff3c\001\002\000\352\007\uff4b\010\uff4b" +
    "\011\uff4b\012\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017" +
    "\uff4b\020\uff4b\021\uff4b\022\uff4b\023\uff4b\024\uff4b\025\uff4b" +
    "\026\uff4b\027\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070" +
    "\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076\uff4b" +
    "\077\uff4b\100\uff4b\101\uff4b\102\uff4b\103\uff4b\122\uff4b\123" +
    "\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b\130\uff4b\131\uff4b" +
    "\132\uff4b\133\uff4b\134\uff4b\135\uff4b\136\uff4b\137\uff4b\140" +
    "\uff4b\141\uff4b\142\uff4b\143\uff4b\144\uff4b\145\uff4b\146\uff4b" +
    "\147\uff4b\150\uff4b\151\uff4b\152\uff4b\153\uff4b\154\uff4b\155" +
    "\uff4b\156\uff4b\157\uff4b\160\uff4b\161\uff4b\162\uff4b\163\uff4b" +
    "\164\uff4b\165\uff4b\166\uff4b\167\uff4b\170\uff4b\171\uff4b\172" +
    "\uff4b\173\uff4b\174\uff4b\175\uff4b\176\uff4b\177\uff4b\200\uff4b" +
    "\201\uff4b\202\uff4b\203\uff4b\204\uff4b\205\uff4b\206\uff4b\207" +
    "\uff4b\210\uff4b\220\uff4b\221\uff4b\222\uff4b\223\uff4b\224\uff4b" +
    "\225\uff4b\226\uff4b\227\uff4b\230\uff4b\231\uff4b\232\uff4b\233" +
    "\uff4b\234\uff4b\235\uff4b\236\uff4b\237\uff4b\240\uff4b\241\uff4b" +
    "\242\uff4b\243\uff4b\244\uff4b\245\uff4b\246\uff4b\247\uff4b\250" +
    "\uff4b\251\uff4b\252\uff4b\253\uff4b\001\002\000\352\007\uff51" +
    "\010\uff51\011\uff51\012\uff51\013\uff51\014\uff51\015\uff51\016" +
    "\uff51\017\uff51\020\uff51\021\uff51\022\uff51\023\uff51\024\uff51" +
    "\025\uff51\026\uff51\027\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\070\uff51\071\uff51\072\uff51\073\uff51\074\uff51\075\uff51" +
    "\076\uff51\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51\122" +
    "\uff51\123\uff51\124\uff51\125\uff51\126\uff51\127\uff51\130\uff51" +
    "\131\uff51\132\uff51\133\uff51\134\uff51\135\uff51\136\uff51\137" +
    "\uff51\140\uff51\141\uff51\142\uff51\143\uff51\144\uff51\145\uff51" +
    "\146\uff51\147\uff51\150\uff51\151\uff51\152\uff51\153\uff51\154" +
    "\uff51\155\uff51\156\uff51\157\uff51\160\uff51\161\uff51\162\uff51" +
    "\163\uff51\164\uff51\165\uff51\166\uff51\167\uff51\170\uff51\171" +
    "\uff51\172\uff51\173\uff51\174\uff51\175\uff51\176\uff51\177\uff51" +
    "\200\uff51\201\uff51\202\uff51\203\uff51\204\uff51\205\uff51\206" +
    "\uff51\207\uff51\210\uff51\220\uff51\221\uff51\222\uff51\223\uff51" +
    "\224\uff51\225\uff51\226\uff51\227\uff51\230\uff51\231\uff51\232" +
    "\uff51\233\uff51\234\uff51\235\uff51\236\uff51\237\uff51\240\uff51" +
    "\241\uff51\242\uff51\243\uff51\244\uff51\245\uff51\246\uff51\247" +
    "\uff51\250\uff51\251\uff51\252\uff51\253\uff51\001\002\000\352" +
    "\007\uff47\010\uff47\011\uff47\012\uff47\013\uff47\014\uff47\015" +
    "\uff47\016\uff47\017\uff47\020\uff47\021\uff47\022\uff47\023\uff47" +
    "\024\uff47\025\uff47\026\uff47\027\uff47\064\uff47\065\uff47\066" +
    "\uff47\067\uff47\070\uff47\071\uff47\072\uff47\073\uff47\074\uff47" +
    "\075\uff47\076\uff47\077\uff47\100\uff47\101\uff47\102\uff47\103" +
    "\uff47\122\uff47\123\uff47\124\uff47\125\uff47\126\uff47\127\uff47" +
    "\130\uff47\131\uff47\132\uff47\133\uff47\134\uff47\135\uff47\136" +
    "\uff47\137\uff47\140\uff47\141\uff47\142\uff47\143\uff47\144\uff47" +
    "\145\uff47\146\uff47\147\uff47\150\uff47\151\uff47\152\uff47\153" +
    "\uff47\154\uff47\155\uff47\156\uff47\157\uff47\160\uff47\161\uff47" +
    "\162\uff47\163\uff47\164\uff47\165\uff47\166\uff47\167\uff47\170" +
    "\uff47\171\uff47\172\uff47\173\uff47\174\uff47\175\uff47\176\uff47" +
    "\177\uff47\200\uff47\201\uff47\202\uff47\203\uff47\204\uff47\205" +
    "\uff47\206\uff47\207\uff47\210\uff47\220\uff47\221\uff47\222\uff47" +
    "\223\uff47\224\uff47\225\uff47\226\uff47\227\uff47\230\uff47\231" +
    "\uff47\232\uff47\233\uff47\234\uff47\235\uff47\236\uff47\237\uff47" +
    "\240\uff47\241\uff47\242\uff47\243\uff47\244\uff47\245\uff47\246" +
    "\uff47\247\uff47\250\uff47\251\uff47\252\uff47\253\uff47\001\002" +
    "\000\352\007\uff54\010\uff54\011\uff54\012\uff54\013\uff54\014" +
    "\uff54\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54" +
    "\023\uff54\024\uff54\025\uff54\026\uff54\027\uff54\064\uff54\065" +
    "\uff54\066\uff54\067\uff54\070\uff54\071\uff54\072\uff54\073\uff54" +
    "\074\uff54\075\uff54\076\uff54\077\uff54\100\uff54\101\uff54\102" +
    "\uff54\103\uff54\122\uff54\123\uff54\124\uff54\125\uff54\126\uff54" +
    "\127\uff54\130\uff54\131\uff54\132\uff54\133\uff54\134\uff54\135" +
    "\uff54\136\uff54\137\uff54\140\uff54\141\uff54\142\uff54\143\uff54" +
    "\144\uff54\145\uff54\146\uff54\147\uff54\150\uff54\151\uff54\152" +
    "\uff54\153\uff54\154\uff54\155\uff54\156\uff54\157\uff54\160\uff54" +
    "\161\uff54\162\uff54\163\uff54\164\uff54\165\uff54\166\uff54\167" +
    "\uff54\170\uff54\171\uff54\172\uff54\173\uff54\174\uff54\175\uff54" +
    "\176\uff54\177\uff54\200\uff54\201\uff54\202\uff54\203\uff54\204" +
    "\uff54\205\uff54\206\uff54\207\uff54\210\uff54\220\uff54\221\uff54" +
    "\222\uff54\223\uff54\224\uff54\225\uff54\226\uff54\227\uff54\230" +
    "\uff54\231\uff54\232\uff54\233\uff54\234\uff54\235\uff54\236\uff54" +
    "\237\uff54\240\uff54\241\uff54\242\uff54\243\uff54\244\uff54\245" +
    "\uff54\246\uff54\247\uff54\250\uff54\251\uff54\252\uff54\253\uff54" +
    "\001\002\000\352\007\uff39\010\uff39\011\uff39\012\uff39\013" +
    "\uff39\014\uff39\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39" +
    "\022\uff39\023\uff39\024\uff39\025\uff39\026\uff39\027\uff39\064" +
    "\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072\uff39" +
    "\073\uff39\074\uff39\075\uff39\076\uff39\077\uff39\100\uff39\101" +
    "\uff39\102\uff39\103\uff39\122\uff39\123\uff39\124\uff39\125\uff39" +
    "\126\uff39\127\uff39\130\uff39\131\uff39\132\uff39\133\uff39\134" +
    "\uff39\135\uff39\136\uff39\137\uff39\140\uff39\141\uff39\142\uff39" +
    "\143\uff39\144\uff39\145\uff39\146\uff39\147\uff39\150\uff39\151" +
    "\uff39\152\uff39\153\uff39\154\uff39\155\uff39\156\uff39\157\uff39" +
    "\160\uff39\161\uff39\162\uff39\163\uff39\164\uff39\165\uff39\166" +
    "\uff39\167\uff39\170\uff39\171\uff39\172\uff39\173\uff39\174\uff39" +
    "\175\uff39\176\uff39\177\uff39\200\uff39\201\uff39\202\uff39\203" +
    "\uff39\204\uff39\205\uff39\206\uff39\207\uff39\210\uff39\220\uff39" +
    "\221\uff39\222\uff39\223\uff39\224\uff39\225\uff39\226\uff39\227" +
    "\uff39\230\uff39\231\uff39\232\uff39\233\uff39\234\uff39\235\uff39" +
    "\236\uff39\237\uff39\240\uff39\241\uff39\242\uff39\243\uff39\244" +
    "\uff39\245\uff39\246\uff39\247\uff39\250\uff39\251\uff39\252\uff39" +
    "\253\uff39\001\002\000\352\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4" +
    "\072\uffe4\073\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\103\uffe4\122\uffe4\123\uffe4\124\uffe4" +
    "\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\133" +
    "\uffe4\134\uffe4\135\uffe4\136\uffe4\137\uffe4\140\uffe4\141\uffe4" +
    "\142\uffe4\143\uffe4\144\uffe4\145\uffe4\146\uffe4\147\uffe4\150" +
    "\uffe4\151\uffe4\152\uffe4\153\uffe4\154\uffe4\155\uffe4\156\uffe4" +
    "\157\uffe4\160\uffe4\161\uffe4\162\uffe4\163\uffe4\164\uffe4\165" +
    "\uffe4\166\uffe4\167\uffe4\170\uffe4\171\uffe4\172\uffe4\173\uffe4" +
    "\174\uffe4\175\uffe4\176\uffe4\177\uffe4\200\uffe4\201\uffe4\202" +
    "\uffe4\203\uffe4\204\uffe4\205\uffe4\206\uffe4\207\uffe4\210\uffe4" +
    "\220\uffe4\221\uffe4\222\uffe4\223\uffe4\224\uffe4\225\uffe4\226" +
    "\uffe4\227\uffe4\230\uffe4\231\uffe4\232\uffe4\233\uffe4\234\uffe4" +
    "\235\uffe4\236\uffe4\237\uffe4\240\uffe4\241\uffe4\242\uffe4\243" +
    "\uffe4\244\uffe4\245\uffe4\246\uffe4\247\uffe4\250\uffe4\251\uffe4" +
    "\252\uffe4\253\uffe4\001\002\000\352\007\uff31\010\uff31\011" +
    "\uff31\012\uff31\013\uff31\014\uff31\015\uff31\016\uff31\017\uff31" +
    "\020\uff31\021\uff31\022\uff31\023\uff31\024\uff31\025\uff31\026" +
    "\uff31\027\uff31\064\uff31\065\uff31\066\uff31\067\uff31\070\uff31" +
    "\071\uff31\072\uff31\073\uff31\074\uff31\075\uff31\076\uff31\077" +
    "\uff31\100\uff31\101\uff31\102\uff31\103\uff31\122\uff31\123\uff31" +
    "\124\uff31\125\uff31\126\uff31\127\uff31\130\uff31\131\uff31\132" +
    "\uff31\133\uff31\134\uff31\135\uff31\136\uff31\137\uff31\140\uff31" +
    "\141\uff31\142\uff31\143\uff31\144\uff31\145\uff31\146\uff31\147" +
    "\uff31\150\uff31\151\uff31\152\uff31\153\uff31\154\uff31\155\uff31" +
    "\156\uff31\157\uff31\160\uff31\161\uff31\162\uff31\163\uff31\164" +
    "\uff31\165\uff31\166\uff31\167\uff31\170\uff31\171\uff31\172\uff31" +
    "\173\uff31\174\uff31\175\uff31\176\uff31\177\uff31\200\uff31\201" +
    "\uff31\202\uff31\203\uff31\204\uff31\205\uff31\206\uff31\207\uff31" +
    "\210\uff31\220\uff31\221\uff31\222\uff31\223\uff31\224\uff31\225" +
    "\uff31\226\uff31\227\uff31\230\uff31\231\uff31\232\uff31\233\uff31" +
    "\234\uff31\235\uff31\236\uff31\237\uff31\240\uff31\241\uff31\242" +
    "\uff31\243\uff31\244\uff31\245\uff31\246\uff31\247\uff31\250\uff31" +
    "\251\uff31\252\uff31\253\uff31\001\002\000\352\007\uff41\010" +
    "\uff41\011\uff41\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41" +
    "\017\uff41\020\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025" +
    "\uff41\026\uff41\027\uff41\064\uff41\065\uff41\066\uff41\067\uff41" +
    "\070\uff41\071\uff41\072\uff41\073\uff41\074\uff41\075\uff41\076" +
    "\uff41\077\uff41\100\uff41\101\uff41\102\uff41\103\uff41\122\uff41" +
    "\123\uff41\124\uff41\125\uff41\126\uff41\127\uff41\130\uff41\131" +
    "\uff41\132\uff41\133\uff41\134\uff41\135\uff41\136\uff41\137\uff41" +
    "\140\uff41\141\uff41\142\uff41\143\uff41\144\uff41\145\uff41\146" +
    "\uff41\147\uff41\150\uff41\151\uff41\152\uff41\153\uff41\154\uff41" +
    "\155\uff41\156\uff41\157\uff41\160\uff41\161\uff41\162\uff41\163" +
    "\uff41\164\uff41\165\uff41\166\uff41\167\uff41\170\uff41\171\uff41" +
    "\172\uff41\173\uff41\174\uff41\175\uff41\176\uff41\177\uff41\200" +
    "\uff41\201\uff41\202\uff41\203\uff41\204\uff41\205\uff41\206\uff41" +
    "\207\uff41\210\uff41\220\uff41\221\uff41\222\uff41\223\uff41\224" +
    "\uff41\225\uff41\226\uff41\227\uff41\230\uff41\231\uff41\232\uff41" +
    "\233\uff41\234\uff41\235\uff41\236\uff41\237\uff41\240\uff41\241" +
    "\uff41\242\uff41\243\uff41\244\uff41\245\uff41\246\uff41\247\uff41" +
    "\250\uff41\251\uff41\252\uff41\253\uff41\001\002\000\352\007" +
    "\uff4d\010\uff4d\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d" +
    "\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023\uff4d\024" +
    "\uff4d\025\uff4d\026\uff4d\027\uff4d\064\uff4d\065\uff4d\066\uff4d" +
    "\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073\uff4d\074\uff4d\075" +
    "\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d\102\uff4d\103\uff4d" +
    "\122\uff4d\123\uff4d\124\uff4d\125\uff4d\126\uff4d\127\uff4d\130" +
    "\uff4d\131\uff4d\132\uff4d\133\uff4d\134\uff4d\135\uff4d\136\uff4d" +
    "\137\uff4d\140\uff4d\141\uff4d\142\uff4d\143\uff4d\144\uff4d\145" +
    "\uff4d\146\uff4d\147\uff4d\150\uff4d\151\uff4d\152\uff4d\153\uff4d" +
    "\154\uff4d\155\uff4d\156\uff4d\157\uff4d\160\uff4d\161\uff4d\162" +
    "\uff4d\163\uff4d\164\uff4d\165\uff4d\166\uff4d\167\uff4d\170\uff4d" +
    "\171\uff4d\172\uff4d\173\uff4d\174\uff4d\175\uff4d\176\uff4d\177" +
    "\uff4d\200\uff4d\201\uff4d\202\uff4d\203\uff4d\204\uff4d\205\uff4d" +
    "\206\uff4d\207\uff4d\210\uff4d\220\uff4d\221\uff4d\222\uff4d\223" +
    "\uff4d\224\uff4d\225\uff4d\226\uff4d\227\uff4d\230\uff4d\231\uff4d" +
    "\232\uff4d\233\uff4d\234\uff4d\235\uff4d\236\uff4d\237\uff4d\240" +
    "\uff4d\241\uff4d\242\uff4d\243\uff4d\244\uff4d\245\uff4d\246\uff4d" +
    "\247\uff4d\250\uff4d\251\uff4d\252\uff4d\253\uff4d\001\002\000" +
    "\004\002\000\001\002\000\146\002\uffca\254\uffca\255\uffca" +
    "\256\uffca\257\uffca\260\uffca\261\uffca\262\uffca\263\uffca\264" +
    "\uffca\265\uffca\266\uffca\267\uffca\270\uffca\271\uffca\272\uffca" +
    "\273\uffca\274\uffca\275\uffca\276\uffca\277\uffca\300\uffca\301" +
    "\uffca\302\uffca\303\uffca\304\uffca\305\uffca\306\uffca\307\uffca" +
    "\310\uffca\311\uffca\312\uffca\313\uffca\314\uffca\315\uffca\316" +
    "\uffca\317\uffca\320\uffca\321\uffca\322\uffca\323\uffca\324\uffca" +
    "\325\uffca\326\uffca\327\uffca\330\uffca\331\uffca\332\uffca\333" +
    "\uffca\334\uffca\001\002\000\146\002\uffae\254\uffae\255\uffae" +
    "\256\uffae\257\uffae\260\uffae\261\uffae\262\uffae\263\uffae\264" +
    "\uffae\265\uffae\266\uffae\267\uffae\270\uffae\271\uffae\272\uffae" +
    "\273\uffae\274\uffae\275\uffae\276\uffae\277\uffae\300\uffae\301" +
    "\uffae\302\uffae\303\uffae\304\uffae\305\uffae\306\uffae\307\uffae" +
    "\310\uffae\311\uffae\312\uffae\313\uffae\314\uffae\315\uffae\316" +
    "\uffae\317\uffae\320\uffae\321\uffae\322\uffae\323\uffae\324\uffae" +
    "\325\uffae\326\uffae\327\uffae\330\uffae\331\uffae\332\uffae\333" +
    "\uffae\334\uffae\001\002\000\146\002\uffb8\254\uffb8\255\uffb8" +
    "\256\uffb8\257\uffb8\260\uffb8\261\uffb8\262\uffb8\263\uffb8\264" +
    "\uffb8\265\uffb8\266\uffb8\267\uffb8\270\uffb8\271\uffb8\272\uffb8" +
    "\273\uffb8\274\uffb8\275\uffb8\276\uffb8\277\uffb8\300\uffb8\301" +
    "\uffb8\302\uffb8\303\uffb8\304\uffb8\305\uffb8\306\uffb8\307\uffb8" +
    "\310\uffb8\311\uffb8\312\uffb8\313\uffb8\314\uffb8\315\uffb8\316" +
    "\uffb8\317\uffb8\320\uffb8\321\uffb8\322\uffb8\323\uffb8\324\uffb8" +
    "\325\uffb8\326\uffb8\327\uffb8\330\uffb8\331\uffb8\332\uffb8\333" +
    "\uffb8\334\uffb8\001\002\000\004\002\uff8a\001\002\000\146" +
    "\002\uffff\254\uffdc\255\uffdc\256\uffdc\257\uffdc\260\uffdc\261" +
    "\uffdc\262\uffdc\263\uffdc\264\uffdc\265\uffdc\266\uffdc\267\uffdc" +
    "\270\uffdc\271\uffdc\272\uffdc\273\uffdc\274\uffdc\275\uffdc\276" +
    "\uffdc\277\uffdc\300\uffdc\301\uffdc\302\uffdc\303\uffdc\304\uffdc" +
    "\305\uffdc\306\uffdc\307\uffdc\310\uffdc\311\uffdc\312\uffdc\313" +
    "\uffdc\314\uffdc\315\uffdc\316\uffdc\317\uffdc\320\uffdc\321\uffdc" +
    "\322\uffdc\323\uffdc\324\uffdc\325\uffdc\326\uffdc\327\uffdc\330" +
    "\uffdc\331\uffdc\332\uffdc\333\uffdc\334\uffdc\001\002\000\146" +
    "\002\uff29\254\uff29\255\uff29\256\uff29\257\uff29\260\uff29\261" +
    "\uff29\262\uff29\263\uff29\264\uff29\265\uff29\266\uff29\267\uff29" +
    "\270\uff29\271\uff29\272\uff29\273\uff29\274\uff29\275\uff29\276" +
    "\uff29\277\uff29\300\uff29\301\uff29\302\uff29\303\uff29\304\uff29" +
    "\305\uff29\306\uff29\307\uff29\310\uff29\311\uff29\312\uff29\313" +
    "\uff29\314\uff29\315\uff29\316\uff29\317\uff29\320\uff29\321\uff29" +
    "\322\uff29\323\uff29\324\uff29\325\uff29\326\uff29\327\uff29\330" +
    "\uff29\331\uff29\332\uff29\333\uff29\334\uff29\001\002\000\146" +
    "\002\uffa8\254\uffa8\255\uffa8\256\uffa8\257\uffa8\260\uffa8\261" +
    "\uffa8\262\uffa8\263\uffa8\264\uffa8\265\uffa8\266\uffa8\267\uffa8" +
    "\270\uffa8\271\uffa8\272\uffa8\273\uffa8\274\uffa8\275\uffa8\276" +
    "\uffa8\277\uffa8\300\uffa8\301\uffa8\302\uffa8\303\uffa8\304\uffa8" +
    "\305\uffa8\306\uffa8\307\uffa8\310\uffa8\311\uffa8\312\uffa8\313" +
    "\uffa8\314\uffa8\315\uffa8\316\uffa8\317\uffa8\320\uffa8\321\uffa8" +
    "\322\uffa8\323\uffa8\324\uffa8\325\uffa8\326\uffa8\327\uffa8\330" +
    "\uffa8\331\uffa8\332\uffa8\333\uffa8\334\uffa8\001\002\000\146" +
    "\002\uffb4\254\uffb4\255\uffb4\256\uffb4\257\uffb4\260\uffb4\261" +
    "\uffb4\262\uffb4\263\uffb4\264\uffb4\265\uffb4\266\uffb4\267\uffb4" +
    "\270\uffb4\271\uffb4\272\uffb4\273\uffb4\274\uffb4\275\uffb4\276" +
    "\uffb4\277\uffb4\300\uffb4\301\uffb4\302\uffb4\303\uffb4\304\uffb4" +
    "\305\uffb4\306\uffb4\307\uffb4\310\uffb4\311\uffb4\312\uffb4\313" +
    "\uffb4\314\uffb4\315\uffb4\316\uffb4\317\uffb4\320\uffb4\321\uffb4" +
    "\322\uffb4\323\uffb4\324\uffb4\325\uffb4\326\uffb4\327\uffb4\330" +
    "\uffb4\331\uffb4\332\uffb4\333\uffb4\334\uffb4\001\002\000\004" +
    "\002\uff90\001\002\000\146\002\uffa2\254\uffa2\255\uffa2\256" +
    "\uffa2\257\uffa2\260\uffa2\261\uffa2\262\uffa2\263\uffa2\264\uffa2" +
    "\265\uffa2\266\uffa2\267\uffa2\270\uffa2\271\uffa2\272\uffa2\273" +
    "\uffa2\274\uffa2\275\uffa2\276\uffa2\277\uffa2\300\uffa2\301\uffa2" +
    "\302\uffa2\303\uffa2\304\uffa2\305\uffa2\306\uffa2\307\uffa2\310" +
    "\uffa2\311\uffa2\312\uffa2\313\uffa2\314\uffa2\315\uffa2\316\uffa2" +
    "\317\uffa2\320\uffa2\321\uffa2\322\uffa2\323\uffa2\324\uffa2\325" +
    "\uffa2\326\uffa2\327\uffa2\330\uffa2\331\uffa2\332\uffa2\333\uffa2" +
    "\334\uffa2\001\002\000\004\002\uff91\001\002\000\004\002" +
    "\uff9a\001\002\000\146\002\uff1f\254\uff1f\255\uff1f\256\uff1f" +
    "\257\uff1f\260\uff1f\261\uff1f\262\uff1f\263\uff1f\264\uff1f\265" +
    "\uff1f\266\uff1f\267\uff1f\270\uff1f\271\uff1f\272\uff1f\273\uff1f" +
    "\274\uff1f\275\uff1f\276\uff1f\277\uff1f\300\uff1f\301\uff1f\302" +
    "\uff1f\303\uff1f\304\uff1f\305\uff1f\306\uff1f\307\uff1f\310\uff1f" +
    "\311\uff1f\312\uff1f\313\uff1f\314\uff1f\315\uff1f\316\uff1f\317" +
    "\uff1f\320\uff1f\321\uff1f\322\uff1f\323\uff1f\324\uff1f\325\uff1f" +
    "\326\uff1f\327\uff1f\330\uff1f\331\uff1f\332\uff1f\333\uff1f\334" +
    "\uff1f\001\002\000\004\002\uffa1\001\002\000\004\002\uffc2" +
    "\001\002\000\144\254\uffdf\255\uffdf\256\uffdf\257\uffdf\260" +
    "\uffdf\261\uffdf\262\uffdf\263\uffdf\264\uffdf\265\uffdf\266\uffdf" +
    "\267\uffdf\270\uffdf\271\uffdf\272\uffdf\273\uffdf\274\uffdf\275" +
    "\uffdf\276\uffdf\277\uffdf\300\uffdf\301\uffdf\302\uffdf\303\uffdf" +
    "\304\uffdf\305\uffdf\306\uffdf\307\uffdf\310\uffdf\311\uffdf\312" +
    "\uffdf\313\uffdf\314\uffdf\315\uffdf\316\uffdf\317\uffdf\320\uffdf" +
    "\321\uffdf\322\uffdf\323\uffdf\324\uffdf\325\uffdf\326\uffdf\327" +
    "\uffdf\330\uffdf\331\uffdf\332\uffdf\333\uffdf\334\uffdf\001\002" +
    "\000\146\002\uffb6\254\uffb6\255\uffb6\256\uffb6\257\uffb6\260" +
    "\uffb6\261\uffb6\262\uffb6\263\uffb6\264\uffb6\265\uffb6\266\uffb6" +
    "\267\uffb6\270\uffb6\271\uffb6\272\uffb6\273\uffb6\274\uffb6\275" +
    "\uffb6\276\uffb6\277\uffb6\300\uffb6\301\uffb6\302\uffb6\303\uffb6" +
    "\304\uffb6\305\uffb6\306\uffb6\307\uffb6\310\uffb6\311\uffb6\312" +
    "\uffb6\313\uffb6\314\uffb6\315\uffb6\316\uffb6\317\uffb6\320\uffb6" +
    "\321\uffb6\322\uffb6\323\uffb6\324\uffb6\325\uffb6\326\uffb6\327" +
    "\uffb6\330\uffb6\331\uffb6\332\uffb6\333\uffb6\334\uffb6\001\002" +
    "\000\146\002\uff1c\254\uff1c\255\uff1c\256\uff1c\257\uff1c\260" +
    "\uff1c\261\uff1c\262\uff1c\263\uff1c\264\uff1c\265\uff1c\266\uff1c" +
    "\267\uff1c\270\uff1c\271\uff1c\272\uff1c\273\uff1c\274\uff1c\275" +
    "\uff1c\276\uff1c\277\uff1c\300\uff1c\301\uff1c\302\uff1c\303\uff1c" +
    "\304\uff1c\305\uff1c\306\uff1c\307\uff1c\310\uff1c\311\uff1c\312" +
    "\uff1c\313\uff1c\314\uff1c\315\uff1c\316\uff1c\317\uff1c\320\uff1c" +
    "\321\uff1c\322\uff1c\323\uff1c\324\uff1c\325\uff1c\326\uff1c\327" +
    "\uff1c\330\uff1c\331\uff1c\332\uff1c\333\uff1c\334\uff1c\001\002" +
    "\000\004\002\uffc4\001\002\000\146\002\uffd1\254\uffd1\255" +
    "\uffd1\256\uffd1\257\uffd1\260\uffd1\261\uffd1\262\uffd1\263\uffd1" +
    "\264\uffd1\265\uffd1\266\uffd1\267\uffd1\270\uffd1\271\uffd1\272" +
    "\uffd1\273\uffd1\274\uffd1\275\uffd1\276\uffd1\277\uffd1\300\uffd1" +
    "\301\uffd1\302\uffd1\303\uffd1\304\uffd1\305\uffd1\306\uffd1\307" +
    "\uffd1\310\uffd1\311\uffd1\312\uffd1\313\uffd1\314\uffd1\315\uffd1" +
    "\316\uffd1\317\uffd1\320\uffd1\321\uffd1\322\uffd1\323\uffd1\324" +
    "\uffd1\325\uffd1\326\uffd1\327\uffd1\330\uffd1\331\uffd1\332\uffd1" +
    "\333\uffd1\334\uffd1\001\002\000\146\002\uffcd\254\uffcd\255" +
    "\uffcd\256\uffcd\257\uffcd\260\uffcd\261\uffcd\262\uffcd\263\uffcd" +
    "\264\uffcd\265\uffcd\266\uffcd\267\uffcd\270\uffcd\271\uffcd\272" +
    "\uffcd\273\uffcd\274\uffcd\275\uffcd\276\uffcd\277\uffcd\300\uffcd" +
    "\301\uffcd\302\uffcd\303\uffcd\304\uffcd\305\uffcd\306\uffcd\307" +
    "\uffcd\310\uffcd\311\uffcd\312\uffcd\313\uffcd\314\uffcd\315\uffcd" +
    "\316\uffcd\317\uffcd\320\uffcd\321\uffcd\322\uffcd\323\uffcd\324" +
    "\uffcd\325\uffcd\326\uffcd\327\uffcd\330\uffcd\331\uffcd\332\uffcd" +
    "\333\uffcd\334\uffcd\001\002\000\004\002\uff8e\001\002\000" +
    "\004\002\uff9f\001\002\000\146\002\uffa7\254\uffa7\255\uffa7" +
    "\256\uffa7\257\uffa7\260\uffa7\261\uffa7\262\uffa7\263\uffa7\264" +
    "\uffa7\265\uffa7\266\uffa7\267\uffa7\270\uffa7\271\uffa7\272\uffa7" +
    "\273\uffa7\274\uffa7\275\uffa7\276\uffa7\277\uffa7\300\uffa7\301" +
    "\uffa7\302\uffa7\303\uffa7\304\uffa7\305\uffa7\306\uffa7\307\uffa7" +
    "\310\uffa7\311\uffa7\312\uffa7\313\uffa7\314\uffa7\315\uffa7\316" +
    "\uffa7\317\uffa7\320\uffa7\321\uffa7\322\uffa7\323\uffa7\324\uffa7" +
    "\325\uffa7\326\uffa7\327\uffa7\330\uffa7\331\uffa7\332\uffa7\333" +
    "\uffa7\334\uffa7\001\002\000\146\002\uff23\254\uff23\255\uff23" +
    "\256\uff23\257\uff23\260\uff23\261\uff23\262\uff23\263\uff23\264" +
    "\uff23\265\uff23\266\uff23\267\uff23\270\uff23\271\uff23\272\uff23" +
    "\273\uff23\274\uff23\275\uff23\276\uff23\277\uff23\300\uff23\301" +
    "\uff23\302\uff23\303\uff23\304\uff23\305\uff23\306\uff23\307\uff23" +
    "\310\uff23\311\uff23\312\uff23\313\uff23\314\uff23\315\uff23\316" +
    "\uff23\317\uff23\320\uff23\321\uff23\322\uff23\323\uff23\324\uff23" +
    "\325\uff23\326\uff23\327\uff23\330\uff23\331\uff23\332\uff23\333" +
    "\uff23\334\uff23\001\002\000\146\002\uffb7\254\uffb7\255\uffb7" +
    "\256\uffb7\257\uffb7\260\uffb7\261\uffb7\262\uffb7\263\uffb7\264" +
    "\uffb7\265\uffb7\266\uffb7\267\uffb7\270\uffb7\271\uffb7\272\uffb7" +
    "\273\uffb7\274\uffb7\275\uffb7\276\uffb7\277\uffb7\300\uffb7\301" +
    "\uffb7\302\uffb7\303\uffb7\304\uffb7\305\uffb7\306\uffb7\307\uffb7" +
    "\310\uffb7\311\uffb7\312\uffb7\313\uffb7\314\uffb7\315\uffb7\316" +
    "\uffb7\317\uffb7\320\uffb7\321\uffb7\322\uffb7\323\uffb7\324\uffb7" +
    "\325\uffb7\326\uffb7\327\uffb7\330\uffb7\331\uffb7\332\uffb7\333" +
    "\uffb7\334\uffb7\001\002\000\144\254\uffe0\255\uffe0\256\uffe0" +
    "\257\uffe0\260\uffe0\261\uffe0\262\uffe0\263\uffe0\264\uffe0\265" +
    "\uffe0\266\uffe0\267\uffe0\270\uffe0\271\uffe0\272\uffe0\273\uffe0" +
    "\274\uffe0\275\uffe0\276\uffe0\277\uffe0\300\uffe0\301\uffe0\302" +
    "\uffe0\303\uffe0\304\uffe0\305\uffe0\306\uffe0\307\uffe0\310\uffe0" +
    "\311\uffe0\312\uffe0\313\uffe0\314\uffe0\315\uffe0\316\uffe0\317" +
    "\uffe0\320\uffe0\321\uffe0\322\uffe0\323\uffe0\324\uffe0\325\uffe0" +
    "\326\uffe0\327\uffe0\330\uffe0\331\uffe0\332\uffe0\333\uffe0\334" +
    "\uffe0\001\002\000\004\002\uffc7\001\002\000\004\002\uff2f" +
    "\001\002\000\004\002\uffa0\001\002\000\146\002\uffd6\254" +
    "\uffd6\255\uffd6\256\uffd6\257\uffd6\260\uffd6\261\uffd6\262\uffd6" +
    "\263\uffd6\264\uffd6\265\uffd6\266\uffd6\267\uffd6\270\uffd6\271" +
    "\uffd6\272\uffd6\273\uffd6\274\uffd6\275\uffd6\276\uffd6\277\uffd6" +
    "\300\uffd6\301\uffd6\302\uffd6\303\uffd6\304\uffd6\305\uffd6\306" +
    "\uffd6\307\uffd6\310\uffd6\311\uffd6\312\uffd6\313\uffd6\314\uffd6" +
    "\315\uffd6\316\uffd6\317\uffd6\320\uffd6\321\uffd6\322\uffd6\323" +
    "\uffd6\324\uffd6\325\uffd6\326\uffd6\327\uffd6\330\uffd6\331\uffd6" +
    "\332\uffd6\333\uffd6\334\uffd6\001\002\000\004\002\uff93\001" +
    "\002\000\146\002\uffa9\254\uffa9\255\uffa9\256\uffa9\257\uffa9" +
    "\260\uffa9\261\uffa9\262\uffa9\263\uffa9\264\uffa9\265\uffa9\266" +
    "\uffa9\267\uffa9\270\uffa9\271\uffa9\272\uffa9\273\uffa9\274\uffa9" +
    "\275\uffa9\276\uffa9\277\uffa9\300\uffa9\301\uffa9\302\uffa9\303" +
    "\uffa9\304\uffa9\305\uffa9\306\uffa9\307\uffa9\310\uffa9\311\uffa9" +
    "\312\uffa9\313\uffa9\314\uffa9\315\uffa9\316\uffa9\317\uffa9\320" +
    "\uffa9\321\uffa9\322\uffa9\323\uffa9\324\uffa9\325\uffa9\326\uffa9" +
    "\327\uffa9\330\uffa9\331\uffa9\332\uffa9\333\uffa9\334\uffa9\001" +
    "\002\000\004\002\uff92\001\002\000\004\002\uff8f\001\002" +
    "\000\004\002\uffc1\001\002\000\004\002\uff8b\001\002\000" +
    "\004\002\ufffb\001\002\000\146\002\uffb3\254\uffb3\255\uffb3" +
    "\256\uffb3\257\uffb3\260\uffb3\261\uffb3\262\uffb3\263\uffb3\264" +
    "\uffb3\265\uffb3\266\uffb3\267\uffb3\270\uffb3\271\uffb3\272\uffb3" +
    "\273\uffb3\274\uffb3\275\uffb3\276\uffb3\277\uffb3\300\uffb3\301" +
    "\uffb3\302\uffb3\303\uffb3\304\uffb3\305\uffb3\306\uffb3\307\uffb3" +
    "\310\uffb3\311\uffb3\312\uffb3\313\uffb3\314\uffb3\315\uffb3\316" +
    "\uffb3\317\uffb3\320\uffb3\321\uffb3\322\uffb3\323\uffb3\324\uffb3" +
    "\325\uffb3\326\uffb3\327\uffb3\330\uffb3\331\uffb3\332\uffb3\333" +
    "\uffb3\334\uffb3\001\002\000\146\002\uff1b\254\uff1b\255\uff1b" +
    "\256\uff1b\257\uff1b\260\uff1b\261\uff1b\262\uff1b\263\uff1b\264" +
    "\uff1b\265\uff1b\266\uff1b\267\uff1b\270\uff1b\271\uff1b\272\uff1b" +
    "\273\uff1b\274\uff1b\275\uff1b\276\uff1b\277\uff1b\300\uff1b\301" +
    "\uff1b\302\uff1b\303\uff1b\304\uff1b\305\uff1b\306\uff1b\307\uff1b" +
    "\310\uff1b\311\uff1b\312\uff1b\313\uff1b\314\uff1b\315\uff1b\316" +
    "\uff1b\317\uff1b\320\uff1b\321\uff1b\322\uff1b\323\uff1b\324\uff1b" +
    "\325\uff1b\326\uff1b\327\uff1b\330\uff1b\331\uff1b\332\uff1b\333" +
    "\uff1b\334\uff1b\001\002\000\004\002\uff87\001\002\000\004" +
    "\002\uff8d\001\002\000\004\002\uff99\001\002\000\004\002" +
    "\uffbe\001\002\000\146\002\uff20\254\uff20\255\uff20\256\uff20" +
    "\257\uff20\260\uff20\261\uff20\262\uff20\263\uff20\264\uff20\265" +
    "\uff20\266\uff20\267\uff20\270\uff20\271\uff20\272\uff20\273\uff20" +
    "\274\uff20\275\uff20\276\uff20\277\uff20\300\uff20\301\uff20\302" +
    "\uff20\303\uff20\304\uff20\305\uff20\306\uff20\307\uff20\310\uff20" +
    "\311\uff20\312\uff20\313\uff20\314\uff20\315\uff20\316\uff20\317" +
    "\uff20\320\uff20\321\uff20\322\uff20\323\uff20\324\uff20\325\uff20" +
    "\326\uff20\327\uff20\330\uff20\331\uff20\332\uff20\333\uff20\334" +
    "\uff20\001\002\000\146\002\uffcc\254\uffcc\255\uffcc\256\uffcc" +
    "\257\uffcc\260\uffcc\261\uffcc\262\uffcc\263\uffcc\264\uffcc\265" +
    "\uffcc\266\uffcc\267\uffcc\270\uffcc\271\uffcc\272\uffcc\273\uffcc" +
    "\274\uffcc\275\uffcc\276\uffcc\277\uffcc\300\uffcc\301\uffcc\302" +
    "\uffcc\303\uffcc\304\uffcc\305\uffcc\306\uffcc\307\uffcc\310\uffcc" +
    "\311\uffcc\312\uffcc\313\uffcc\314\uffcc\315\uffcc\316\uffcc\317" +
    "\uffcc\320\uffcc\321\uffcc\322\uffcc\323\uffcc\324\uffcc\325\uffcc" +
    "\326\uffcc\327\uffcc\330\uffcc\331\uffcc\332\uffcc\333\uffcc\334" +
    "\uffcc\001\002\000\144\254\uffde\255\uffde\256\uffde\257\uffde" +
    "\260\uffde\261\uffde\262\uffde\263\uffde\264\uffde\265\uffde\266" +
    "\uffde\267\uffde\270\uffde\271\uffde\272\uffde\273\uffde\274\uffde" +
    "\275\uffde\276\uffde\277\uffde\300\uffde\301\uffde\302\uffde\303" +
    "\uffde\304\uffde\305\uffde\306\uffde\307\uffde\310\uffde\311\uffde" +
    "\312\uffde\313\uffde\314\uffde\315\uffde\316\uffde\317\uffde\320" +
    "\uffde\321\uffde\322\uffde\323\uffde\324\uffde\325\uffde\326\uffde" +
    "\327\uffde\330\uffde\331\uffde\332\uffde\333\uffde\334\uffde\001" +
    "\002\000\146\002\uffb5\254\uffb5\255\uffb5\256\uffb5\257\uffb5" +
    "\260\uffb5\261\uffb5\262\uffb5\263\uffb5\264\uffb5\265\uffb5\266" +
    "\uffb5\267\uffb5\270\uffb5\271\uffb5\272\uffb5\273\uffb5\274\uffb5" +
    "\275\uffb5\276\uffb5\277\uffb5\300\uffb5\301\uffb5\302\uffb5\303" +
    "\uffb5\304\uffb5\305\uffb5\306\uffb5\307\uffb5\310\uffb5\311\uffb5" +
    "\312\uffb5\313\uffb5\314\uffb5\315\uffb5\316\uffb5\317\uffb5\320" +
    "\uffb5\321\uffb5\322\uffb5\323\uffb5\324\uffb5\325\uffb5\326\uffb5" +
    "\327\uffb5\330\uffb5\331\uffb5\332\uffb5\333\uffb5\334\uffb5\001" +
    "\002\000\004\002\uff2c\001\002\000\004\002\uffc6\001\002" +
    "\000\146\002\uffd0\254\uffd0\255\uffd0\256\uffd0\257\uffd0\260" +
    "\uffd0\261\uffd0\262\uffd0\263\uffd0\264\uffd0\265\uffd0\266\uffd0" +
    "\267\uffd0\270\uffd0\271\uffd0\272\uffd0\273\uffd0\274\uffd0\275" +
    "\uffd0\276\uffd0\277\uffd0\300\uffd0\301\uffd0\302\uffd0\303\uffd0" +
    "\304\uffd0\305\uffd0\306\uffd0\307\uffd0\310\uffd0\311\uffd0\312" +
    "\uffd0\313\uffd0\314\uffd0\315\uffd0\316\uffd0\317\uffd0\320\uffd0" +
    "\321\uffd0\322\uffd0\323\uffd0\324\uffd0\325\uffd0\326\uffd0\327" +
    "\uffd0\330\uffd0\331\uffd0\332\uffd0\333\uffd0\334\uffd0\001\002" +
    "\000\146\002\uff1a\254\uff1a\255\uff1a\256\uff1a\257\uff1a\260" +
    "\uff1a\261\uff1a\262\uff1a\263\uff1a\264\uff1a\265\uff1a\266\uff1a" +
    "\267\uff1a\270\uff1a\271\uff1a\272\uff1a\273\uff1a\274\uff1a\275" +
    "\uff1a\276\uff1a\277\uff1a\300\uff1a\301\uff1a\302\uff1a\303\uff1a" +
    "\304\uff1a\305\uff1a\306\uff1a\307\uff1a\310\uff1a\311\uff1a\312" +
    "\uff1a\313\uff1a\314\uff1a\315\uff1a\316\uff1a\317\uff1a\320\uff1a" +
    "\321\uff1a\322\uff1a\323\uff1a\324\uff1a\325\uff1a\326\uff1a\327" +
    "\uff1a\330\uff1a\331\uff1a\332\uff1a\333\uff1a\334\uff1a\001\002" +
    "\000\146\002\uffaf\254\uffaf\255\uffaf\256\uffaf\257\uffaf\260" +
    "\uffaf\261\uffaf\262\uffaf\263\uffaf\264\uffaf\265\uffaf\266\uffaf" +
    "\267\uffaf\270\uffaf\271\uffaf\272\uffaf\273\uffaf\274\uffaf\275" +
    "\uffaf\276\uffaf\277\uffaf\300\uffaf\301\uffaf\302\uffaf\303\uffaf" +
    "\304\uffaf\305\uffaf\306\uffaf\307\uffaf\310\uffaf\311\uffaf\312" +
    "\uffaf\313\uffaf\314\uffaf\315\uffaf\316\uffaf\317\uffaf\320\uffaf" +
    "\321\uffaf\322\uffaf\323\uffaf\324\uffaf\325\uffaf\326\uffaf\327" +
    "\uffaf\330\uffaf\331\uffaf\332\uffaf\333\uffaf\334\uffaf\001\002" +
    "\000\004\002\uff88\001\002\000\146\002\uff26\254\uff26\255" +
    "\uff26\256\uff26\257\uff26\260\uff26\261\uff26\262\uff26\263\uff26" +
    "\264\uff26\265\uff26\266\uff26\267\uff26\270\uff26\271\uff26\272" +
    "\uff26\273\uff26\274\uff26\275\uff26\276\uff26\277\uff26\300\uff26" +
    "\301\uff26\302\uff26\303\uff26\304\uff26\305\uff26\306\uff26\307" +
    "\uff26\310\uff26\311\uff26\312\uff26\313\uff26\314\uff26\315\uff26" +
    "\316\uff26\317\uff26\320\uff26\321\uff26\322\uff26\323\uff26\324" +
    "\uff26\325\uff26\326\uff26\327\uff26\330\uff26\331\uff26\332\uff26" +
    "\333\uff26\334\uff26\001\002\000\146\002\uffce\254\uffce\255" +
    "\uffce\256\uffce\257\uffce\260\uffce\261\uffce\262\uffce\263\uffce" +
    "\264\uffce\265\uffce\266\uffce\267\uffce\270\uffce\271\uffce\272" +
    "\uffce\273\uffce\274\uffce\275\uffce\276\uffce\277\uffce\300\uffce" +
    "\301\uffce\302\uffce\303\uffce\304\uffce\305\uffce\306\uffce\307" +
    "\uffce\310\uffce\311\uffce\312\uffce\313\uffce\314\uffce\315\uffce" +
    "\316\uffce\317\uffce\320\uffce\321\uffce\322\uffce\323\uffce\324" +
    "\uffce\325\uffce\326\uffce\327\uffce\330\uffce\331\uffce\332\uffce" +
    "\333\uffce\334\uffce\001\002\000\146\002\uffc8\254\uffc8\255" +
    "\uffc8\256\uffc8\257\uffc8\260\uffc8\261\uffc8\262\uffc8\263\uffc8" +
    "\264\uffc8\265\uffc8\266\uffc8\267\uffc8\270\uffc8\271\uffc8\272" +
    "\uffc8\273\uffc8\274\uffc8\275\uffc8\276\uffc8\277\uffc8\300\uffc8" +
    "\301\uffc8\302\uffc8\303\uffc8\304\uffc8\305\uffc8\306\uffc8\307" +
    "\uffc8\310\uffc8\311\uffc8\312\uffc8\313\uffc8\314\uffc8\315\uffc8" +
    "\316\uffc8\317\uffc8\320\uffc8\321\uffc8\322\uffc8\323\uffc8\324" +
    "\uffc8\325\uffc8\326\uffc8\327\uffc8\330\uffc8\331\uffc8\332\uffc8" +
    "\333\uffc8\334\uffc8\001\002\000\146\002\uffa5\254\uffa5\255" +
    "\uffa5\256\uffa5\257\uffa5\260\uffa5\261\uffa5\262\uffa5\263\uffa5" +
    "\264\uffa5\265\uffa5\266\uffa5\267\uffa5\270\uffa5\271\uffa5\272" +
    "\uffa5\273\uffa5\274\uffa5\275\uffa5\276\uffa5\277\uffa5\300\uffa5" +
    "\301\uffa5\302\uffa5\303\uffa5\304\uffa5\305\uffa5\306\uffa5\307" +
    "\uffa5\310\uffa5\311\uffa5\312\uffa5\313\uffa5\314\uffa5\315\uffa5" +
    "\316\uffa5\317\uffa5\320\uffa5\321\uffa5\322\uffa5\323\uffa5\324" +
    "\uffa5\325\uffa5\326\uffa5\327\uffa5\330\uffa5\331\uffa5\332\uffa5" +
    "\333\uffa5\334\uffa5\001\002\000\146\002\uffb2\254\uffb2\255" +
    "\uffb2\256\uffb2\257\uffb2\260\uffb2\261\uffb2\262\uffb2\263\uffb2" +
    "\264\uffb2\265\uffb2\266\uffb2\267\uffb2\270\uffb2\271\uffb2\272" +
    "\uffb2\273\uffb2\274\uffb2\275\uffb2\276\uffb2\277\uffb2\300\uffb2" +
    "\301\uffb2\302\uffb2\303\uffb2\304\uffb2\305\uffb2\306\uffb2\307" +
    "\uffb2\310\uffb2\311\uffb2\312\uffb2\313\uffb2\314\uffb2\315\uffb2" +
    "\316\uffb2\317\uffb2\320\uffb2\321\uffb2\322\uffb2\323\uffb2\324" +
    "\uffb2\325\uffb2\326\uffb2\327\uffb2\330\uffb2\331\uffb2\332\uffb2" +
    "\333\uffb2\334\uffb2\001\002\000\146\002\uff19\254\uff19\255" +
    "\uff19\256\uff19\257\uff19\260\uff19\261\uff19\262\uff19\263\uff19" +
    "\264\uff19\265\uff19\266\uff19\267\uff19\270\uff19\271\uff19\272" +
    "\uff19\273\uff19\274\uff19\275\uff19\276\uff19\277\uff19\300\uff19" +
    "\301\uff19\302\uff19\303\uff19\304\uff19\305\uff19\306\uff19\307" +
    "\uff19\310\uff19\311\uff19\312\uff19\313\uff19\314\uff19\315\uff19" +
    "\316\uff19\317\uff19\320\uff19\321\uff19\322\uff19\323\uff19\324" +
    "\uff19\325\uff19\326\uff19\327\uff19\330\uff19\331\uff19\332\uff19" +
    "\333\uff19\334\uff19\001\002\000\146\002\uffd2\254\uffd2\255" +
    "\uffd2\256\uffd2\257\uffd2\260\uffd2\261\uffd2\262\uffd2\263\uffd2" +
    "\264\uffd2\265\uffd2\266\uffd2\267\uffd2\270\uffd2\271\uffd2\272" +
    "\uffd2\273\uffd2\274\uffd2\275\uffd2\276\uffd2\277\uffd2\300\uffd2" +
    "\301\uffd2\302\uffd2\303\uffd2\304\uffd2\305\uffd2\306\uffd2\307" +
    "\uffd2\310\uffd2\311\uffd2\312\uffd2\313\uffd2\314\uffd2\315\uffd2" +
    "\316\uffd2\317\uffd2\320\uffd2\321\uffd2\322\uffd2\323\uffd2\324" +
    "\uffd2\325\uffd2\326\uffd2\327\uffd2\330\uffd2\331\uffd2\332\uffd2" +
    "\333\uffd2\334\uffd2\001\002\000\146\002\uff25\254\uff25\255" +
    "\uff25\256\uff25\257\uff25\260\uff25\261\uff25\262\uff25\263\uff25" +
    "\264\uff25\265\uff25\266\uff25\267\uff25\270\uff25\271\uff25\272" +
    "\uff25\273\uff25\274\uff25\275\uff25\276\uff25\277\uff25\300\uff25" +
    "\301\uff25\302\uff25\303\uff25\304\uff25\305\uff25\306\uff25\307" +
    "\uff25\310\uff25\311\uff25\312\uff25\313\uff25\314\uff25\315\uff25" +
    "\316\uff25\317\uff25\320\uff25\321\uff25\322\uff25\323\uff25\324" +
    "\uff25\325\uff25\326\uff25\327\uff25\330\uff25\331\uff25\332\uff25" +
    "\333\uff25\334\uff25\001\002\000\004\002\uff9c\001\002\000" +
    "\146\002\uffaa\254\uffaa\255\uffaa\256\uffaa\257\uffaa\260\uffaa" +
    "\261\uffaa\262\uffaa\263\uffaa\264\uffaa\265\uffaa\266\uffaa\267" +
    "\uffaa\270\uffaa\271\uffaa\272\uffaa\273\uffaa\274\uffaa\275\uffaa" +
    "\276\uffaa\277\uffaa\300\uffaa\301\uffaa\302\uffaa\303\uffaa\304" +
    "\uffaa\305\uffaa\306\uffaa\307\uffaa\310\uffaa\311\uffaa\312\uffaa" +
    "\313\uffaa\314\uffaa\315\uffaa\316\uffaa\317\uffaa\320\uffaa\321" +
    "\uffaa\322\uffaa\323\uffaa\324\uffaa\325\uffaa\326\uffaa\327\uffaa" +
    "\330\uffaa\331\uffaa\332\uffaa\333\uffaa\334\uffaa\001\002\000" +
    "\146\002\ufffc\254\uffdb\255\uffdb\256\uffdb\257\uffdb\260\uffdb" +
    "\261\uffdb\262\uffdb\263\uffdb\264\uffdb\265\uffdb\266\uffdb\267" +
    "\uffdb\270\uffdb\271\uffdb\272\uffdb\273\uffdb\274\uffdb\275\uffdb" +
    "\276\uffdb\277\uffdb\300\uffdb\301\uffdb\302\uffdb\303\uffdb\304" +
    "\uffdb\305\uffdb\306\uffdb\307\uffdb\310\uffdb\311\uffdb\312\uffdb" +
    "\313\uffdb\314\uffdb\315\uffdb\316\uffdb\317\uffdb\320\uffdb\321" +
    "\uffdb\322\uffdb\323\uffdb\324\uffdb\325\uffdb\326\uffdb\327\uffdb" +
    "\330\uffdb\331\uffdb\332\uffdb\333\uffdb\334\uffdb\001\002\000" +
    "\004\002\uff96\001\002\000\004\002\uff9d\001\002\000\004" +
    "\002\uffc0\001\002\000\146\002\uffc9\254\uffc9\255\uffc9\256" +
    "\uffc9\257\uffc9\260\uffc9\261\uffc9\262\uffc9\263\uffc9\264\uffc9" +
    "\265\uffc9\266\uffc9\267\uffc9\270\uffc9\271\uffc9\272\uffc9\273" +
    "\uffc9\274\uffc9\275\uffc9\276\uffc9\277\uffc9\300\uffc9\301\uffc9" +
    "\302\uffc9\303\uffc9\304\uffc9\305\uffc9\306\uffc9\307\uffc9\310" +
    "\uffc9\311\uffc9\312\uffc9\313\uffc9\314\uffc9\315\uffc9\316\uffc9" +
    "\317\uffc9\320\uffc9\321\uffc9\322\uffc9\323\uffc9\324\uffc9\325" +
    "\uffc9\326\uffc9\327\uffc9\330\uffc9\331\uffc9\332\uffc9\333\uffc9" +
    "\334\uffc9\001\002\000\146\002\uffcf\254\uffcf\255\uffcf\256" +
    "\uffcf\257\uffcf\260\uffcf\261\uffcf\262\uffcf\263\uffcf\264\uffcf" +
    "\265\uffcf\266\uffcf\267\uffcf\270\uffcf\271\uffcf\272\uffcf\273" +
    "\uffcf\274\uffcf\275\uffcf\276\uffcf\277\uffcf\300\uffcf\301\uffcf" +
    "\302\uffcf\303\uffcf\304\uffcf\305\uffcf\306\uffcf\307\uffcf\310" +
    "\uffcf\311\uffcf\312\uffcf\313\uffcf\314\uffcf\315\uffcf\316\uffcf" +
    "\317\uffcf\320\uffcf\321\uffcf\322\uffcf\323\uffcf\324\uffcf\325" +
    "\uffcf\326\uffcf\327\uffcf\330\uffcf\331\uffcf\332\uffcf\333\uffcf" +
    "\334\uffcf\001\002\000\146\002\uffb1\254\uffb1\255\uffb1\256" +
    "\uffb1\257\uffb1\260\uffb1\261\uffb1\262\uffb1\263\uffb1\264\uffb1" +
    "\265\uffb1\266\uffb1\267\uffb1\270\uffb1\271\uffb1\272\uffb1\273" +
    "\uffb1\274\uffb1\275\uffb1\276\uffb1\277\uffb1\300\uffb1\301\uffb1" +
    "\302\uffb1\303\uffb1\304\uffb1\305\uffb1\306\uffb1\307\uffb1\310" +
    "\uffb1\311\uffb1\312\uffb1\313\uffb1\314\uffb1\315\uffb1\316\uffb1" +
    "\317\uffb1\320\uffb1\321\uffb1\322\uffb1\323\uffb1\324\uffb1\325" +
    "\uffb1\326\uffb1\327\uffb1\330\uffb1\331\uffb1\332\uffb1\333\uffb1" +
    "\334\uffb1\001\002\000\146\002\uffab\254\uffab\255\uffab\256" +
    "\uffab\257\uffab\260\uffab\261\uffab\262\uffab\263\uffab\264\uffab" +
    "\265\uffab\266\uffab\267\uffab\270\uffab\271\uffab\272\uffab\273" +
    "\uffab\274\uffab\275\uffab\276\uffab\277\uffab\300\uffab\301\uffab" +
    "\302\uffab\303\uffab\304\uffab\305\uffab\306\uffab\307\uffab\310" +
    "\uffab\311\uffab\312\uffab\313\uffab\314\uffab\315\uffab\316\uffab" +
    "\317\uffab\320\uffab\321\uffab\322\uffab\323\uffab\324\uffab\325" +
    "\uffab\326\uffab\327\uffab\330\uffab\331\uffab\332\uffab\333\uffab" +
    "\334\uffab\001\002\000\004\002\uff2a\001\002\000\004\002" +
    "\uffbf\001\002\000\146\002\uffd4\254\uffd4\255\uffd4\256\uffd4" +
    "\257\uffd4\260\uffd4\261\uffd4\262\uffd4\263\uffd4\264\uffd4\265" +
    "\uffd4\266\uffd4\267\uffd4\270\uffd4\271\uffd4\272\uffd4\273\uffd4" +
    "\274\uffd4\275\uffd4\276\uffd4\277\uffd4\300\uffd4\301\uffd4\302" +
    "\uffd4\303\uffd4\304\uffd4\305\uffd4\306\uffd4\307\uffd4\310\uffd4" +
    "\311\uffd4\312\uffd4\313\uffd4\314\uffd4\315\uffd4\316\uffd4\317" +
    "\uffd4\320\uffd4\321\uffd4\322\uffd4\323\uffd4\324\uffd4\325\uffd4" +
    "\326\uffd4\327\uffd4\330\uffd4\331\uffd4\332\uffd4\333\uffd4\334" +
    "\uffd4\001\002\000\144\254\uffe1\255\uffe1\256\uffe1\257\uffe1" +
    "\260\uffe1\261\uffe1\262\uffe1\263\uffe1\264\uffe1\265\uffe1\266" +
    "\uffe1\267\uffe1\270\uffe1\271\uffe1\272\uffe1\273\uffe1\274\uffe1" +
    "\275\uffe1\276\uffe1\277\uffe1\300\uffe1\301\uffe1\302\uffe1\303" +
    "\uffe1\304\uffe1\305\uffe1\306\uffe1\307\uffe1\310\uffe1\311\uffe1" +
    "\312\uffe1\313\uffe1\314\uffe1\315\uffe1\316\uffe1\317\uffe1\320" +
    "\uffe1\321\uffe1\322\uffe1\323\uffe1\324\uffe1\325\uffe1\326\uffe1" +
    "\327\uffe1\330\uffe1\331\uffe1\332\uffe1\333\uffe1\334\uffe1\001" +
    "\002\000\144\254\304\255\256\256\320\257\326\260\310" +
    "\261\313\262\266\263\311\264\262\265\332\266\302\267" +
    "\271\270\303\271\316\272\300\273\324\274\315\275\306" +
    "\276\305\277\321\300\334\301\270\302\273\303\275\304" +
    "\322\305\274\306\331\307\323\310\254\311\264\312\317" +
    "\313\253\314\301\315\327\316\260\317\261\320\263\321" +
    "\314\322\312\323\276\324\330\325\333\326\267\327\272" +
    "\330\265\331\307\332\257\333\277\334\255\001\002\000" +
    "\146\002\uffd5\254\uffd5\255\uffd5\256\uffd5\257\uffd5\260\uffd5" +
    "\261\uffd5\262\uffd5\263\uffd5\264\uffd5\265\uffd5\266\uffd5\267" +
    "\uffd5\270\uffd5\271\uffd5\272\uffd5\273\uffd5\274\uffd5\275\uffd5" +
    "\276\uffd5\277\uffd5\300\uffd5\301\uffd5\302\uffd5\303\uffd5\304" +
    "\uffd5\305\uffd5\306\uffd5\307\uffd5\310\uffd5\311\uffd5\312\uffd5" +
    "\313\uffd5\314\uffd5\315\uffd5\316\uffd5\317\uffd5\320\uffd5\321" +
    "\uffd5\322\uffd5\323\uffd5\324\uffd5\325\uffd5\326\uffd5\327\uffd5" +
    "\330\uffd5\331\uffd5\332\uffd5\333\uffd5\334\uffd5\001\002\000" +
    "\146\002\uffcb\254\uffcb\255\uffcb\256\uffcb\257\uffcb\260\uffcb" +
    "\261\uffcb\262\uffcb\263\uffcb\264\uffcb\265\uffcb\266\uffcb\267" +
    "\uffcb\270\uffcb\271\uffcb\272\uffcb\273\uffcb\274\uffcb\275\uffcb" +
    "\276\uffcb\277\uffcb\300\uffcb\301\uffcb\302\uffcb\303\uffcb\304" +
    "\uffcb\305\uffcb\306\uffcb\307\uffcb\310\uffcb\311\uffcb\312\uffcb" +
    "\313\uffcb\314\uffcb\315\uffcb\316\uffcb\317\uffcb\320\uffcb\321" +
    "\uffcb\322\uffcb\323\uffcb\324\uffcb\325\uffcb\326\uffcb\327\uffcb" +
    "\330\uffcb\331\uffcb\332\uffcb\333\uffcb\334\uffcb\001\002\000" +
    "\004\002\uffc3\001\002\000\004\002\uff97\001\002\000\004" +
    "\002\uffc5\001\002\000\146\002\uffa4\254\uffa4\255\uffa4\256" +
    "\uffa4\257\uffa4\260\uffa4\261\uffa4\262\uffa4\263\uffa4\264\uffa4" +
    "\265\uffa4\266\uffa4\267\uffa4\270\uffa4\271\uffa4\272\uffa4\273" +
    "\uffa4\274\uffa4\275\uffa4\276\uffa4\277\uffa4\300\uffa4\301\uffa4" +
    "\302\uffa4\303\uffa4\304\uffa4\305\uffa4\306\uffa4\307\uffa4\310" +
    "\uffa4\311\uffa4\312\uffa4\313\uffa4\314\uffa4\315\uffa4\316\uffa4" +
    "\317\uffa4\320\uffa4\321\uffa4\322\uffa4\323\uffa4\324\uffa4\325" +
    "\uffa4\326\uffa4\327\uffa4\330\uffa4\331\uffa4\332\uffa4\333\uffa4" +
    "\334\uffa4\001\002\000\146\002\uffb9\254\uffb9\255\uffb9\256" +
    "\uffb9\257\uffb9\260\uffb9\261\uffb9\262\uffb9\263\uffb9\264\uffb9" +
    "\265\uffb9\266\uffb9\267\uffb9\270\uffb9\271\uffb9\272\uffb9\273" +
    "\uffb9\274\uffb9\275\uffb9\276\uffb9\277\uffb9\300\uffb9\301\uffb9" +
    "\302\uffb9\303\uffb9\304\uffb9\305\uffb9\306\uffb9\307\uffb9\310" +
    "\uffb9\311\uffb9\312\uffb9\313\uffb9\314\uffb9\315\uffb9\316\uffb9" +
    "\317\uffb9\320\uffb9\321\uffb9\322\uffb9\323\uffb9\324\uffb9\325" +
    "\uffb9\326\uffb9\327\uffb9\330\uffb9\331\uffb9\332\uffb9\333\uffb9" +
    "\334\uffb9\001\002\000\004\002\uffbd\001\002\000\146\002" +
    "\uffac\254\uffac\255\uffac\256\uffac\257\uffac\260\uffac\261\uffac" +
    "\262\uffac\263\uffac\264\uffac\265\uffac\266\uffac\267\uffac\270" +
    "\uffac\271\uffac\272\uffac\273\uffac\274\uffac\275\uffac\276\uffac" +
    "\277\uffac\300\uffac\301\uffac\302\uffac\303\uffac\304\uffac\305" +
    "\uffac\306\uffac\307\uffac\310\uffac\311\uffac\312\uffac\313\uffac" +
    "\314\uffac\315\uffac\316\uffac\317\uffac\320\uffac\321\uffac\322" +
    "\uffac\323\uffac\324\uffac\325\uffac\326\uffac\327\uffac\330\uffac" +
    "\331\uffac\332\uffac\333\uffac\334\uffac\001\002\000\146\002" +
    "\uffba\254\uffba\255\uffba\256\uffba\257\uffba\260\uffba\261\uffba" +
    "\262\uffba\263\uffba\264\uffba\265\uffba\266\uffba\267\uffba\270" +
    "\uffba\271\uffba\272\uffba\273\uffba\274\uffba\275\uffba\276\uffba" +
    "\277\uffba\300\uffba\301\uffba\302\uffba\303\uffba\304\uffba\305" +
    "\uffba\306\uffba\307\uffba\310\uffba\311\uffba\312\uffba\313\uffba" +
    "\314\uffba\315\uffba\316\uffba\317\uffba\320\uffba\321\uffba\322" +
    "\uffba\323\uffba\324\uffba\325\uffba\326\uffba\327\uffba\330\uffba" +
    "\331\uffba\332\uffba\333\uffba\334\uffba\001\002\000\004\002" +
    "\uffbb\001\002\000\004\002\uff2d\001\002\000\146\002\uffd3" +
    "\254\uffd3\255\uffd3\256\uffd3\257\uffd3\260\uffd3\261\uffd3\262" +
    "\uffd3\263\uffd3\264\uffd3\265\uffd3\266\uffd3\267\uffd3\270\uffd3" +
    "\271\uffd3\272\uffd3\273\uffd3\274\uffd3\275\uffd3\276\uffd3\277" +
    "\uffd3\300\uffd3\301\uffd3\302\uffd3\303\uffd3\304\uffd3\305\uffd3" +
    "\306\uffd3\307\uffd3\310\uffd3\311\uffd3\312\uffd3\313\uffd3\314" +
    "\uffd3\315\uffd3\316\uffd3\317\uffd3\320\uffd3\321\uffd3\322\uffd3" +
    "\323\uffd3\324\uffd3\325\uffd3\326\uffd3\327\uffd3\330\uffd3\331" +
    "\uffd3\332\uffd3\333\uffd3\334\uffd3\001\002\000\146\002\uffa3" +
    "\254\uffa3\255\uffa3\256\uffa3\257\uffa3\260\uffa3\261\uffa3\262" +
    "\uffa3\263\uffa3\264\uffa3\265\uffa3\266\uffa3\267\uffa3\270\uffa3" +
    "\271\uffa3\272\uffa3\273\uffa3\274\uffa3\275\uffa3\276\uffa3\277" +
    "\uffa3\300\uffa3\301\uffa3\302\uffa3\303\uffa3\304\uffa3\305\uffa3" +
    "\306\uffa3\307\uffa3\310\uffa3\311\uffa3\312\uffa3\313\uffa3\314" +
    "\uffa3\315\uffa3\316\uffa3\317\uffa3\320\uffa3\321\uffa3\322\uffa3" +
    "\323\uffa3\324\uffa3\325\uffa3\326\uffa3\327\uffa3\330\uffa3\331" +
    "\uffa3\332\uffa3\333\uffa3\334\uffa3\001\002\000\004\002\uff95" +
    "\001\002\000\004\002\ufffa\001\002\000\144\254\uffdd\255" +
    "\uffdd\256\uffdd\257\uffdd\260\uffdd\261\uffdd\262\uffdd\263\uffdd" +
    "\264\uffdd\265\uffdd\266\uffdd\267\uffdd\270\uffdd\271\uffdd\272" +
    "\uffdd\273\uffdd\274\uffdd\275\uffdd\276\uffdd\277\uffdd\300\uffdd" +
    "\301\uffdd\302\uffdd\303\uffdd\304\uffdd\305\uffdd\306\uffdd\307" +
    "\uffdd\310\uffdd\311\uffdd\312\uffdd\313\uffdd\314\uffdd\315\uffdd" +
    "\316\uffdd\317\uffdd\320\uffdd\321\uffdd\322\uffdd\323\uffdd\324" +
    "\uffdd\325\uffdd\326\uffdd\327\uffdd\330\uffdd\331\uffdd\332\uffdd" +
    "\333\uffdd\334\uffdd\001\002\000\144\254\uffe3\255\uffe3\256" +
    "\uffe3\257\uffe3\260\uffe3\261\uffe3\262\uffe3\263\uffe3\264\uffe3" +
    "\265\uffe3\266\uffe3\267\uffe3\270\uffe3\271\uffe3\272\uffe3\273" +
    "\uffe3\274\uffe3\275\uffe3\276\uffe3\277\uffe3\300\uffe3\301\uffe3" +
    "\302\uffe3\303\uffe3\304\uffe3\305\uffe3\306\uffe3\307\uffe3\310" +
    "\uffe3\311\uffe3\312\uffe3\313\uffe3\314\uffe3\315\uffe3\316\uffe3" +
    "\317\uffe3\320\uffe3\321\uffe3\322\uffe3\323\uffe3\324\uffe3\325" +
    "\uffe3\326\uffe3\327\uffe3\330\uffe3\331\uffe3\332\uffe3\333\uffe3" +
    "\334\uffe3\001\002\000\146\002\ufffd\254\uffda\255\uffda\256" +
    "\uffda\257\uffda\260\uffda\261\uffda\262\uffda\263\uffda\264\uffda" +
    "\265\uffda\266\uffda\267\uffda\270\uffda\271\uffda\272\uffda\273" +
    "\uffda\274\uffda\275\uffda\276\uffda\277\uffda\300\uffda\301\uffda" +
    "\302\uffda\303\uffda\304\uffda\305\uffda\306\uffda\307\uffda\310" +
    "\uffda\311\uffda\312\uffda\313\uffda\314\uffda\315\uffda\316\uffda" +
    "\317\uffda\320\uffda\321\uffda\322\uffda\323\uffda\324\uffda\325" +
    "\uffda\326\uffda\327\uffda\330\uffda\331\uffda\332\uffda\333\uffda" +
    "\334\uffda\001\002\000\004\002\uff2e\001\002\000\004\002" +
    "\uff2b\001\002\000\146\002\uff18\254\uff18\255\uff18\256\uff18" +
    "\257\uff18\260\uff18\261\uff18\262\uff18\263\uff18\264\uff18\265" +
    "\uff18\266\uff18\267\uff18\270\uff18\271\uff18\272\uff18\273\uff18" +
    "\274\uff18\275\uff18\276\uff18\277\uff18\300\uff18\301\uff18\302" +
    "\uff18\303\uff18\304\uff18\305\uff18\306\uff18\307\uff18\310\uff18" +
    "\311\uff18\312\uff18\313\uff18\314\uff18\315\uff18\316\uff18\317" +
    "\uff18\320\uff18\321\uff18\322\uff18\323\uff18\324\uff18\325\uff18" +
    "\326\uff18\327\uff18\330\uff18\331\uff18\332\uff18\333\uff18\334" +
    "\uff18\001\002\000\146\002\ufff8\254\uffd8\255\uffd8\256\uffd8" +
    "\257\uffd8\260\uffd8\261\uffd8\262\uffd8\263\uffd8\264\uffd8\265" +
    "\uffd8\266\uffd8\267\uffd8\270\uffd8\271\uffd8\272\uffd8\273\uffd8" +
    "\274\uffd8\275\uffd8\276\uffd8\277\uffd8\300\uffd8\301\uffd8\302" +
    "\uffd8\303\uffd8\304\uffd8\305\uffd8\306\uffd8\307\uffd8\310\uffd8" +
    "\311\uffd8\312\uffd8\313\uffd8\314\uffd8\315\uffd8\316\uffd8\317" +
    "\uffd8\320\uffd8\321\uffd8\322\uffd8\323\uffd8\324\uffd8\325\uffd8" +
    "\326\uffd8\327\uffd8\330\uffd8\331\uffd8\332\uffd8\333\uffd8\334" +
    "\uffd8\001\002\000\146\002\ufff9\254\uffd9\255\uffd9\256\uffd9" +
    "\257\uffd9\260\uffd9\261\uffd9\262\uffd9\263\uffd9\264\uffd9\265" +
    "\uffd9\266\uffd9\267\uffd9\270\uffd9\271\uffd9\272\uffd9\273\uffd9" +
    "\274\uffd9\275\uffd9\276\uffd9\277\uffd9\300\uffd9\301\uffd9\302" +
    "\uffd9\303\uffd9\304\uffd9\305\uffd9\306\uffd9\307\uffd9\310\uffd9" +
    "\311\uffd9\312\uffd9\313\uffd9\314\uffd9\315\uffd9\316\uffd9\317" +
    "\uffd9\320\uffd9\321\uffd9\322\uffd9\323\uffd9\324\uffd9\325\uffd9" +
    "\326\uffd9\327\uffd9\330\uffd9\331\uffd9\332\uffd9\333\uffd9\334" +
    "\uffd9\001\002\000\004\002\uff89\001\002\000\004\002\ufffe" +
    "\001\002\000\146\002\uff1d\254\uff1d\255\uff1d\256\uff1d\257" +
    "\uff1d\260\uff1d\261\uff1d\262\uff1d\263\uff1d\264\uff1d\265\uff1d" +
    "\266\uff1d\267\uff1d\270\uff1d\271\uff1d\272\uff1d\273\uff1d\274" +
    "\uff1d\275\uff1d\276\uff1d\277\uff1d\300\uff1d\301\uff1d\302\uff1d" +
    "\303\uff1d\304\uff1d\305\uff1d\306\uff1d\307\uff1d\310\uff1d\311" +
    "\uff1d\312\uff1d\313\uff1d\314\uff1d\315\uff1d\316\uff1d\317\uff1d" +
    "\320\uff1d\321\uff1d\322\uff1d\323\uff1d\324\uff1d\325\uff1d\326" +
    "\uff1d\327\uff1d\330\uff1d\331\uff1d\332\uff1d\333\uff1d\334\uff1d" +
    "\001\002\000\144\254\uffe2\255\uffe2\256\uffe2\257\uffe2\260" +
    "\uffe2\261\uffe2\262\uffe2\263\uffe2\264\uffe2\265\uffe2\266\uffe2" +
    "\267\uffe2\270\uffe2\271\uffe2\272\uffe2\273\uffe2\274\uffe2\275" +
    "\uffe2\276\uffe2\277\uffe2\300\uffe2\301\uffe2\302\uffe2\303\uffe2" +
    "\304\uffe2\305\uffe2\306\uffe2\307\uffe2\310\uffe2\311\uffe2\312" +
    "\uffe2\313\uffe2\314\uffe2\315\uffe2\316\uffe2\317\uffe2\320\uffe2" +
    "\321\uffe2\322\uffe2\323\uffe2\324\uffe2\325\uffe2\326\uffe2\327" +
    "\uffe2\330\uffe2\331\uffe2\332\uffe2\333\uffe2\334\uffe2\001\002" +
    "\000\146\002\uffd7\254\uffd7\255\uffd7\256\uffd7\257\uffd7\260" +
    "\uffd7\261\uffd7\262\uffd7\263\uffd7\264\uffd7\265\uffd7\266\uffd7" +
    "\267\uffd7\270\uffd7\271\uffd7\272\uffd7\273\uffd7\274\uffd7\275" +
    "\uffd7\276\uffd7\277\uffd7\300\uffd7\301\uffd7\302\uffd7\303\uffd7" +
    "\304\uffd7\305\uffd7\306\uffd7\307\uffd7\310\uffd7\311\uffd7\312" +
    "\uffd7\313\uffd7\314\uffd7\315\uffd7\316\uffd7\317\uffd7\320\uffd7" +
    "\321\uffd7\322\uffd7\323\uffd7\324\uffd7\325\uffd7\326\uffd7\327" +
    "\uffd7\330\uffd7\331\uffd7\332\uffd7\333\uffd7\334\uffd7\001\002" +
    "\000\146\002\uff17\254\uff17\255\uff17\256\uff17\257\uff17\260" +
    "\uff17\261\uff17\262\uff17\263\uff17\264\uff17\265\uff17\266\uff17" +
    "\267\uff17\270\uff17\271\uff17\272\uff17\273\uff17\274\uff17\275" +
    "\uff17\276\uff17\277\uff17\300\uff17\301\uff17\302\uff17\303\uff17" +
    "\304\uff17\305\uff17\306\uff17\307\uff17\310\uff17\311\uff17\312" +
    "\uff17\313\uff17\314\uff17\315\uff17\316\uff17\317\uff17\320\uff17" +
    "\321\uff17\322\uff17\323\uff17\324\uff17\325\uff17\326\uff17\327" +
    "\uff17\330\uff17\331\uff17\332\uff17\333\uff17\334\uff17\001\002" +
    "\000\146\002\uffb0\254\uffb0\255\uffb0\256\uffb0\257\uffb0\260" +
    "\uffb0\261\uffb0\262\uffb0\263\uffb0\264\uffb0\265\uffb0\266\uffb0" +
    "\267\uffb0\270\uffb0\271\uffb0\272\uffb0\273\uffb0\274\uffb0\275" +
    "\uffb0\276\uffb0\277\uffb0\300\uffb0\301\uffb0\302\uffb0\303\uffb0" +
    "\304\uffb0\305\uffb0\306\uffb0\307\uffb0\310\uffb0\311\uffb0\312" +
    "\uffb0\313\uffb0\314\uffb0\315\uffb0\316\uffb0\317\uffb0\320\uffb0" +
    "\321\uffb0\322\uffb0\323\uffb0\324\uffb0\325\uffb0\326\uffb0\327" +
    "\uffb0\330\uffb0\331\uffb0\332\uffb0\333\uffb0\334\uffb0\001\002" +
    "\000\146\002\uff16\254\uff16\255\uff16\256\uff16\257\uff16\260" +
    "\uff16\261\uff16\262\uff16\263\uff16\264\uff16\265\uff16\266\uff16" +
    "\267\uff16\270\uff16\271\uff16\272\uff16\273\uff16\274\uff16\275" +
    "\uff16\276\uff16\277\uff16\300\uff16\301\uff16\302\uff16\303\uff16" +
    "\304\uff16\305\uff16\306\uff16\307\uff16\310\uff16\311\uff16\312" +
    "\uff16\313\uff16\314\uff16\315\uff16\316\uff16\317\uff16\320\uff16" +
    "\321\uff16\322\uff16\323\uff16\324\uff16\325\uff16\326\uff16\327" +
    "\uff16\330\uff16\331\uff16\332\uff16\333\uff16\334\uff16\001\002" +
    "\000\146\002\uff28\254\uff28\255\uff28\256\uff28\257\uff28\260" +
    "\uff28\261\uff28\262\uff28\263\uff28\264\uff28\265\uff28\266\uff28" +
    "\267\uff28\270\uff28\271\uff28\272\uff28\273\uff28\274\uff28\275" +
    "\uff28\276\uff28\277\uff28\300\uff28\301\uff28\302\uff28\303\uff28" +
    "\304\uff28\305\uff28\306\uff28\307\uff28\310\uff28\311\uff28\312" +
    "\uff28\313\uff28\314\uff28\315\uff28\316\uff28\317\uff28\320\uff28" +
    "\321\uff28\322\uff28\323\uff28\324\uff28\325\uff28\326\uff28\327" +
    "\uff28\330\uff28\331\uff28\332\uff28\333\uff28\334\uff28\001\002" +
    "\000\146\002\uff24\254\uff24\255\uff24\256\uff24\257\uff24\260" +
    "\uff24\261\uff24\262\uff24\263\uff24\264\uff24\265\uff24\266\uff24" +
    "\267\uff24\270\uff24\271\uff24\272\uff24\273\uff24\274\uff24\275" +
    "\uff24\276\uff24\277\uff24\300\uff24\301\uff24\302\uff24\303\uff24" +
    "\304\uff24\305\uff24\306\uff24\307\uff24\310\uff24\311\uff24\312" +
    "\uff24\313\uff24\314\uff24\315\uff24\316\uff24\317\uff24\320\uff24" +
    "\321\uff24\322\uff24\323\uff24\324\uff24\325\uff24\326\uff24\327" +
    "\uff24\330\uff24\331\uff24\332\uff24\333\uff24\334\uff24\001\002" +
    "\000\004\002\uff98\001\002\000\146\002\uffad\254\uffad\255" +
    "\uffad\256\uffad\257\uffad\260\uffad\261\uffad\262\uffad\263\uffad" +
    "\264\uffad\265\uffad\266\uffad\267\uffad\270\uffad\271\uffad\272" +
    "\uffad\273\uffad\274\uffad\275\uffad\276\uffad\277\uffad\300\uffad" +
    "\301\uffad\302\uffad\303\uffad\304\uffad\305\uffad\306\uffad\307" +
    "\uffad\310\uffad\311\uffad\312\uffad\313\uffad\314\uffad\315\uffad" +
    "\316\uffad\317\uffad\320\uffad\321\uffad\322\uffad\323\uffad\324" +
    "\uffad\325\uffad\326\uffad\327\uffad\330\uffad\331\uffad\332\uffad" +
    "\333\uffad\334\uffad\001\002\000\146\002\uff15\254\uff15\255" +
    "\uff15\256\uff15\257\uff15\260\uff15\261\uff15\262\uff15\263\uff15" +
    "\264\uff15\265\uff15\266\uff15\267\uff15\270\uff15\271\uff15\272" +
    "\uff15\273\uff15\274\uff15\275\uff15\276\uff15\277\uff15\300\uff15" +
    "\301\uff15\302\uff15\303\uff15\304\uff15\305\uff15\306\uff15\307" +
    "\uff15\310\uff15\311\uff15\312\uff15\313\uff15\314\uff15\315\uff15" +
    "\316\uff15\317\uff15\320\uff15\321\uff15\322\uff15\323\uff15\324" +
    "\uff15\325\uff15\326\uff15\327\uff15\330\uff15\331\uff15\332\uff15" +
    "\333\uff15\334\uff15\001\002\000\146\002\uff21\254\uff21\255" +
    "\uff21\256\uff21\257\uff21\260\uff21\261\uff21\262\uff21\263\uff21" +
    "\264\uff21\265\uff21\266\uff21\267\uff21\270\uff21\271\uff21\272" +
    "\uff21\273\uff21\274\uff21\275\uff21\276\uff21\277\uff21\300\uff21" +
    "\301\uff21\302\uff21\303\uff21\304\uff21\305\uff21\306\uff21\307" +
    "\uff21\310\uff21\311\uff21\312\uff21\313\uff21\314\uff21\315\uff21" +
    "\316\uff21\317\uff21\320\uff21\321\uff21\322\uff21\323\uff21\324" +
    "\uff21\325\uff21\326\uff21\327\uff21\330\uff21\331\uff21\332\uff21" +
    "\333\uff21\334\uff21\001\002\000\004\002\uff8c\001\002\000" +
    "\004\002\uffbc\001\002\000\004\002\uff9e\001\002\000\146" +
    "\002\uff1e\254\uff1e\255\uff1e\256\uff1e\257\uff1e\260\uff1e\261" +
    "\uff1e\262\uff1e\263\uff1e\264\uff1e\265\uff1e\266\uff1e\267\uff1e" +
    "\270\uff1e\271\uff1e\272\uff1e\273\uff1e\274\uff1e\275\uff1e\276" +
    "\uff1e\277\uff1e\300\uff1e\301\uff1e\302\uff1e\303\uff1e\304\uff1e" +
    "\305\uff1e\306\uff1e\307\uff1e\310\uff1e\311\uff1e\312\uff1e\313" +
    "\uff1e\314\uff1e\315\uff1e\316\uff1e\317\uff1e\320\uff1e\321\uff1e" +
    "\322\uff1e\323\uff1e\324\uff1e\325\uff1e\326\uff1e\327\uff1e\330" +
    "\uff1e\331\uff1e\332\uff1e\333\uff1e\334\uff1e\001\002\000\004" +
    "\002\uff94\001\002\000\146\002\uff27\254\uff27\255\uff27\256" +
    "\uff27\257\uff27\260\uff27\261\uff27\262\uff27\263\uff27\264\uff27" +
    "\265\uff27\266\uff27\267\uff27\270\uff27\271\uff27\272\uff27\273" +
    "\uff27\274\uff27\275\uff27\276\uff27\277\uff27\300\uff27\301\uff27" +
    "\302\uff27\303\uff27\304\uff27\305\uff27\306\uff27\307\uff27\310" +
    "\uff27\311\uff27\312\uff27\313\uff27\314\uff27\315\uff27\316\uff27" +
    "\317\uff27\320\uff27\321\uff27\322\uff27\323\uff27\324\uff27\325" +
    "\uff27\326\uff27\327\uff27\330\uff27\331\uff27\332\uff27\333\uff27" +
    "\334\uff27\001\002\000\146\002\uff22\254\uff22\255\uff22\256" +
    "\uff22\257\uff22\260\uff22\261\uff22\262\uff22\263\uff22\264\uff22" +
    "\265\uff22\266\uff22\267\uff22\270\uff22\271\uff22\272\uff22\273" +
    "\uff22\274\uff22\275\uff22\276\uff22\277\uff22\300\uff22\301\uff22" +
    "\302\uff22\303\uff22\304\uff22\305\uff22\306\uff22\307\uff22\310" +
    "\uff22\311\uff22\312\uff22\313\uff22\314\uff22\315\uff22\316\uff22" +
    "\317\uff22\320\uff22\321\uff22\322\uff22\323\uff22\324\uff22\325" +
    "\uff22\326\uff22\327\uff22\330\uff22\331\uff22\332\uff22\333\uff22" +
    "\334\uff22\001\002\000\146\002\uffa6\254\uffa6\255\uffa6\256" +
    "\uffa6\257\uffa6\260\uffa6\261\uffa6\262\uffa6\263\uffa6\264\uffa6" +
    "\265\uffa6\266\uffa6\267\uffa6\270\uffa6\271\uffa6\272\uffa6\273" +
    "\uffa6\274\uffa6\275\uffa6\276\uffa6\277\uffa6\300\uffa6\301\uffa6" +
    "\302\uffa6\303\uffa6\304\uffa6\305\uffa6\306\uffa6\307\uffa6\310" +
    "\uffa6\311\uffa6\312\uffa6\313\uffa6\314\uffa6\315\uffa6\316\uffa6" +
    "\317\uffa6\320\uffa6\321\uffa6\322\uffa6\323\uffa6\324\uffa6\325" +
    "\uffa6\326\uffa6\327\uffa6\330\uffa6\331\uffa6\332\uffa6\333\uffa6" +
    "\334\uffa6\001\002\000\146\002\uff14\254\uff14\255\uff14\256" +
    "\uff14\257\uff14\260\uff14\261\uff14\262\uff14\263\uff14\264\uff14" +
    "\265\uff14\266\uff14\267\uff14\270\uff14\271\uff14\272\uff14\273" +
    "\uff14\274\uff14\275\uff14\276\uff14\277\uff14\300\uff14\301\uff14" +
    "\302\uff14\303\uff14\304\uff14\305\uff14\306\uff14\307\uff14\310" +
    "\uff14\311\uff14\312\uff14\313\uff14\314\uff14\315\uff14\316\uff14" +
    "\317\uff14\320\uff14\321\uff14\322\uff14\323\uff14\324\uff14\325" +
    "\uff14\326\uff14\327\uff14\330\uff14\331\uff14\332\uff14\333\uff14" +
    "\334\uff14\001\002\000\004\002\uff9b\001\002\000\004\002" +
    "\uff67\001\002\000\004\002\uff6a\001\002\000\004\002\uff56" +
    "\001\002\000\004\002\uff85\001\002\000\004\002\uff58\001" +
    "\002\000\004\002\uff64\001\002\000\004\002\uff63\001\002" +
    "\000\004\002\uff7e\001\002\000\004\002\uff62\001\002\000" +
    "\004\002\uff69\001\002\000\004\002\uff5a\001\002\000\004" +
    "\002\uff80\001\002\000\004\002\uff5c\001\002\000\004\002" +
    "\uff71\001\002\000\004\002\uff7b\001\002\000\004\002\uff5b" +
    "\001\002\000\004\002\uff70\001\002\000\004\002\uff6d\001" +
    "\002\000\004\002\uff6f\001\002\000\004\002\uff5f\001\002" +
    "\000\004\002\uff57\001\002\000\004\002\uff78\001\002\000" +
    "\004\002\uff66\001\002\000\004\002\uff7c\001\002\000\004" +
    "\002\uff7a\001\002\000\004\002\uff86\001\002\000\004\002" +
    "\uff74\001\002\000\004\002\uff75\001\002\000\004\002\uff59" +
    "\001\002\000\004\002\uff82\001\002\000\004\002\uff7f\001" +
    "\002\000\004\002\uff60\001\002\000\004\002\uff81\001\002" +
    "\000\004\002\uff61\001\002\000\004\002\uff76\001\002\000" +
    "\004\002\uff79\001\002\000\004\002\uff68\001\002\000\004" +
    "\002\uff84\001\002\000\004\002\uff73\001\002\000\004\002" +
    "\uff6e\001\002\000\004\002\uff6b\001\002\000\004\002\uff77" +
    "\001\002\000\004\002\001\001\002\000\004\002\uff83\001" +
    "\002\000\004\002\uff65\001\002\000\004\002\uff5e\001\002" +
    "\000\004\002\uff6c\001\002\000\004\002\uff7d\001\002\000" +
    "\004\002\uff5d\001\002\000\004\002\uff72\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\010\002\025\006\020\012\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\171\010\214\014\061\015\223" +
    "\016\155\017\122\020\211\021\221\022\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // PCASA ::= comedor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // PCASA ::= sala 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // PCASA ::= salon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // PCASA ::= dormitorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // PCASA ::= baño 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // PCASA ::= jardin 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // PCASA ::= cocina 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PCASA ::= casa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PCASA ::= puerta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // PCASA ::= escaleras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // PCASA ::= habitacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PCASA",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // LUGARES ::= escuela 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // LUGARES ::= farmacia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // LUGARES ::= museo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // LUGARES ::= libreria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // LUGARES ::= lavanderia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // LUGARES ::= gimnasio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // LUGARES ::= iglesia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LUGARES ::= cafe 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // LUGARES ::= banco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LUGARES ::= panaderia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LUGARES ::= aeropuerto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LUGARES",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // DIRECCIONES ::= derecha 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // DIRECCIONES ::= izquierda 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // DIRECCIONES ::= calle 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // DIRECCIONES ::= oeste 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // DIRECCIONES ::= sur 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // DIRECCIONES ::= norte 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DIRECCIONES",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // AUX_NEG ::= no 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUX_NEG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // AUXILIAR ::= no 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // AUXILIAR ::= si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // AUXILIAR ::= eres 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // AUXILIAR ::= soy 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // AUXILIAR ::= tengo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // AUXILIAR ::= es 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // AUXILIAR ::= nuestro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // AUXILIAR ::= su 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // AUXILIAR ::= tu 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // AUXILIAR ::= mi 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // AUXILIAR ::= cuantos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // AUXILIAR ::= de_quién 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // AUXILIAR ::= cuál 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // AUXILIAR ::= qué 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // AUXILIAR ::= cualquier 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // AUXILIAR ::= algún 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // AUXILIAR ::= todo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // AUXILIAR ::= cada 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // AUXILIAR ::= las 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // AUXILIAR ::= los 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // AUXILIAR ::= lo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // AUXILIAR ::= la 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // AUXILIAR ::= el 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // AUXILIAR ::= un 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // AUXILIAR ::= una 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // AUXILIAR ::= con 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // AUXILIAR ::= en 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // AUXILIAR ::= para 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AUXILIAR ::= a 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AUXILIAR ::= que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // AUXILIAR ::= puesto_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AUXILIAR ::= de 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // AUXILIAR ::= porque 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AUXILIAR ::= en_su_lugar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // AUXILIAR ::= sin_embargo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AUXILIAR ::= pero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // AUXILIAR ::= SALUDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AUXILIAR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // VERBO ::= ganar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // VERBO ::= despertar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // VERBO ::= pensar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // VERBO ::= contar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // VERBO ::= enseñar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // VERBO ::= tomar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // VERBO ::= nadar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // VERBO ::= hablar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // VERBO ::= dormir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // VERBO ::= cantar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // VERBO ::= mostrar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // VERBO ::= vender 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // VERBO ::= ver 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // VERBO ::= decir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // VERBO ::= correr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // VERBO ::= levantar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // VERBO ::= leer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // VERBO ::= poner 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // VERBO ::= hacer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // VERBO ::= perder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // VERBO ::= luz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // VERBO ::= mentir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // VERBO ::= dejar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // VERBO ::= salir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // VERBO ::= saber 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // VERBO ::= mantener 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // VERBO ::= escribir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // VERBO ::= herir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // VERBO ::= escuchar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // VERBO ::= tener 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // VERBO ::= ir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // VERBO ::= dar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // VERBO ::= obtener 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // VERBO ::= volar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // VERBO ::= luchar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // VERBO ::= comer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // VERBO ::= conducir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // VERBO ::= soñar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // VERBO ::= dibujar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // VERBO ::= venir 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // VERBO ::= poder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // VERBO ::= comprar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // VERBO ::= quemar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // VERBO ::= traer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // VERBO ::= soplar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // VERBO ::= morder 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // VERBO ::= comenzar 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // VERBO ::= convertirse 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // VERBO ::= ser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VERBO",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CUERPO ::= mano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CUERPO ::= rodilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPO ::= palma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPO ::= dedos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPO ::= codo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPO ::= espinilla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPO ::= tobillo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CUERPO ::= pulmones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CUERPO ::= corazon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO ::= cerebro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO ::= riñones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CUERPO ::= higado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPO ::= frente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CUERPO ::= lengua 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CUERPO ::= dientes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CUERPO ::= cara 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CUERPO ::= pies 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= pie 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO ::= pierna 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO ::= brazo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO ::= hombro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO ::= boca 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO ::= nariz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO ::= ojos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO ::= oreja 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO ::= cabeza 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO ::= cabello 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CUERPO",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PROFESIONES ::= payaso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PROFESIONES ::= limpio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PROFESIONES ::= cajero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PROFESIONES ::= carpintero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PROFESIONES ::= carnicero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PROFESIONES ::= panadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PROFESIONES ::= astronauta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PROFESIONES ::= arquitecto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PROFESIONES ::= contador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PROFESIONES ::= granjero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PROFESIONES ::= cocinero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PROFESIONES ::= maestro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PROFESIONES ::= doctor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PROFESIONES ::= enfermera 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PROFESIONES ::= empleos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PROFESIONES",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // COLOR ::= negro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // COLOR ::= gris 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // COLOR ::= blanco 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // COLOR ::= verde 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // COLOR ::= naranja 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // COLOR ::= azul 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // COLOR ::= morado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COLOR ::= rosado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COLOR ::= amarillo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COLOR ::= rojo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // COSAS ::= pasillo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // COSAS ::= galeria 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COSAS ::= fuente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COSAS ::= piso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COSAS ::= corredor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // COSAS ::= cornisa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COSAS ::= tello 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COSAS ::= balcon 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COSAS ::= pegamento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COSAS ::= computadora 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // COSAS ::= silla 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COSAS ::= escritorio 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COSAS ::= libro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COSAS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ANIMALES ::= toro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ANIMALES ::= rana 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ANIMALES ::= caballo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ANIMALES ::= ballena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ANIMALES ::= venado 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ANIMALES ::= pingüino 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ANIMALES ::= vaca 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ANIMALES ::= cerdo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ANIMALES ::= conejo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ANIMALES ::= pavo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ANIMALES ::= pato 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ANIMALES ::= obeja 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ANIMALES ::= gallina 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ANIMALES ::= gallo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ANIMALES ::= gato 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ANIMALES ::= perro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ANIMALES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUJETO ::= PCASA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUJETO ::= LUGARES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUJETO ::= COLOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUJETO ::= PROFESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SUJETO ::= ANIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SUJETO ::= ellos 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SUJETO ::= nosotros 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SUJETO ::= ello 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SUJETO ::= ella 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SUJETO ::= él 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUJETO ::= tú 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SUJETO ::= yo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SUJETO",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SALUDO ::= adios 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SALUDO ::= hola 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALUDO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INTERROGACION ::= AUXILIAR PCASA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INTERROGACION ::= AUXILIAR LUGARES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INTERROGACION ::= AUXILIAR DIRECCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INTERROGACION ::= AUXILIAR CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INTERROGACION ::= AUXILIAR PROFESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INTERROGACION ::= AUXILIAR COLOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INTERROGACION ::= AUXILIAR COSAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INTERROGACION ::= AUXILIAR ANIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INTERROGACION ::= AUXILIAR SUJETO VERBO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INTERROGACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // O_NEGATIVA ::= AUXILIAR PCASA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // O_NEGATIVA ::= AUXILIAR LUGARES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // O_NEGATIVA ::= AUXILIAR DIRECCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // O_NEGATIVA ::= AUXILIAR CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // O_NEGATIVA ::= AUXILIAR PROFESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // O_NEGATIVA ::= AUXILIAR COLOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // O_NEGATIVA ::= AUXILIAR COSAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // O_NEGATIVA ::= AUXILIAR ANIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // O_NEGATIVA ::= AUXILIAR SUJETO AUX_NEG VERBO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_NEGATIVA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // O_AFIRMATIVA ::= AUXILIAR PCASA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // O_AFIRMATIVA ::= AUXILIAR LUGARES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // O_AFIRMATIVA ::= AUXILIAR DIRECCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // O_AFIRMATIVA ::= AUXILIAR CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // O_AFIRMATIVA ::= AUXILIAR PROFESIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // O_AFIRMATIVA ::= AUXILIAR COLOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // O_AFIRMATIVA ::= AUXILIAR COSAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // O_AFIRMATIVA ::= AUXILIAR ANIMALES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= O_AFIRMATIVA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // O_AFIRMATIVA ::= AUXILIAR SUJETO VERBO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("O_AFIRMATIVA",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

