/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author bonni
 */
public class Traductor extends javax.swing.JFrame {

    /**
     * Creates new form Traductor
     */
    public Traductor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtSalida = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        btnRun = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtSalida.setColumns(20);
        txtSalida.setRows(5);
        jScrollPane1.setViewportView(txtSalida);

        txtEntrada.setColumns(20);
        txtEntrada.setRows(5);
        jScrollPane2.setViewportView(txtEntrada);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(294, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRun)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(298, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(btnRun)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(54, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(33, 33, 33)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            File archivo = new File("archivo.txt");
            PrintWriter escribir;
            escribir = new PrintWriter(archivo);
            escribir.print(txtEntrada.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Traductor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
            while(true){
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    //resultado += "FIN";
                    txtSalida.setText(resultado);
                    return;
                }
                switch(tokens){
                    case ERROR: 
                        resultado += "Palabra incorrecta\n";
                        break;
                    case hola:  
                        resultado += tokens + " ";
                        break;
                    case yo: 
                        resultado += tokens + " ";
                        break;
                    case tú: 
                        resultado += tokens + " ";
                        break;
                    case ella: 
                        resultado += tokens + " ";
                        break;
                    case él: 
                        resultado += tokens + " ";
                        break;
                    case ello: 
                        resultado += tokens + " ";
                        break;
                    case nosotros: 
                        resultado += tokens + " ";
                        break;
                    case ellos: 
                        resultado += tokens + " ";
                        break;
                    case rojo: 
                        resultado += tokens + " ";
                        break;
                    case amarillo: 
                        resultado += tokens + " ";
                        break;
                    case rosado: 
                        resultado += tokens + " ";
                        break;
                    case morado: 
                        resultado += tokens + " ";
                        break;
                    case azul: 
                        resultado += tokens + " ";
                        break;
                    case naranja: 
                        resultado += tokens + " ";
                        break;
                    case verde: 
                        resultado += tokens + " ";
                        break;
                    case blanco: 
                        resultado += tokens + " ";
                        break;
                    case gris: 
                        resultado += tokens + " ";
                        break;
                    case negro: 
                        resultado += tokens + " ";
                        break;
                    case bueno: 
                        resultado += tokens + " ";
                        break;
                    case malo: 
                        resultado += tokens + " ";
                        break;
                    case delgado: 
                        resultado += tokens + " ";
                        break;
                    case gordo: 
                        resultado += tokens + " ";
                        break;
                    case seco: 
                        resultado += tokens + " ";
                        break;
                    case corto: 
                        resultado += tokens + " ";
                        break;
                    case este: 
                        resultado += tokens + " ";
                        break;
                    case aquel: 
                        resultado += tokens + " ";
                        break;
                    case estos: 
                        resultado += tokens + " ";
                        break;
                    case aquellos: 
                        resultado += tokens + " ";
                        break;
                    case cada: 
                        resultado += tokens + " ";
                        break;
                    case todo: 
                        resultado += tokens + " ";
                        break;
                    case algún: 
                        resultado += tokens + " ";
                        break;
                    case cualquier: 
                        resultado += tokens + " ";
                        break;
                    case qué: 
                        resultado += tokens + " ";
                        break;
                    case cuál: 
                        resultado += tokens + " ";
                        break;
                    case de_quién: 
                        resultado += tokens + " ";
                        break;
                    case cuantos: 
                        resultado += tokens + " ";
                        break;
                    case mi: 
                        resultado += tokens + " ";
                        break;
                    case tu: 
                        resultado += tokens + " ";
                        break;
                    case su: 
                        resultado += tokens + " ";
                        break;
                    case nuestro: 
                        resultado += tokens + " ";
                        break;
                    case es: 
                        resultado += tokens + " ";
                        break;
                    case tengo: 
                        resultado += tokens + " ";
                        break;
                    case soy: 
                        resultado += tokens + " ";
                        break;
                    case eres: 
                        resultado += tokens + " ";
                        break;
                    case si: 
                        resultado += tokens + " ";
                        break;
                    case no: 
                        resultado += tokens + " ";
                        break;
                    case perro: 
                        resultado += tokens + " ";
                        break;
                    case gato: 
                        resultado += tokens + " ";
                        break;
                    case gallo: 
                        resultado += tokens + " ";
                        break;
                    case gallina: 
                        resultado += tokens + " ";
                        break;
                    case obeja: 
                        resultado += tokens + " ";
                        break;
                    case pato: 
                        resultado += tokens + " ";
                        break;
                    case pavo: 
                        resultado += tokens + " ";
                        break;
                    case conejo: 
                        resultado += tokens + " ";
                        break;
                    case cerdo: 
                        resultado += tokens + " ";
                        break;
                    case vaca: 
                        resultado += tokens + " ";
                        break;
                    case pingüino: 
                        resultado += tokens + " ";
                        break;
                    case venado: 
                        resultado += tokens + " ";
                        break;
                    case ballena: 
                        resultado += tokens + " ";
                        break;
                    case caballo: 
                        resultado += tokens + " ";
                        break;
                    case rana: 
                        resultado += tokens + " ";
                        break;
                    case toro: 
                        resultado += tokens + " ";
                        break;
                    case hombre: 
                        resultado += tokens + " ";
                        break;
                    case hombres: 
                        resultado += tokens + " ";
                        break;
                    case mujer: 
                        resultado += tokens + " ";
                        break;
                    case mujeres: 
                        resultado += tokens + " ";
                        break;
                    case niño: 
                        resultado += tokens + " ";
                        break;
                    case niños: 
                        resultado += tokens + " ";
                        break;
                    case niña: 
                        resultado += tokens + " ";
                        break;
                    case niñas: 
                        resultado += tokens + " ";
                        break;
                    case carro: 
                        resultado += tokens + " ";
                        break;
                    case avión: 
                        resultado += tokens + " ";
                        break;
                    case bicicleta: 
                        resultado += tokens + " ";
                        break;
                    case bus: 
                        resultado += tokens + " ";
                        break;
                    case barco: 
                        resultado += tokens + " ";
                        break;
                    case tren: 
                        resultado += tokens + " ";
                        break;
                    case empleos: 
                        resultado += tokens + " ";
                        break;
                    case enfermera: 
                        resultado += tokens + " ";
                        break;
                    case doctor: 
                        resultado += tokens + " ";
                        break;
                    case maestro: 
                        resultado += tokens + " ";
                        break;
                    case cocinero: 
                        resultado += tokens + " ";
                        break;
                    case granjero: 
                        resultado += tokens + " ";
                        break;
                    case cabello: 
                        resultado += tokens + " ";
                        break;
                    case cabeza: 
                        resultado += tokens + " ";
                        break;
                    case oreja: 
                        resultado += tokens + " ";
                        break;
                    case ojos: 
                        resultado += tokens + " ";
                        break;
                    case nariz: 
                        resultado += tokens + " ";
                        break;
                    case boca: 
                        resultado += tokens + " ";
                        break;
                    case hombro: 
                        resultado += tokens + " ";
                        break;
                    case brazo: 
                        resultado += tokens + " ";
                        break;
                    case mano: 
                        resultado += tokens + " ";
                        break;
                    case rodilla: 
                        resultado += tokens + " ";
                        break;
                    case pierna: 
                        resultado += tokens + " ";
                        break;
                    case pie: 
                        resultado += tokens + " ";
                        break;
                    case pies: 
                        resultado += tokens + " ";
                        break;
                    case libro: 
                        resultado += tokens + " ";
                        break;
                    case escritorio: 
                        resultado += tokens + " ";
                        break;
                    case silla: 
                        resultado += tokens + " ";
                        break;
                    case computadora: 
                        resultado += tokens + " ";
                        break;
                    case pegamento: 
                        resultado += tokens + " "; 
                        break;
                    default: 
                        resultado += tokens + " "; 
                        break;
                      
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Traductor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Traductor.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnRunActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Traductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Traductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Traductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Traductor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Traductor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRun;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtEntrada;
    private javax.swing.JTextArea txtSalida;
    // End of variables declaration//GEN-END:variables
}
