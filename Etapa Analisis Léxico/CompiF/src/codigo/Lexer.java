/* The following code was generated by JFlex 1.4.3 on 28/05/20 10:24 PM */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/20 10:24 PM from the specification file
 * <tt>C:/Users/bonni/Documents/NetBeansProjects/CompiF/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\32\2\0\1\1\22\0\1\1\13\0\1\1\3\0"+
    "\12\0\7\0\10\0\1\7\21\0\4\0\1\0\1\0\1\23\1\22"+
    "\1\25\1\16\1\3\1\26\1\24\1\2\1\6\1\31\1\21\1\4"+
    "\1\30\1\20\1\5\1\17\1\0\1\15\1\12\1\13\1\11\1\27"+
    "\1\14\1\0\1\10\1\0\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\5\1\1\3\20\1\1\4\1\0"+
    "\1\5\7\0\1\6\1\7\11\0\1\10\26\0\1\11"+
    "\15\0\1\12\3\0\1\13\1\14\1\0\1\15\5\0"+
    "\1\16\2\0\1\17\1\20\2\0\1\21\1\22\1\23"+
    "\15\0\1\24\4\0\1\25\2\0\1\26\3\0\1\27"+
    "\2\0\1\30\5\0\1\31\3\0\1\32\1\33\1\34"+
    "\1\35\1\36\7\0\1\37\1\0\1\40\1\41\3\0"+
    "\1\42\1\0\1\43\1\0\1\44\2\0\1\45\1\0"+
    "\1\46\1\47\1\50\1\51\1\52\3\0\1\53\3\0"+
    "\1\54\1\0\1\55\2\0\1\56\1\57\1\60\7\0"+
    "\1\61\4\0\1\62\1\63\1\0\1\64\2\0\1\65"+
    "\1\0\1\66\1\0\1\67\1\70\1\0\1\71\1\72"+
    "\1\73\1\0\1\74\1\75\1\76\1\77\1\0\1\100"+
    "\1\0\1\101\1\0\1\102\1\103\1\104\2\0\1\105"+
    "\1\5\1\106\1\107\2\0\1\110\1\0\1\111\1\112"+
    "\1\113\2\0\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\4\0\1\123\1\0\1\124\1\125\1\0\1\126"+
    "\1\127\1\130\2\0\1\131\1\132\1\133\2\0\1\134"+
    "\1\0\1\135\1\136\1\0\1\137\2\0\1\140\1\0"+
    "\1\141\1\142\1\143\1\144\1\0\1\145\1\146";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\33\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a"+
    "\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252"+
    "\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a"+
    "\0\u0345\0\u0360\0\u037b\0\33\0\u02be\0\u0396\0\u03b1\0\u03cc"+
    "\0\u03e7\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e\0\33\0\u0489"+
    "\0\u04a4\0\u04bf\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561"+
    "\0\u057c\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639"+
    "\0\u0654\0\u066f\0\u068a\0\u06a5\0\u06c0\0\33\0\u06db\0\u06f6"+
    "\0\u0711\0\u072c\0\u0747\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce"+
    "\0\u07e9\0\u0804\0\u081f\0\33\0\u083a\0\u0855\0\u0870\0\33"+
    "\0\33\0\u088b\0\33\0\u08a6\0\u08c1\0\u08dc\0\u08f7\0\u0912"+
    "\0\33\0\u092d\0\u0948\0\33\0\33\0\u0963\0\u097e\0\33"+
    "\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\33"+
    "\0\u0b2e\0\u0b49\0\u0b64\0\u0b7f\0\33\0\u0b9a\0\u0bb5\0\33"+
    "\0\u0bd0\0\u0beb\0\u0c06\0\33\0\u0c21\0\u0c3c\0\33\0\u0c57"+
    "\0\u0c72\0\u0c8d\0\u0ca8\0\u0cc3\0\u0cde\0\u0cf9\0\u0d14\0\u0d2f"+
    "\0\33\0\33\0\33\0\33\0\33\0\u0d4a\0\u0d65\0\u0d80"+
    "\0\u0d9b\0\u0db6\0\u0dd1\0\u0dec\0\33\0\u0e07\0\33\0\33"+
    "\0\u0e22\0\u0e3d\0\u0e58\0\33\0\u0e73\0\33\0\u0e8e\0\33"+
    "\0\u0ea9\0\u0ec4\0\33\0\u0edf\0\33\0\33\0\33\0\33"+
    "\0\33\0\u0efa\0\u0f15\0\u0f30\0\33\0\u0f4b\0\u0f66\0\u0f81"+
    "\0\33\0\u0f9c\0\33\0\u0fb7\0\u0fd2\0\33\0\33\0\33"+
    "\0\u0fed\0\u1008\0\u1023\0\u103e\0\u1059\0\u1074\0\u108f\0\33"+
    "\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\33\0\33\0\u1116\0\33"+
    "\0\u1131\0\u114c\0\33\0\u1167\0\33\0\u1182\0\33\0\33"+
    "\0\u119d\0\33\0\33\0\33\0\u11b8\0\33\0\33\0\33"+
    "\0\u11d3\0\u11ee\0\33\0\u1209\0\33\0\u1224\0\33\0\33"+
    "\0\33\0\u123f\0\u125a\0\33\0\33\0\33\0\33\0\u1275"+
    "\0\u1290\0\33\0\u12ab\0\33\0\33\0\33\0\u12c6\0\u12e1"+
    "\0\33\0\33\0\33\0\33\0\33\0\33\0\33\0\u12fc"+
    "\0\u1317\0\u1332\0\u134d\0\33\0\u1368\0\33\0\33\0\u1383"+
    "\0\33\0\33\0\33\0\u139e\0\u13b9\0\33\0\33\0\33"+
    "\0\u13d4\0\u13ef\0\33\0\u140a\0\33\0\33\0\u1425\0\33"+
    "\0\u1440\0\u145b\0\33\0\u1476\0\33\0\33\0\33\0\33"+
    "\0\u1491\0\33\0\33";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\1\31\35\0\1\3\34\0\1\32\1\0\1\33"+
    "\1\34\14\0\1\35\17\0\1\36\12\0\1\37\3\0"+
    "\1\40\6\0\1\41\40\0\1\42\3\0\1\43\27\0"+
    "\1\44\1\45\22\0\1\46\1\0\1\47\27\0\1\50"+
    "\2\0\1\51\27\0\1\52\1\53\5\0\1\54\3\0"+
    "\1\55\17\0\1\56\1\57\1\0\1\60\30\0\1\61"+
    "\1\0\1\62\15\0\1\63\12\0\1\64\1\0\1\65"+
    "\3\0\1\66\3\0\1\67\20\0\1\70\1\71\1\0"+
    "\1\72\2\0\1\73\26\0\1\74\3\0\1\75\41\0"+
    "\1\76\16\0\1\77\1\100\1\101\2\0\1\102\11\0"+
    "\1\103\24\0\1\104\2\0\1\105\7\0\1\106\6\0"+
    "\1\107\1\110\1\111\6\0\1\112\17\0\1\113\2\0"+
    "\1\114\15\0\1\115\12\0\1\116\1\0\1\117\7\0"+
    "\1\120\5\0\1\121\12\0\1\122\1\0\1\123\2\0"+
    "\1\124\12\0\1\125\14\0\1\126\31\0\1\127\10\0"+
    "\1\130\2\0\1\131\2\0\1\132\23\0\1\133\1\134"+
    "\27\0\1\130\26\0\1\135\11\0\1\136\6\0\1\137"+
    "\6\0\1\140\44\0\1\141\7\0\1\142\10\0\1\143"+
    "\53\0\1\144\23\0\1\145\40\0\1\146\13\0\1\147"+
    "\5\0\1\150\31\0\1\151\24\0\1\152\1\0\1\153"+
    "\55\0\1\154\5\0\1\155\1\0\1\156\1\157\14\0"+
    "\1\160\32\0\1\161\24\0\1\162\40\0\1\163\14\0"+
    "\1\164\1\165\14\0\1\166\37\0\1\167\20\0\1\170"+
    "\21\0\1\171\47\0\1\172\13\0\1\173\6\0\1\174"+
    "\44\0\1\175\1\176\32\0\1\177\15\0\1\200\42\0"+
    "\1\201\35\0\1\202\27\0\1\203\3\0\1\204\23\0"+
    "\1\205\27\0\1\206\1\207\34\0\1\210\20\0\1\211"+
    "\40\0\1\212\11\0\1\213\14\0\1\214\2\0\1\215"+
    "\12\0\1\216\34\0\1\217\11\0\1\220\5\0\1\221"+
    "\36\0\1\222\17\0\1\223\24\0\1\224\12\0\1\225"+
    "\33\0\1\226\26\0\1\227\42\0\1\230\20\0\1\231"+
    "\17\0\1\232\32\0\1\233\14\0\1\234\6\0\1\235"+
    "\13\0\1\236\15\0\1\237\1\0\1\240\20\0\1\241"+
    "\34\0\1\242\32\0\1\243\40\0\1\244\1\0\1\245"+
    "\35\0\1\246\23\0\1\247\41\0\1\250\34\0\1\251"+
    "\14\0\1\252\44\0\1\253\26\0\1\254\35\0\1\255"+
    "\33\0\1\256\17\0\1\257\41\0\1\260\22\0\1\261"+
    "\45\0\1\262\35\0\1\263\16\0\1\264\43\0\1\265"+
    "\20\0\1\266\40\0\1\267\3\0\1\270\20\0\1\271"+
    "\35\0\1\272\1\0\1\273\1\0\1\274\32\0\1\275"+
    "\32\0\1\276\5\0\1\277\25\0\1\300\44\0\1\301"+
    "\26\0\1\302\17\0\1\303\36\0\1\304\33\0\1\305"+
    "\11\0\1\306\11\0\1\307\6\0\1\310\22\0\1\311"+
    "\17\0\1\312\21\0\1\313\42\0\1\314\25\0\1\315"+
    "\36\0\1\316\24\0\1\317\40\0\1\320\35\0\1\321"+
    "\26\0\1\322\33\0\1\323\30\0\1\324\16\0\1\325"+
    "\41\0\1\326\23\0\1\327\32\0\1\330\54\0\1\331"+
    "\26\0\1\332\23\0\1\333\33\0\1\334\27\0\1\335"+
    "\26\0\1\336\31\0\1\337\45\0\1\340\20\0\1\341"+
    "\31\0\1\342\37\0\1\343\30\0\1\344\45\0\1\345"+
    "\30\0\1\346\26\0\1\347\32\0\1\350\43\0\1\351"+
    "\36\0\1\352\15\0\1\353\31\0\1\354\25\0\1\355"+
    "\30\0\1\356\37\0\1\357\46\0\1\360\13\0\1\361"+
    "\44\0\1\362\17\0\1\363\41\0\1\364\34\0\1\130"+
    "\20\0\1\365\32\0\1\366\31\0\1\367\33\0\1\370"+
    "\47\0\1\371\15\0\1\372\32\0\1\373\31\0\1\374"+
    "\33\0\1\375\47\0\1\376\32\0\1\377\25\0\1\u0100"+
    "\25\0\1\u0101\31\0\1\u0102\36\0\1\u0103\24\0\1\u0104"+
    "\33\0\1\u0105\31\0\1\u0106\50\0\1\u0107\36\0\1\u0108"+
    "\17\0\1\u0109\40\0\1\u010a\27\0\1\u010b\26\0\1\u010c"+
    "\24\0\1\u010d\31\0\1\u010e\33\0\1\u010f\43\0\1\u0110"+
    "\34\0\1\u0111\17\0\1\u0112\37\0\1\u0113\25\0\1\u0114"+
    "\42\0\1\u0115\34\0\1\u0116\23\0\1\u0117\27\0\1\u0118"+
    "\33\0\1\u0119\41\0\1\u011a\34\0\1\u011b\20\0\1\u011c"+
    "\44\0\1\u011d\32\0\1\u011e\35\0\1\u011f\15\0\1\u0120"+
    "\32\0\1\u0121\44\0\1\u0122\32\0\1\u0123\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\21\1\1\0\1\1\7\0"+
    "\1\11\1\1\11\0\1\11\26\0\1\11\15\0\1\11"+
    "\3\0\2\11\1\0\1\11\5\0\1\11\2\0\2\11"+
    "\2\0\1\11\2\1\15\0\1\11\4\0\1\11\2\0"+
    "\1\11\3\0\1\11\2\0\1\11\5\0\1\1\3\0"+
    "\5\11\7\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\1\0\5\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\3\11\7\0"+
    "\1\11\4\0\2\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\2\11\1\0\3\11\1\0\3\11\1\1"+
    "\1\0\1\11\1\0\1\11\1\0\3\11\2\0\4\11"+
    "\2\0\1\11\1\0\3\11\2\0\7\11\4\0\1\11"+
    "\1\0\2\11\1\0\3\11\2\0\3\11\2\0\1\11"+
    "\1\0\2\11\1\0\1\11\2\0\1\11\1\0\4\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 90) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 51: 
          { lexeme = yytext(); return escritorio;
          }
        case 103: break;
        case 15: 
          { lexeme = yytext(); return pierna;
          }
        case 104: break;
        case 66: 
          { lexeme = yytext(); return pies;
          }
        case 105: break;
        case 79: 
          { lexeme = yytext(); return cuál;
          }
        case 106: break;
        case 101: 
          { lexeme = yytext(); return hombro;
          }
        case 107: break;
        case 29: 
          { lexeme = yytext(); return brazo;
          }
        case 108: break;
        case 99: 
          { lexeme = yytext(); return pingüino;
          }
        case 109: break;
        case 93: 
          { lexeme = yytext(); return conejo;
          }
        case 110: break;
        case 22: 
          { lexeme = yytext(); return seco;
          }
        case 111: break;
        case 84: 
          { lexeme = yytext(); return enfermera;
          }
        case 112: break;
        case 68: 
          { lexeme = yytext(); return rana;
          }
        case 113: break;
        case 58: 
          { lexeme = yytext(); return niños;
          }
        case 114: break;
        case 33: 
          { lexeme = yytext(); return carro;
          }
        case 115: break;
        case 47: 
          { lexeme = yytext(); return delgado;
          }
        case 116: break;
        case 71: 
          { lexeme = yytext(); return todo;
          }
        case 117: break;
        case 40: 
          { lexeme = yytext(); return tengo;
          }
        case 118: break;
        case 38: 
          { lexeme = yytext(); return cabello;
          }
        case 119: break;
        case 8: 
          { lexeme=yytext(); return nosotros;
          }
        case 120: break;
        case 17: 
          { lexeme = yytext(); return si;
          }
        case 121: break;
        case 46: 
          { lexeme = yytext(); return este;
          }
        case 122: break;
        case 50: 
          { lexeme = yytext(); return venado;
          }
        case 123: break;
        case 43: 
          { lexeme = yytext(); return tu;
          }
        case 124: break;
        case 45: 
          { lexeme=yytext(); return ellos;
          }
        case 125: break;
        case 11: 
          { lexeme = yytext(); return su;
          }
        case 126: break;
        case 13: 
          { lexeme = yytext(); return cuantos;
          }
        case 127: break;
        case 42: 
          { lexeme = yytext(); return cada;
          }
        case 128: break;
        case 2: 
          { /*Ignore*/
          }
        case 129: break;
        case 81: 
          { lexeme = yytext(); return mujeres;
          }
        case 130: break;
        case 87: 
          { lexeme = yytext(); return verde;
          }
        case 131: break;
        case 88: 
          { lexeme = yytext(); return silla;
          }
        case 132: break;
        case 20: 
          { lexeme = yytext(); return rojo;
          }
        case 133: break;
        case 44: 
          { lexeme = yytext(); return algún;
          }
        case 134: break;
        case 76: 
          { lexeme = yytext(); return tren;
          }
        case 135: break;
        case 54: 
          { lexeme = yytext(); return nariz;
          }
        case 136: break;
        case 24: 
          { lexeme = yytext(); return no;
          }
        case 137: break;
        case 9: 
          { lexeme = yytext(); return soy;
          }
        case 138: break;
        case 28: 
          { lexeme = yytext(); return eres;
          }
        case 139: break;
        case 10: 
          { lexeme = yytext(); return mi;
          }
        case 140: break;
        case 18: 
          { lexeme=yytext(); return tú;
          }
        case 141: break;
        case 21: 
          { lexeme = yytext(); return perro;
          }
        case 142: break;
        case 1: 
          { return ERROR;
          }
        case 143: break;
        case 73: 
          { lexeme = yytext(); return corto;
          }
        case 144: break;
        case 59: 
          { lexeme = yytext(); return barco;
          }
        case 145: break;
        case 12: 
          { lexeme = yytext(); return gallina;
          }
        case 146: break;
        case 61: 
          { lexeme = yytext(); return pegamento;
          }
        case 147: break;
        case 5: 
          { lexeme=yytext(); return hola;
          }
        case 148: break;
        case 55: 
          { lexeme = yytext(); return rodilla;
          }
        case 149: break;
        case 77: 
          { lexeme = yytext(); return de_quién;
          }
        case 150: break;
        case 74: 
          { lexeme = yytext(); return estos;
          }
        case 151: break;
        case 86: 
          { lexeme = yytext(); return niñas;
          }
        case 152: break;
        case 34: 
          { lexeme = yytext(); return gordo;
          }
        case 153: break;
        case 53: 
          { lexeme = yytext(); return rosado;
          }
        case 154: break;
        case 57: 
          { lexeme = yytext(); return libro;
          }
        case 155: break;
        case 16: 
          { lexeme = yytext(); return nuestro;
          }
        case 156: break;
        case 65: 
          { lexeme = yytext(); return cocinero;
          }
        case 157: break;
        case 82: 
          { lexeme = yytext(); return mujer;
          }
        case 158: break;
        case 95: 
          { lexeme = yytext(); return morado;
          }
        case 159: break;
        case 78: 
          { lexeme = yytext(); return blanco;
          }
        case 160: break;
        case 102: 
          { lexeme = yytext(); return computadora;
          }
        case 161: break;
        case 25: 
          { lexeme = yytext(); return niño;
          }
        case 162: break;
        case 36: 
          { lexeme = yytext(); return hombre;
          }
        case 163: break;
        case 31: 
          { lexeme = yytext(); return vaca;
          }
        case 164: break;
        case 60: 
          { lexeme = yytext(); return toro;
          }
        case 165: break;
        case 97: 
          { lexeme = yytext(); return maestro;
          }
        case 166: break;
        case 96: 
          { lexeme = yytext(); return granjero;
          }
        case 167: break;
        case 26: 
          { lexeme = yytext(); return bus;
          }
        case 168: break;
        case 7: 
          { lexeme=yytext(); return ello;
          }
        case 169: break;
        case 67: 
          { lexeme = yytext(); return pie;
          }
        case 170: break;
        case 32: 
          { lexeme = yytext(); return gato;
          }
        case 171: break;
        case 83: 
          { lexeme = yytext(); return avión;
          }
        case 172: break;
        case 91: 
          { lexeme = yytext(); return amarillo;
          }
        case 173: break;
        case 75: 
          { lexeme = yytext(); return aquellos;
          }
        case 174: break;
        case 4: 
          { lexeme=yytext(); return él;
          }
        case 175: break;
        case 48: 
          { lexeme = yytext(); return aquel;
          }
        case 176: break;
        case 39: 
          { lexeme = yytext(); return mano;
          }
        case 177: break;
        case 98: 
          { lexeme = yytext(); return gallo;
          }
        case 178: break;
        case 94: 
          { lexeme = yytext(); return doctor;
          }
        case 179: break;
        case 3: 
          { lexeme=yytext(); return yo;
          }
        case 180: break;
        case 100: 
          { lexeme = yytext(); return bicicleta;
          }
        case 181: break;
        case 85: 
          { lexeme = yytext(); return negro;
          }
        case 182: break;
        case 23: 
          { lexeme = yytext(); return cerdo;
          }
        case 183: break;
        case 89: 
          { lexeme = yytext(); return boca;
          }
        case 184: break;
        case 27: 
          { lexeme = yytext(); return malo;
          }
        case 185: break;
        case 30: 
          { lexeme = yytext(); return cualquier;
          }
        case 186: break;
        case 64: 
          { lexeme = yytext(); return gris;
          }
        case 187: break;
        case 37: 
          { lexeme = yytext(); return cabeza;
          }
        case 188: break;
        case 70: 
          { lexeme = yytext(); return caballo;
          }
        case 189: break;
        case 49: 
          { lexeme = yytext(); return qué;
          }
        case 190: break;
        case 90: 
          { lexeme = yytext(); return naranja;
          }
        case 191: break;
        case 63: 
          { lexeme = yytext(); return niña;
          }
        case 192: break;
        case 41: 
          { lexeme = yytext(); return ojos;
          }
        case 193: break;
        case 92: 
          { lexeme = yytext(); return pavo;
          }
        case 194: break;
        case 56: 
          { lexeme = yytext(); return azul;
          }
        case 195: break;
        case 69: 
          { lexeme = yytext(); return empleos;
          }
        case 196: break;
        case 62: 
          { lexeme = yytext(); return bueno;
          }
        case 197: break;
        case 14: 
          { lexeme = yytext(); return oreja;
          }
        case 198: break;
        case 19: 
          { lexeme=yytext(); return ella;
          }
        case 199: break;
        case 6: 
          { lexeme = yytext(); return es;
          }
        case 200: break;
        case 80: 
          { lexeme = yytext(); return ballena;
          }
        case 201: break;
        case 72: 
          { lexeme = yytext(); return obeja;
          }
        case 202: break;
        case 35: 
          { lexeme = yytext(); return hombres;
          }
        case 203: break;
        case 52: 
          { lexeme = yytext(); return pato;
          }
        case 204: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
